
STM32CubeAI Hello World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001264c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003128  080127fc  080127fc  000227fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015924  08015924  000306c4  2**0
                  CONTENTS
  4 .ARM          00000008  08015924  08015924  00025924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801592c  0801592c  000306c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801592c  0801592c  0002592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015930  08015930  00025930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c4  20000000  08015934  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  200006c4  08015ff8  000306c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f70  08015ff8  00030f70  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000306c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fa0  00000000  00000000  000306f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e19  00000000  00000000  00056698  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e10  00000000  00000000  0005b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b68  00000000  00000000  0005d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002aa2b  00000000  00000000  0005ee30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c754  00000000  00000000  0008985b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f37e2  00000000  00000000  000a5faf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000056d2  00000000  00000000  00199791  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000001a4  00000000  00000000  0019ee63  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000020  00000000  00000000  0019f008  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000c8dc  00000000  00000000  0019f028  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200006c4 	.word	0x200006c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080127e4 	.word	0x080127e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200006c8 	.word	0x200006c8
 80001ec:	080127e4 	.word	0x080127e4

080001f0 <_ai_platform_get_io_buffers_info>:
 80001f0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001f4:	2500      	movs	r5, #0
 80001f6:	46aa      	mov	sl, r5
 80001f8:	b082      	sub	sp, #8
 80001fa:	4607      	mov	r7, r0
 80001fc:	46ab      	mov	fp, r5
 80001fe:	46d0      	mov	r8, sl
 8000200:	46d1      	mov	r9, sl
 8000202:	e028      	b.n	8000256 <_ai_platform_get_io_buffers_info+0x66>
 8000204:	2000      	movs	r0, #0
 8000206:	e01c      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>
 8000208:	f850 400a 	ldr.w	r4, [r0, sl]
 800020c:	b364      	cbz	r4, 8000268 <_ai_platform_get_io_buffers_info+0x78>
 800020e:	68b8      	ldr	r0, [r7, #8]
 8000210:	6841      	ldr	r1, [r0, #4]
 8000212:	6880      	ldr	r0, [r0, #8]
 8000214:	4440      	add	r0, r8
 8000216:	eb01 0609 	add.w	r6, r1, r9
 800021a:	9000      	str	r0, [sp, #0]
 800021c:	69a1      	ldr	r1, [r4, #24]
 800021e:	6808      	ldr	r0, [r1, #0]
 8000220:	f004 fe54 	bl	8004ecc <ai_array_to_buffer_fmt>
 8000224:	6030      	str	r0, [r6, #0]
 8000226:	2101      	movs	r1, #1
 8000228:	80b1      	strh	r1, [r6, #4]
 800022a:	68e0      	ldr	r0, [r4, #12]
 800022c:	68c1      	ldr	r1, [r0, #12]
 800022e:	80f1      	strh	r1, [r6, #6]
 8000230:	6882      	ldr	r2, [r0, #8]
 8000232:	8132      	strh	r2, [r6, #8]
 8000234:	6840      	ldr	r0, [r0, #4]
 8000236:	60f0      	str	r0, [r6, #12]
 8000238:	69a1      	ldr	r1, [r4, #24]
 800023a:	688a      	ldr	r2, [r1, #8]
 800023c:	6132      	str	r2, [r6, #16]
 800023e:	9800      	ldr	r0, [sp, #0]
 8000240:	b9e0      	cbnz	r0, 800027c <_ai_platform_get_io_buffers_info+0x8c>
 8000242:	6170      	str	r0, [r6, #20]
 8000244:	1c6d      	adds	r5, r5, #1
 8000246:	f10b 0b01 	add.w	fp, fp, #1
 800024a:	f109 0918 	add.w	r9, r9, #24
 800024e:	f108 0808 	add.w	r8, r8, #8
 8000252:	f10a 0a04 	add.w	sl, sl, #4
 8000256:	2f00      	cmp	r7, #0
 8000258:	bf14      	ite	ne
 800025a:	8838      	ldrhne	r0, [r7, #0]
 800025c:	2000      	moveq	r0, #0
 800025e:	4583      	cmp	fp, r0
 8000260:	d202      	bcs.n	8000268 <_ai_platform_get_io_buffers_info+0x78>
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	2800      	cmp	r0, #0
 8000266:	d1cf      	bne.n	8000208 <_ai_platform_get_io_buffers_info+0x18>
 8000268:	b2a8      	uxth	r0, r5
 800026a:	b118      	cbz	r0, 8000274 <_ai_platform_get_io_buffers_info+0x84>
 800026c:	68b9      	ldr	r1, [r7, #8]
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	684a      	ldr	r2, [r1, #4]
 8000272:	6002      	str	r2, [r0, #0]
 8000274:	b2a8      	uxth	r0, r5
 8000276:	b003      	add	sp, #12
 8000278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800027c:	9900      	ldr	r1, [sp, #0]
 800027e:	2000      	movs	r0, #0
 8000280:	6008      	str	r0, [r1, #0]
 8000282:	9a00      	ldr	r2, [sp, #0]
 8000284:	6820      	ldr	r0, [r4, #0]
 8000286:	6050      	str	r0, [r2, #4]
 8000288:	2800      	cmp	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	8840      	ldrhne	r0, [r0, #2]
 800028e:	2800      	cmpne	r0, #0
 8000290:	d0b8      	beq.n	8000204 <_ai_platform_get_io_buffers_info+0x14>
 8000292:	9800      	ldr	r0, [sp, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	6001      	str	r1, [r0, #0]
 8000298:	9800      	ldr	r0, [sp, #0]
 800029a:	e7d2      	b.n	8000242 <_ai_platform_get_io_buffers_info+0x52>

0800029c <_platform_network_state_setup>:
 800029c:	b430      	push	{r4, r5}
 800029e:	68d3      	ldr	r3, [r2, #12]
 80002a0:	6955      	ldr	r5, [r2, #20]
 80002a2:	68dc      	ldr	r4, [r3, #12]
 80002a4:	68eb      	ldr	r3, [r5, #12]
 80002a6:	435c      	muls	r4, r3
 80002a8:	6084      	str	r4, [r0, #8]
 80002aa:	888d      	ldrh	r5, [r1, #4]
 80002ac:	436c      	muls	r4, r5
 80002ae:	60c4      	str	r4, [r0, #12]
 80002b0:	6909      	ldr	r1, [r1, #16]
 80002b2:	68c3      	ldr	r3, [r0, #12]
 80002b4:	6041      	str	r1, [r0, #4]
 80002b6:	4419      	add	r1, r3
 80002b8:	6001      	str	r1, [r0, #0]
 80002ba:	6992      	ldr	r2, [r2, #24]
 80002bc:	6814      	ldr	r4, [r2, #0]
 80002be:	00a1      	lsls	r1, r4, #2
 80002c0:	d407      	bmi.n	80002d2 <_platform_network_state_setup+0x36>
 80002c2:	6894      	ldr	r4, [r2, #8]
 80002c4:	68d1      	ldr	r1, [r2, #12]
 80002c6:	6843      	ldr	r3, [r0, #4]
 80002c8:	1a64      	subs	r4, r4, r1
 80002ca:	1919      	adds	r1, r3, r4
 80002cc:	6091      	str	r1, [r2, #8]
 80002ce:	6840      	ldr	r0, [r0, #4]
 80002d0:	60d0      	str	r0, [r2, #12]
 80002d2:	bc30      	pop	{r4, r5}
 80002d4:	4770      	bx	lr

080002d6 <ai_platform_runtime_get_revision>:
 80002d6:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000aec <.text_18>
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	0849      	lsrs	r1, r1, #1
 80002de:	0049      	lsls	r1, r1, #1
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	2001      	movs	r0, #1
 80002e4:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000af0 <.text_19>
 80002e8:	6088      	str	r0, [r1, #8]
 80002ea:	6888      	ldr	r0, [r1, #8]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1fc      	bne.n	80002ea <ai_platform_runtime_get_revision+0x14>
 80002f0:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000af4 <.text_20>
 80002f4:	600a      	str	r2, [r1, #0]
 80002f6:	6808      	ldr	r0, [r1, #0]
 80002f8:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000af8 <.text_21>
 80002fc:	4288      	cmp	r0, r1
 80002fe:	d000      	beq.n	8000302 <ai_platform_runtime_get_revision+0x2c>
 8000300:	e7fe      	b.n	8000300 <ai_platform_runtime_get_revision+0x2a>
 8000302:	a0ad      	add	r0, pc, #692	; (adr r0, 80005b8 <.text_13>)
 8000304:	4770      	bx	lr

08000306 <ai_platform_runtime_get_version>:
 8000306:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000aec <.text_18>
 800030a:	6801      	ldr	r1, [r0, #0]
 800030c:	0849      	lsrs	r1, r1, #1
 800030e:	0049      	lsls	r1, r1, #1
 8000310:	6001      	str	r1, [r0, #0]
 8000312:	2001      	movs	r0, #1
 8000314:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000af0 <.text_19>
 8000318:	6088      	str	r0, [r1, #8]
 800031a:	6888      	ldr	r0, [r1, #8]
 800031c:	2800      	cmp	r0, #0
 800031e:	d1fc      	bne.n	800031a <ai_platform_runtime_get_version+0x14>
 8000320:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000af4 <.text_20>
 8000324:	600a      	str	r2, [r1, #0]
 8000326:	6808      	ldr	r0, [r1, #0]
 8000328:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000af8 <.text_21>
 800032c:	4288      	cmp	r0, r1
 800032e:	d000      	beq.n	8000332 <ai_platform_runtime_get_version+0x2c>
 8000330:	e7fe      	b.n	8000330 <ai_platform_runtime_get_version+0x2a>
 8000332:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 8000336:	6810      	ldr	r0, [r2, #0]
 8000338:	4770      	bx	lr

0800033a <ai_platform_api_get_version>:
 800033a:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000aec <.text_18>
 800033e:	6801      	ldr	r1, [r0, #0]
 8000340:	0849      	lsrs	r1, r1, #1
 8000342:	0049      	lsls	r1, r1, #1
 8000344:	6001      	str	r1, [r0, #0]
 8000346:	2001      	movs	r0, #1
 8000348:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000af0 <.text_19>
 800034c:	6088      	str	r0, [r1, #8]
 800034e:	6888      	ldr	r0, [r1, #8]
 8000350:	2800      	cmp	r0, #0
 8000352:	d1fc      	bne.n	800034e <ai_platform_api_get_version+0x14>
 8000354:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000af4 <.text_20>
 8000358:	600a      	str	r2, [r1, #0]
 800035a:	6808      	ldr	r0, [r1, #0]
 800035c:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000af8 <.text_21>
 8000360:	4288      	cmp	r0, r1
 8000362:	d000      	beq.n	8000366 <ai_platform_api_get_version+0x2c>
 8000364:	e7fe      	b.n	8000364 <ai_platform_api_get_version+0x2a>
 8000366:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 800036a:	6810      	ldr	r0, [r2, #0]
 800036c:	4770      	bx	lr

0800036e <ai_platform_interface_api_get_version>:
 800036e:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000aec <.text_18>
 8000372:	6801      	ldr	r1, [r0, #0]
 8000374:	0849      	lsrs	r1, r1, #1
 8000376:	0049      	lsls	r1, r1, #1
 8000378:	6001      	str	r1, [r0, #0]
 800037a:	2001      	movs	r0, #1
 800037c:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000af0 <.text_19>
 8000380:	6088      	str	r0, [r1, #8]
 8000382:	6888      	ldr	r0, [r1, #8]
 8000384:	2800      	cmp	r0, #0
 8000386:	d1fc      	bne.n	8000382 <ai_platform_interface_api_get_version+0x14>
 8000388:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000af4 <.text_20>
 800038c:	600a      	str	r2, [r1, #0]
 800038e:	6808      	ldr	r0, [r1, #0]
 8000390:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000af8 <.text_21>
 8000394:	4288      	cmp	r0, r1
 8000396:	d000      	beq.n	800039a <ai_platform_interface_api_get_version+0x2c>
 8000398:	e7fe      	b.n	8000398 <ai_platform_interface_api_get_version+0x2a>
 800039a:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 800039e:	6810      	ldr	r0, [r2, #0]
 80003a0:	4770      	bx	lr

080003a2 <ai_platform_context_acquire>:
 80003a2:	b120      	cbz	r0, 80003ae <ai_platform_context_acquire+0xc>
 80003a4:	6801      	ldr	r1, [r0, #0]
 80003a6:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000afc <.text_22>
 80003aa:	4291      	cmp	r1, r2
 80003ac:	d000      	beq.n	80003b0 <ai_platform_context_acquire+0xe>
 80003ae:	2000      	movs	r0, #0
 80003b0:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000aec <.text_18>
 80003b4:	680a      	ldr	r2, [r1, #0]
 80003b6:	0852      	lsrs	r2, r2, #1
 80003b8:	0052      	lsls	r2, r2, #1
 80003ba:	600a      	str	r2, [r1, #0]
 80003bc:	2101      	movs	r1, #1
 80003be:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000af0 <.text_19>
 80003c2:	6091      	str	r1, [r2, #8]
 80003c4:	6891      	ldr	r1, [r2, #8]
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d1fc      	bne.n	80003c4 <ai_platform_context_acquire+0x22>
 80003ca:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000af4 <.text_20>
 80003ce:	6013      	str	r3, [r2, #0]
 80003d0:	6811      	ldr	r1, [r2, #0]
 80003d2:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000af8 <.text_21>
 80003d6:	4291      	cmp	r1, r2
 80003d8:	d000      	beq.n	80003dc <ai_platform_context_acquire+0x3a>
 80003da:	e7fe      	b.n	80003da <ai_platform_context_acquire+0x38>
 80003dc:	4770      	bx	lr

080003de <ai_platform_context_release>:
 80003de:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000afc <.text_22>
 80003e2:	6001      	str	r1, [r0, #0]
 80003e4:	4770      	bx	lr

080003e6 <ai_platform_network_get_error>:
 80003e6:	b120      	cbz	r0, 80003f2 <ai_platform_network_get_error+0xc>
 80003e8:	6801      	ldr	r1, [r0, #0]
 80003ea:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000afc <.text_22>
 80003ee:	4291      	cmp	r1, r2
 80003f0:	d000      	beq.n	80003f4 <ai_platform_network_get_error+0xe>
 80003f2:	2000      	movs	r0, #0
 80003f4:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000aec <.text_18>
 80003f8:	680a      	ldr	r2, [r1, #0]
 80003fa:	0852      	lsrs	r2, r2, #1
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	600a      	str	r2, [r1, #0]
 8000400:	2101      	movs	r1, #1
 8000402:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000af0 <.text_19>
 8000406:	6091      	str	r1, [r2, #8]
 8000408:	6891      	ldr	r1, [r2, #8]
 800040a:	2900      	cmp	r1, #0
 800040c:	d1fc      	bne.n	8000408 <ai_platform_network_get_error+0x22>
 800040e:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000af4 <.text_20>
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	6811      	ldr	r1, [r2, #0]
 8000416:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000af8 <.text_21>
 800041a:	4291      	cmp	r1, r2
 800041c:	d000      	beq.n	8000420 <ai_platform_network_get_error+0x3a>
 800041e:	e7fe      	b.n	800041e <ai_platform_network_get_error+0x38>
 8000420:	2800      	cmp	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	3010      	addne	r0, #16
 8000426:	f000 bb83 	bne.w	8000b30 <core_get_error>
 800042a:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 800042e:	6800      	ldr	r0, [r0, #0]
 8000430:	4770      	bx	lr

08000432 <ai_platform_network_set_error>:
 8000432:	2800      	cmp	r0, #0
 8000434:	bf1c      	itt	ne
 8000436:	3010      	addne	r0, #16
 8000438:	f000 bb7f 	bne.w	8000b3a <core_set_error>
 800043c:	4770      	bx	lr

0800043e <ai_platform_api_get_network_report>:
 800043e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000442:	ea5f 0900 	movs.w	r9, r0
 8000446:	b081      	sub	sp, #4
 8000448:	460c      	mov	r4, r1
 800044a:	d005      	beq.n	8000458 <ai_platform_api_get_network_report+0x1a>
 800044c:	f8d9 0000 	ldr.w	r0, [r9]
 8000450:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000afc <.text_22>
 8000454:	4288      	cmp	r0, r1
 8000456:	d001      	beq.n	800045c <ai_platform_api_get_network_report+0x1e>
 8000458:	f04f 0900 	mov.w	r9, #0
 800045c:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000aec <.text_18>
 8000460:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000af0 <.text_19>
 8000464:	6828      	ldr	r0, [r5, #0]
 8000466:	0840      	lsrs	r0, r0, #1
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	6028      	str	r0, [r5, #0]
 800046c:	2101      	movs	r1, #1
 800046e:	60b1      	str	r1, [r6, #8]
 8000470:	68b0      	ldr	r0, [r6, #8]
 8000472:	2800      	cmp	r0, #0
 8000474:	d1fc      	bne.n	8000470 <ai_platform_api_get_network_report+0x32>
 8000476:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000af4 <.text_20>
 800047a:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000af8 <.text_21>
 800047e:	6037      	str	r7, [r6, #0]
 8000480:	6830      	ldr	r0, [r6, #0]
 8000482:	4540      	cmp	r0, r8
 8000484:	d000      	beq.n	8000488 <ai_platform_api_get_network_report+0x4a>
 8000486:	e7fe      	b.n	8000486 <ai_platform_api_get_network_report+0x48>
 8000488:	f1b9 0f00 	cmp.w	r9, #0
 800048c:	bf18      	it	ne
 800048e:	2c00      	cmpne	r4, #0
 8000490:	d034      	beq.n	80004fc <ai_platform_api_get_network_report+0xbe>
 8000492:	2000      	movs	r0, #0
 8000494:	66e0      	str	r0, [r4, #108]	; 0x6c
 8000496:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 800049a:	b152      	cbz	r2, 80004b2 <ai_platform_api_get_network_report+0x74>
 800049c:	e000      	b.n	80004a0 <ai_platform_api_get_network_report+0x62>
 800049e:	4602      	mov	r2, r0
 80004a0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80004a2:	1c49      	adds	r1, r1, #1
 80004a4:	66e1      	str	r1, [r4, #108]	; 0x6c
 80004a6:	68d0      	ldr	r0, [r2, #12]
 80004a8:	4282      	cmp	r2, r0
 80004aa:	bf18      	it	ne
 80004ac:	2800      	cmpne	r0, #0
 80004ae:	d1f6      	bne.n	800049e <ai_platform_api_get_network_report+0x60>
 80004b0:	b911      	cbnz	r1, 80004b8 <ai_platform_api_get_network_report+0x7a>
 80004b2:	2218      	movs	r2, #24
 80004b4:	2111      	movs	r1, #17
 80004b6:	e01d      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004b8:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004bc:	b108      	cbz	r0, 80004c2 <ai_platform_api_get_network_report+0x84>
 80004be:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 80004c2:	f104 0134 	add.w	r1, r4, #52	; 0x34
 80004c6:	f7ff fe93 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ca:	8620      	strh	r0, [r4, #48]	; 0x30
 80004cc:	b910      	cbnz	r0, 80004d4 <ai_platform_api_get_network_report+0x96>
 80004ce:	2218      	movs	r2, #24
 80004d0:	2112      	movs	r1, #18
 80004d2:	e00f      	b.n	80004f4 <ai_platform_api_get_network_report+0xb6>
 80004d4:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004d8:	2802      	cmp	r0, #2
 80004da:	bfa6      	itte	ge
 80004dc:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004e0:	300c      	addge	r0, #12
 80004e2:	2000      	movlt	r0, #0
 80004e4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004e8:	f7ff fe82 	bl	80001f0 <_ai_platform_get_io_buffers_info>
 80004ec:	8660      	strh	r0, [r4, #50]	; 0x32
 80004ee:	b948      	cbnz	r0, 8000504 <ai_platform_api_get_network_report+0xc6>
 80004f0:	2218      	movs	r2, #24
 80004f2:	2113      	movs	r1, #19
 80004f4:	f109 0010 	add.w	r0, r9, #16
 80004f8:	f000 fb1f 	bl	8000b3a <core_set_error>
 80004fc:	2000      	movs	r0, #0
 80004fe:	b001      	add	sp, #4
 8000500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000504:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000508:	6720      	str	r0, [r4, #112]	; 0x70
 800050a:	f109 0230 	add.w	r2, r9, #48	; 0x30
 800050e:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 8000512:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000516:	f109 0918 	add.w	r9, r9, #24
 800051a:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 800051e:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 8000522:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8000526:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 800052a:	6828      	ldr	r0, [r5, #0]
 800052c:	0840      	lsrs	r0, r0, #1
 800052e:	0040      	lsls	r0, r0, #1
 8000530:	6028      	str	r0, [r5, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	60b3      	str	r3, [r6, #8]
 8000536:	68b0      	ldr	r0, [r6, #8]
 8000538:	2800      	cmp	r0, #0
 800053a:	d1fc      	bne.n	8000536 <ai_platform_api_get_network_report+0xf8>
 800053c:	6037      	str	r7, [r6, #0]
 800053e:	6831      	ldr	r1, [r6, #0]
 8000540:	4541      	cmp	r1, r8
 8000542:	d000      	beq.n	8000546 <ai_platform_api_get_network_report+0x108>
 8000544:	e7fe      	b.n	8000544 <ai_platform_api_get_network_report+0x106>
 8000546:	a01c      	add	r0, pc, #112	; (adr r0, 80005b8 <.text_13>)
 8000548:	6120      	str	r0, [r4, #16]
 800054a:	6829      	ldr	r1, [r5, #0]
 800054c:	0849      	lsrs	r1, r1, #1
 800054e:	0049      	lsls	r1, r1, #1
 8000550:	6029      	str	r1, [r5, #0]
 8000552:	60b3      	str	r3, [r6, #8]
 8000554:	68b0      	ldr	r0, [r6, #8]
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fc      	bne.n	8000554 <ai_platform_api_get_network_report+0x116>
 800055a:	6037      	str	r7, [r6, #0]
 800055c:	6831      	ldr	r1, [r6, #0]
 800055e:	4541      	cmp	r1, r8
 8000560:	d000      	beq.n	8000564 <ai_platform_api_get_network_report+0x126>
 8000562:	e7fe      	b.n	8000562 <ai_platform_api_get_network_report+0x124>
 8000564:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000568:	6802      	ldr	r2, [r0, #0]
 800056a:	6162      	str	r2, [r4, #20]
 800056c:	6829      	ldr	r1, [r5, #0]
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	0049      	lsls	r1, r1, #1
 8000572:	6029      	str	r1, [r5, #0]
 8000574:	60b3      	str	r3, [r6, #8]
 8000576:	68b0      	ldr	r0, [r6, #8]
 8000578:	2800      	cmp	r0, #0
 800057a:	d1fc      	bne.n	8000576 <ai_platform_api_get_network_report+0x138>
 800057c:	6037      	str	r7, [r6, #0]
 800057e:	6831      	ldr	r1, [r6, #0]
 8000580:	4541      	cmp	r1, r8
 8000582:	d000      	beq.n	8000586 <ai_platform_api_get_network_report+0x148>
 8000584:	e7fe      	b.n	8000584 <ai_platform_api_get_network_report+0x146>
 8000586:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 800058a:	6802      	ldr	r2, [r0, #0]
 800058c:	6262      	str	r2, [r4, #36]	; 0x24
 800058e:	6829      	ldr	r1, [r5, #0]
 8000590:	0849      	lsrs	r1, r1, #1
 8000592:	0049      	lsls	r1, r1, #1
 8000594:	6029      	str	r1, [r5, #0]
 8000596:	60b3      	str	r3, [r6, #8]
 8000598:	68b0      	ldr	r0, [r6, #8]
 800059a:	2800      	cmp	r0, #0
 800059c:	d1fc      	bne.n	8000598 <ai_platform_api_get_network_report+0x15a>
 800059e:	6037      	str	r7, [r6, #0]
 80005a0:	6831      	ldr	r1, [r6, #0]
 80005a2:	4541      	cmp	r1, r8
 80005a4:	d000      	beq.n	80005a8 <ai_platform_api_get_network_report+0x16a>
 80005a6:	e7fe      	b.n	80005a6 <ai_platform_api_get_network_report+0x168>
 80005a8:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 80005ac:	6802      	ldr	r2, [r0, #0]
 80005ae:	62a2      	str	r2, [r4, #40]	; 0x28
 80005b0:	2001      	movs	r0, #1
 80005b2:	b001      	add	sp, #4
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080005b8 <.text_13>:
 80005b8:	00000000 	.word	0x00000000

080005bc <ai_platform_network_create>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	9d04      	ldr	r5, [sp, #16]
 80005c0:	4604      	mov	r4, r0
 80005c2:	9805      	ldr	r0, [sp, #20]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	042d      	lsls	r5, r5, #16
 80005c8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005cc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005d0:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005d4:	6806      	ldr	r6, [r0, #0]
 80005d6:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000aec <.text_18>
 80005da:	6801      	ldr	r1, [r0, #0]
 80005dc:	0849      	lsrs	r1, r1, #1
 80005de:	0049      	lsls	r1, r1, #1
 80005e0:	6001      	str	r1, [r0, #0]
 80005e2:	2001      	movs	r0, #1
 80005e4:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000af0 <.text_19>
 80005e8:	6088      	str	r0, [r1, #8]
 80005ea:	6888      	ldr	r0, [r1, #8]
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d1fc      	bne.n	80005ea <ai_platform_network_create+0x2e>
 80005f0:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000af4 <.text_20>
 80005f4:	600b      	str	r3, [r1, #0]
 80005f6:	6808      	ldr	r0, [r1, #0]
 80005f8:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000af8 <.text_21>
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d000      	beq.n	8000602 <ai_platform_network_create+0x46>
 8000600:	e7fe      	b.n	8000600 <ai_platform_network_create+0x44>
 8000602:	b91c      	cbnz	r4, 800060c <ai_platform_network_create+0x50>
 8000604:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 8000608:	6800      	ldr	r0, [r0, #0]
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000afc <.text_22>
 8000610:	6011      	str	r1, [r2, #0]
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	f000 fa8a 	bl	8000b2c <core_init>
 8000618:	b910      	cbnz	r0, 8000620 <ai_platform_network_create+0x64>
 800061a:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 800061e:	e00d      	b.n	800063c <ai_platform_network_create+0x80>
 8000620:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000b00 <.text_23>
 8000624:	428d      	cmp	r5, r1
 8000626:	bf28      	it	cs
 8000628:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 800062c:	d206      	bcs.n	800063c <ai_platform_network_create+0x80>
 800062e:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 8000632:	f000 fa97 	bl	8000b64 <ai_check_custom_types>
 8000636:	b920      	cbnz	r0, 8000642 <ai_platform_network_create+0x86>
 8000638:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 800063c:	6806      	ldr	r6, [r0, #0]
 800063e:	2100      	movs	r1, #0
 8000640:	6021      	str	r1, [r4, #0]
 8000642:	4630      	mov	r0, r6
 8000644:	bd70      	pop	{r4, r5, r6, pc}

08000646 <ai_platform_network_destroy>:
 8000646:	b130      	cbz	r0, 8000656 <ai_platform_network_destroy+0x10>
 8000648:	6801      	ldr	r1, [r0, #0]
 800064a:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000afc <.text_22>
 800064e:	4291      	cmp	r1, r2
 8000650:	bf08      	it	eq
 8000652:	4602      	moveq	r2, r0
 8000654:	d000      	beq.n	8000658 <ai_platform_network_destroy+0x12>
 8000656:	2200      	movs	r2, #0
 8000658:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000aec <.text_18>
 800065c:	680b      	ldr	r3, [r1, #0]
 800065e:	085b      	lsrs	r3, r3, #1
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	600b      	str	r3, [r1, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000af0 <.text_19>
 800066a:	6099      	str	r1, [r3, #8]
 800066c:	6899      	ldr	r1, [r3, #8]
 800066e:	2900      	cmp	r1, #0
 8000670:	d1fc      	bne.n	800066c <ai_platform_network_destroy+0x26>
 8000672:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000af4 <.text_20>
 8000676:	f8c3 c000 	str.w	ip, [r3]
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000af8 <.text_21>
 8000680:	4299      	cmp	r1, r3
 8000682:	d000      	beq.n	8000686 <ai_platform_network_destroy+0x40>
 8000684:	e7fe      	b.n	8000684 <ai_platform_network_destroy+0x3e>
 8000686:	b102      	cbz	r2, 800068a <ai_platform_network_destroy+0x44>
 8000688:	2000      	movs	r0, #0
 800068a:	4770      	bx	lr

0800068c <ai_platform_network_init>:
 800068c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000690:	b081      	sub	sp, #4
 8000692:	460a      	mov	r2, r1
 8000694:	b120      	cbz	r0, 80006a0 <ai_platform_network_init+0x14>
 8000696:	6801      	ldr	r1, [r0, #0]
 8000698:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000afc <.text_22>
 800069c:	4299      	cmp	r1, r3
 800069e:	d000      	beq.n	80006a2 <ai_platform_network_init+0x16>
 80006a0:	2000      	movs	r0, #0
 80006a2:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000aec <.text_18>
 80006a6:	680b      	ldr	r3, [r1, #0]
 80006a8:	085b      	lsrs	r3, r3, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	600b      	str	r3, [r1, #0]
 80006ae:	2101      	movs	r1, #1
 80006b0:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000af0 <.text_19>
 80006b4:	6099      	str	r1, [r3, #8]
 80006b6:	6899      	ldr	r1, [r3, #8]
 80006b8:	2900      	cmp	r1, #0
 80006ba:	d1fc      	bne.n	80006b6 <ai_platform_network_init+0x2a>
 80006bc:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000af4 <.text_20>
 80006c0:	601c      	str	r4, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000af8 <.text_21>
 80006c8:	4299      	cmp	r1, r3
 80006ca:	d000      	beq.n	80006ce <ai_platform_network_init+0x42>
 80006cc:	e7fe      	b.n	80006cc <ai_platform_network_init+0x40>
 80006ce:	2800      	cmp	r0, #0
 80006d0:	d035      	beq.n	800073e <ai_platform_network_init+0xb2>
 80006d2:	b90a      	cbnz	r2, 80006d8 <ai_platform_network_init+0x4c>
 80006d4:	2211      	movs	r2, #17
 80006d6:	e012      	b.n	80006fe <ai_platform_network_init+0x72>
 80006d8:	6913      	ldr	r3, [r2, #16]
 80006da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006dc:	b939      	cbnz	r1, 80006ee <ai_platform_network_init+0x62>
 80006de:	8c11      	ldrh	r1, [r2, #32]
 80006e0:	8bd5      	ldrh	r5, [r2, #30]
 80006e2:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006e4:	4369      	muls	r1, r5
 80006e6:	4361      	muls	r1, r4
 80006e8:	bf18      	it	ne
 80006ea:	2213      	movne	r2, #19
 80006ec:	d107      	bne.n	80006fe <ai_platform_network_init+0x72>
 80006ee:	b973      	cbnz	r3, 800070e <ai_platform_network_init+0x82>
 80006f0:	8911      	ldrh	r1, [r2, #8]
 80006f2:	88d4      	ldrh	r4, [r2, #6]
 80006f4:	68d3      	ldr	r3, [r2, #12]
 80006f6:	4361      	muls	r1, r4
 80006f8:	4359      	muls	r1, r3
 80006fa:	d008      	beq.n	800070e <ai_platform_network_init+0x82>
 80006fc:	2212      	movs	r2, #18
 80006fe:	2110      	movs	r1, #16
 8000700:	3010      	adds	r0, #16
 8000702:	f000 fa1a 	bl	8000b3a <core_set_error>
 8000706:	2000      	movs	r0, #0
 8000708:	b001      	add	sp, #4
 800070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800070e:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000712:	f100 0118 	add.w	r1, r0, #24
 8000716:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 800071a:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 800071e:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000722:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000726:	2103      	movs	r1, #3
 8000728:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800072a:	60c1      	str	r1, [r0, #12]
 800072c:	b13a      	cbz	r2, 800073e <ai_platform_network_init+0xb2>
 800072e:	e000      	b.n	8000732 <ai_platform_network_init+0xa6>
 8000730:	460a      	mov	r2, r1
 8000732:	68d1      	ldr	r1, [r2, #12]
 8000734:	6090      	str	r0, [r2, #8]
 8000736:	428a      	cmp	r2, r1
 8000738:	bf18      	it	ne
 800073a:	2900      	cmpne	r1, #0
 800073c:	d1f8      	bne.n	8000730 <ai_platform_network_init+0xa4>
 800073e:	b001      	add	sp, #4
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000744 <ai_platform_network_process>:
 8000744:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	460a      	mov	r2, r1
 800074c:	b120      	cbz	r0, 8000758 <ai_platform_network_process+0x14>
 800074e:	6801      	ldr	r1, [r0, #0]
 8000750:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000afc <.text_22>
 8000754:	4299      	cmp	r1, r3
 8000756:	d000      	beq.n	800075a <ai_platform_network_process+0x16>
 8000758:	2000      	movs	r0, #0
 800075a:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000aec <.text_18>
 800075e:	680b      	ldr	r3, [r1, #0]
 8000760:	085b      	lsrs	r3, r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	600b      	str	r3, [r1, #0]
 8000766:	2101      	movs	r1, #1
 8000768:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000af0 <.text_19>
 800076c:	6099      	str	r1, [r3, #8]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	2900      	cmp	r1, #0
 8000772:	d1fc      	bne.n	800076e <ai_platform_network_process+0x2a>
 8000774:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000af4 <.text_20>
 8000778:	601c      	str	r4, [r3, #0]
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000af8 <.text_21>
 8000780:	4299      	cmp	r1, r3
 8000782:	d000      	beq.n	8000786 <ai_platform_network_process+0x42>
 8000784:	e7fe      	b.n	8000784 <ai_platform_network_process+0x40>
 8000786:	2800      	cmp	r0, #0
 8000788:	f000 8113 	beq.w	80009b2 <ai_platform_network_process+0x26e>
 800078c:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000790:	b101      	cbz	r1, 8000794 <ai_platform_network_process+0x50>
 8000792:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000794:	2300      	movs	r3, #0
 8000796:	82c3      	strh	r3, [r0, #22]
 8000798:	2400      	movs	r4, #0
 800079a:	7b03      	ldrb	r3, [r0, #12]
 800079c:	8284      	strh	r4, [r0, #20]
 800079e:	f003 0303 	and.w	r3, r3, #3
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d002      	beq.n	80007ac <ai_platform_network_process+0x68>
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2111      	movs	r1, #17
 80007aa:	e0ff      	b.n	80009ac <ai_platform_network_process+0x268>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	bf1e      	ittt	ne
 80007b0:	2900      	cmpne	r1, #0
 80007b2:	880b      	ldrhne	r3, [r1, #0]
 80007b4:	2b00      	cmpne	r3, #0
 80007b6:	f000 80f7 	beq.w	80009a8 <ai_platform_network_process+0x264>
 80007ba:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 80007be:	9100      	str	r1, [sp, #0]
 80007c0:	46a0      	mov	r8, r4
 80007c2:	46a1      	mov	r9, r4
 80007c4:	2600      	movs	r6, #0
 80007c6:	1d17      	adds	r7, r2, #4
 80007c8:	4682      	mov	sl, r0
 80007ca:	e014      	b.n	80007f6 <ai_platform_network_process+0xb2>
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	2800      	cmp	r0, #0
 80007d0:	f000 80e9 	beq.w	80009a6 <ai_platform_network_process+0x262>
 80007d4:	8838      	ldrh	r0, [r7, #0]
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d052      	beq.n	8000880 <ai_platform_network_process+0x13c>
 80007da:	4558      	cmp	r0, fp
 80007dc:	bf28      	it	cs
 80007de:	4683      	movcs	fp, r0
 80007e0:	4622      	mov	r2, r4
 80007e2:	1f39      	subs	r1, r7, #4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff fd59 	bl	800029c <_platform_network_state_setup>
 80007ea:	f108 0801 	add.w	r8, r8, #1
 80007ee:	3718      	adds	r7, #24
 80007f0:	3610      	adds	r6, #16
 80007f2:	f109 0904 	add.w	r9, r9, #4
 80007f6:	9800      	ldr	r0, [sp, #0]
 80007f8:	8801      	ldrh	r1, [r0, #0]
 80007fa:	4588      	cmp	r8, r1
 80007fc:	d24a      	bcs.n	8000894 <ai_platform_network_process+0x150>
 80007fe:	6840      	ldr	r0, [r0, #4]
 8000800:	2800      	cmp	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000808:	2c00      	cmpne	r4, #0
 800080a:	d043      	beq.n	8000894 <ai_platform_network_process+0x150>
 800080c:	9800      	ldr	r0, [sp, #0]
 800080e:	6881      	ldr	r1, [r0, #8]
 8000810:	680a      	ldr	r2, [r1, #0]
 8000812:	1995      	adds	r5, r2, r6
 8000814:	f000 80c7 	beq.w	80009a6 <ai_platform_network_process+0x262>
 8000818:	69a0      	ldr	r0, [r4, #24]
 800081a:	6841      	ldr	r1, [r0, #4]
 800081c:	887b      	ldrh	r3, [r7, #2]
 800081e:	88ba      	ldrh	r2, [r7, #4]
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	fb03 fc02 	mul.w	ip, r3, r2
 8000826:	fb00 fc0c 	mul.w	ip, r0, ip
 800082a:	4561      	cmp	r1, ip
 800082c:	d32d      	bcc.n	800088a <ai_platform_network_process+0x146>
 800082e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000832:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000836:	459e      	cmp	lr, r3
 8000838:	bf01      	itttt	eq
 800083a:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800083e:	4293      	cmpeq	r3, r2
 8000840:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000844:	4282      	cmpeq	r2, r0
 8000846:	d120      	bne.n	800088a <ai_platform_network_process+0x146>
 8000848:	69a0      	ldr	r0, [r4, #24]
 800084a:	6800      	ldr	r0, [r0, #0]
 800084c:	f004 fc16 	bl	800507c <ai_array_get_byte_size>
 8000850:	68e1      	ldr	r1, [r4, #12]
 8000852:	68ca      	ldr	r2, [r1, #12]
 8000854:	6961      	ldr	r1, [r4, #20]
 8000856:	68cb      	ldr	r3, [r1, #12]
 8000858:	435a      	muls	r2, r3
 800085a:	4290      	cmp	r0, r2
 800085c:	d315      	bcc.n	800088a <ai_platform_network_process+0x146>
 800085e:	69a0      	ldr	r0, [r4, #24]
 8000860:	6800      	ldr	r0, [r0, #0]
 8000862:	f004 fb33 	bl	8004ecc <ai_array_to_buffer_fmt>
 8000866:	f857 1c04 	ldr.w	r1, [r7, #-4]
 800086a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800086e:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000872:	4288      	cmp	r0, r1
 8000874:	d0aa      	beq.n	80007cc <ai_platform_network_process+0x88>
 8000876:	2219      	movs	r2, #25
 8000878:	2112      	movs	r1, #18
 800087a:	f10a 0010 	add.w	r0, sl, #16
 800087e:	e096      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000880:	2221      	movs	r2, #33	; 0x21
 8000882:	2112      	movs	r1, #18
 8000884:	f10a 0010 	add.w	r0, sl, #16
 8000888:	e091      	b.n	80009ae <ai_platform_network_process+0x26a>
 800088a:	2218      	movs	r2, #24
 800088c:	2112      	movs	r1, #18
 800088e:	f10a 0010 	add.w	r0, sl, #16
 8000892:	e08c      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000894:	9902      	ldr	r1, [sp, #8]
 8000896:	2900      	cmp	r1, #0
 8000898:	4655      	mov	r5, sl
 800089a:	d075      	beq.n	8000988 <ai_platform_network_process+0x244>
 800089c:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 80008a0:	2802      	cmp	r0, #2
 80008a2:	db7b      	blt.n	800099c <ai_platform_network_process+0x258>
 80008a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80008a6:	300c      	adds	r0, #12
 80008a8:	bf1c      	itt	ne
 80008aa:	8802      	ldrhne	r2, [r0, #0]
 80008ac:	2a00      	cmpne	r2, #0
 80008ae:	d075      	beq.n	800099c <ai_platform_network_process+0x258>
 80008b0:	f04f 0800 	mov.w	r8, #0
 80008b4:	46c1      	mov	r9, r8
 80008b6:	2600      	movs	r6, #0
 80008b8:	1d0f      	adds	r7, r1, #4
 80008ba:	9000      	str	r0, [sp, #0]
 80008bc:	e013      	b.n	80008e6 <ai_platform_network_process+0x1a2>
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d059      	beq.n	8000978 <ai_platform_network_process+0x234>
 80008c4:	8838      	ldrh	r0, [r7, #0]
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d051      	beq.n	800096e <ai_platform_network_process+0x22a>
 80008ca:	4558      	cmp	r0, fp
 80008cc:	bf28      	it	cs
 80008ce:	4683      	movcs	fp, r0
 80008d0:	4622      	mov	r2, r4
 80008d2:	1f39      	subs	r1, r7, #4
 80008d4:	4628      	mov	r0, r5
 80008d6:	f7ff fce1 	bl	800029c <_platform_network_state_setup>
 80008da:	f108 0801 	add.w	r8, r8, #1
 80008de:	3718      	adds	r7, #24
 80008e0:	3610      	adds	r6, #16
 80008e2:	f109 0904 	add.w	r9, r9, #4
 80008e6:	9800      	ldr	r0, [sp, #0]
 80008e8:	8801      	ldrh	r1, [r0, #0]
 80008ea:	4588      	cmp	r8, r1
 80008ec:	d249      	bcs.n	8000982 <ai_platform_network_process+0x23e>
 80008ee:	6840      	ldr	r0, [r0, #4]
 80008f0:	2800      	cmp	r0, #0
 80008f2:	bf1c      	itt	ne
 80008f4:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008f8:	2c00      	cmpne	r4, #0
 80008fa:	d042      	beq.n	8000982 <ai_platform_network_process+0x23e>
 80008fc:	9800      	ldr	r0, [sp, #0]
 80008fe:	6881      	ldr	r1, [r0, #8]
 8000900:	680a      	ldr	r2, [r1, #0]
 8000902:	1995      	adds	r5, r2, r6
 8000904:	d038      	beq.n	8000978 <ai_platform_network_process+0x234>
 8000906:	69a0      	ldr	r0, [r4, #24]
 8000908:	6841      	ldr	r1, [r0, #4]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	88ba      	ldrh	r2, [r7, #4]
 800090e:	68b8      	ldr	r0, [r7, #8]
 8000910:	fb03 fc02 	mul.w	ip, r3, r2
 8000914:	fb00 fc0c 	mul.w	ip, r0, ip
 8000918:	4561      	cmp	r1, ip
 800091a:	d33e      	bcc.n	800099a <ai_platform_network_process+0x256>
 800091c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000920:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000924:	459e      	cmp	lr, r3
 8000926:	bf01      	itttt	eq
 8000928:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 800092c:	4293      	cmpeq	r3, r2
 800092e:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000932:	4282      	cmpeq	r2, r0
 8000934:	d131      	bne.n	800099a <ai_platform_network_process+0x256>
 8000936:	69a0      	ldr	r0, [r4, #24]
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f004 fb9f 	bl	800507c <ai_array_get_byte_size>
 800093e:	68e1      	ldr	r1, [r4, #12]
 8000940:	68ca      	ldr	r2, [r1, #12]
 8000942:	6961      	ldr	r1, [r4, #20]
 8000944:	68cb      	ldr	r3, [r1, #12]
 8000946:	435a      	muls	r2, r3
 8000948:	4290      	cmp	r0, r2
 800094a:	d326      	bcc.n	800099a <ai_platform_network_process+0x256>
 800094c:	69a0      	ldr	r0, [r4, #24]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	f004 fabc 	bl	8004ecc <ai_array_to_buffer_fmt>
 8000954:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000958:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800095c:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000960:	4288      	cmp	r0, r1
 8000962:	d0ac      	beq.n	80008be <ai_platform_network_process+0x17a>
 8000964:	2219      	movs	r2, #25
 8000966:	2113      	movs	r1, #19
 8000968:	f10a 0010 	add.w	r0, sl, #16
 800096c:	e01f      	b.n	80009ae <ai_platform_network_process+0x26a>
 800096e:	2221      	movs	r2, #33	; 0x21
 8000970:	2113      	movs	r1, #19
 8000972:	f10a 0010 	add.w	r0, sl, #16
 8000976:	e01a      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000978:	2217      	movs	r2, #23
 800097a:	2113      	movs	r1, #19
 800097c:	f10a 0010 	add.w	r0, sl, #16
 8000980:	e015      	b.n	80009ae <ai_platform_network_process+0x26a>
 8000982:	4655      	mov	r5, sl
 8000984:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000988:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 800098c:	2800      	cmp	r0, #0
 800098e:	bf14      	ite	ne
 8000990:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000994:	f04f 0a00 	moveq.w	sl, #0
 8000998:	e00f      	b.n	80009ba <ai_platform_network_process+0x276>
 800099a:	4655      	mov	r5, sl
 800099c:	2218      	movs	r2, #24
 800099e:	2113      	movs	r1, #19
 80009a0:	f105 0010 	add.w	r0, r5, #16
 80009a4:	e003      	b.n	80009ae <ai_platform_network_process+0x26a>
 80009a6:	4650      	mov	r0, sl
 80009a8:	2217      	movs	r2, #23
 80009aa:	2112      	movs	r1, #18
 80009ac:	3010      	adds	r0, #16
 80009ae:	f000 f8c4 	bl	8000b3a <core_set_error>
 80009b2:	2000      	movs	r0, #0
 80009b4:	b003      	add	sp, #12
 80009b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ba:	2802      	cmp	r0, #2
 80009bc:	bfa6      	itte	ge
 80009be:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 80009c0:	f100 0b0c 	addge.w	fp, r0, #12
 80009c4:	f04f 0b00 	movlt.w	fp, #0
 80009c8:	8ae8      	ldrh	r0, [r5, #22]
 80009ca:	8aa9      	ldrh	r1, [r5, #20]
 80009cc:	ebb0 0f01 	cmp.w	r0, r1
 80009d0:	f080 8087 	bcs.w	8000ae2 <ai_platform_network_process+0x39e>
 80009d4:	f04f 0800 	mov.w	r8, #0
 80009d8:	4654      	mov	r4, sl
 80009da:	46c1      	mov	r9, r8
 80009dc:	46c2      	mov	sl, r8
 80009de:	e018      	b.n	8000a12 <ai_platform_network_process+0x2ce>
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	68c3      	ldr	r3, [r0, #12]
 80009e4:	6871      	ldr	r1, [r6, #4]
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4411      	add	r1, r2
 80009ea:	6081      	str	r1, [r0, #8]
 80009ec:	6872      	ldr	r2, [r6, #4]
 80009ee:	60c2      	str	r2, [r0, #12]
 80009f0:	6870      	ldr	r0, [r6, #4]
 80009f2:	68b1      	ldr	r1, [r6, #8]
 80009f4:	4408      	add	r0, r1
 80009f6:	6070      	str	r0, [r6, #4]
 80009f8:	6831      	ldr	r1, [r6, #0]
 80009fa:	4288      	cmp	r0, r1
 80009fc:	d302      	bcc.n	8000a04 <ai_platform_network_process+0x2c0>
 80009fe:	68f0      	ldr	r0, [r6, #12]
 8000a00:	4240      	negs	r0, r0
 8000a02:	4408      	add	r0, r1
 8000a04:	6070      	str	r0, [r6, #4]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	f109 0910 	add.w	r9, r9, #16
 8000a0e:	f108 0804 	add.w	r8, r8, #4
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	bf14      	ite	ne
 8000a16:	8820      	ldrhne	r0, [r4, #0]
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	4582      	cmp	sl, r0
 8000a1c:	d212      	bcs.n	8000a44 <ai_platform_network_process+0x300>
 8000a1e:	6860      	ldr	r0, [r4, #4]
 8000a20:	b180      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a22:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a26:	b168      	cbz	r0, 8000a44 <ai_platform_network_process+0x300>
 8000a28:	68a1      	ldr	r1, [r4, #8]
 8000a2a:	6980      	ldr	r0, [r0, #24]
 8000a2c:	680a      	ldr	r2, [r1, #0]
 8000a2e:	6801      	ldr	r1, [r0, #0]
 8000a30:	eb02 0609 	add.w	r6, r2, r9
 8000a34:	008a      	lsls	r2, r1, #2
 8000a36:	d5d3      	bpl.n	80009e0 <ai_platform_network_process+0x29c>
 8000a38:	68b2      	ldr	r2, [r6, #8]
 8000a3a:	6871      	ldr	r1, [r6, #4]
 8000a3c:	6880      	ldr	r0, [r0, #8]
 8000a3e:	f00e fc24 	bl	800f28a <__aeabi_memcpy>
 8000a42:	e7d5      	b.n	80009f0 <ai_platform_network_process+0x2ac>
 8000a44:	46a2      	mov	sl, r4
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f936 	bl	8000cb8 <ai_layers_forward_all>
 8000a4c:	f04f 0800 	mov.w	r8, #0
 8000a50:	465c      	mov	r4, fp
 8000a52:	46c1      	mov	r9, r8
 8000a54:	46c3      	mov	fp, r8
 8000a56:	e017      	b.n	8000a88 <ai_platform_network_process+0x344>
 8000a58:	6871      	ldr	r1, [r6, #4]
 8000a5a:	68b2      	ldr	r2, [r6, #8]
 8000a5c:	4411      	add	r1, r2
 8000a5e:	6071      	str	r1, [r6, #4]
 8000a60:	6832      	ldr	r2, [r6, #0]
 8000a62:	4291      	cmp	r1, r2
 8000a64:	d302      	bcc.n	8000a6c <ai_platform_network_process+0x328>
 8000a66:	68f1      	ldr	r1, [r6, #12]
 8000a68:	4249      	negs	r1, r1
 8000a6a:	4411      	add	r1, r2
 8000a6c:	6071      	str	r1, [r6, #4]
 8000a6e:	6882      	ldr	r2, [r0, #8]
 8000a70:	68c3      	ldr	r3, [r0, #12]
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4411      	add	r1, r2
 8000a76:	6081      	str	r1, [r0, #8]
 8000a78:	6872      	ldr	r2, [r6, #4]
 8000a7a:	60c2      	str	r2, [r0, #12]
 8000a7c:	f10b 0b01 	add.w	fp, fp, #1
 8000a80:	f109 0910 	add.w	r9, r9, #16
 8000a84:	f108 0804 	add.w	r8, r8, #4
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	8820      	ldrhne	r0, [r4, #0]
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4583      	cmp	fp, r0
 8000a92:	d21d      	bcs.n	8000ad0 <ai_platform_network_process+0x38c>
 8000a94:	6860      	ldr	r0, [r4, #4]
 8000a96:	b1d8      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a98:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a9c:	b1c0      	cbz	r0, 8000ad0 <ai_platform_network_process+0x38c>
 8000a9e:	68a1      	ldr	r1, [r4, #8]
 8000aa0:	6980      	ldr	r0, [r0, #24]
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	6801      	ldr	r1, [r0, #0]
 8000aa6:	eb02 0609 	add.w	r6, r2, r9
 8000aaa:	008a      	lsls	r2, r1, #2
 8000aac:	d5d4      	bpl.n	8000a58 <ai_platform_network_process+0x314>
 8000aae:	6881      	ldr	r1, [r0, #8]
 8000ab0:	68b2      	ldr	r2, [r6, #8]
 8000ab2:	6870      	ldr	r0, [r6, #4]
 8000ab4:	f00e fbe9 	bl	800f28a <__aeabi_memcpy>
 8000ab8:	6870      	ldr	r0, [r6, #4]
 8000aba:	68b1      	ldr	r1, [r6, #8]
 8000abc:	4408      	add	r0, r1
 8000abe:	6070      	str	r0, [r6, #4]
 8000ac0:	6831      	ldr	r1, [r6, #0]
 8000ac2:	4288      	cmp	r0, r1
 8000ac4:	d302      	bcc.n	8000acc <ai_platform_network_process+0x388>
 8000ac6:	68f0      	ldr	r0, [r6, #12]
 8000ac8:	4240      	negs	r0, r0
 8000aca:	4408      	add	r0, r1
 8000acc:	6070      	str	r0, [r6, #4]
 8000ace:	e7d5      	b.n	8000a7c <ai_platform_network_process+0x338>
 8000ad0:	8ae8      	ldrh	r0, [r5, #22]
 8000ad2:	8aa9      	ldrh	r1, [r5, #20]
 8000ad4:	1c40      	adds	r0, r0, #1
 8000ad6:	82e8      	strh	r0, [r5, #22]
 8000ad8:	46a3      	mov	fp, r4
 8000ada:	b280      	uxth	r0, r0
 8000adc:	4288      	cmp	r0, r1
 8000ade:	f4ff af79 	bcc.w	80009d4 <ai_platform_network_process+0x290>
 8000ae2:	8ae8      	ldrh	r0, [r5, #22]
 8000ae4:	b003      	add	sp, #12
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000aec <.text_18>:
 8000aec:	e0002000 	.word	0xe0002000

08000af0 <.text_19>:
 8000af0:	40023000 	.word	0x40023000

08000af4 <.text_20>:
 8000af4:	f407a5c2 	.word	0xf407a5c2

08000af8 <.text_21>:
 8000af8:	b5e8b5cd 	.word	0xb5e8b5cd

08000afc <.text_22>:
 8000afc:	a1c00100 	.word	0xa1c00100

08000b00 <.text_23>:
 8000b00:	01030001 	.word	0x01030001

08000b04 <.text_24>:
 8000b04:	00000104 	.word	0x00000104

08000b08 <.text_25>:
 8000b08:	00000101 	.word	0x00000101

08000b0c <.text_26>:
 8000b0c:	00000301 	.word	0x00000301

08000b10 <.text_27>:
 8000b10:	00001030 	.word	0x00001030

08000b14 <.text_28>:
 8000b14:	00001001 	.word	0x00001001

08000b18 <_platform_network_sanity_check{5}::signatures>:
 8000b18:	84048403                                ....

08000b1c <.text_30>:
 8000b1c:	00001002 	.word	0x00001002

08000b20 <.text_31>:
 8000b20:	00001010 	.word	0x00001010

08000b24 <.text_32>:
 8000b24:	00000000 	.word	0x00000000

08000b28 <.text_33>:
 8000b28:	00001010 	.word	0x00001010

08000b2c <core_init>:
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	4770      	bx	lr

08000b30 <core_get_error>:
 8000b30:	4601      	mov	r1, r0
 8000b32:	2200      	movs	r2, #0
 8000b34:	6808      	ldr	r0, [r1, #0]
 8000b36:	600a      	str	r2, [r1, #0]
 8000b38:	4770      	bx	lr

08000b3a <core_set_error>:
 8000b3a:	7803      	ldrb	r3, [r0, #0]
 8000b3c:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b40:	d104      	bne.n	8000b4c <core_set_error+0x12>
 8000b42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b46:	6001      	str	r1, [r0, #0]
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr

08000b50 <ai_layers_forward_layer>:
 8000b50:	b510      	push	{r4, lr}
 8000b52:	4604      	mov	r4, r0
 8000b54:	6921      	ldr	r1, [r4, #16]
 8000b56:	4788      	blx	r1
 8000b58:	68e0      	ldr	r0, [r4, #12]
 8000b5a:	42a0      	cmp	r0, r4
 8000b5c:	bf08      	it	eq
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
	...

08000b64 <ai_check_custom_types>:
 8000b64:	b500      	push	{lr}
 8000b66:	b081      	sub	sp, #4
 8000b68:	b160      	cbz	r0, 8000b84 <ai_check_custom_types+0x20>
 8000b6a:	7801      	ldrb	r1, [r0, #0]
 8000b6c:	2903      	cmp	r1, #3
 8000b6e:	d109      	bne.n	8000b84 <ai_check_custom_types+0x20>
 8000b70:	f05f 0204 	movs.w	r2, #4
 8000b74:	a18d      	add	r1, pc, #564	; (adr r1, 8000dac <ai_check_custom_types::ref_signatures>)
 8000b76:	f00e fbb5 	bl	800f2e4 <memcmp>
 8000b7a:	1e40      	subs	r0, r0, #1
 8000b7c:	4180      	sbcs	r0, r0
 8000b7e:	0fc0      	lsrs	r0, r0, #31
 8000b80:	b001      	add	sp, #4
 8000b82:	bd00      	pop	{pc}
 8000b84:	2000      	movs	r0, #0
 8000b86:	b001      	add	sp, #4
 8000b88:	bd00      	pop	{pc}
	...

08000b8c <ai_layer_type_name>:
 8000b8c:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b90:	1a81      	subs	r1, r0, r2
 8000b92:	2901      	cmp	r1, #1
 8000b94:	bf81      	itttt	hi
 8000b96:	1ec9      	subhi	r1, r1, #3
 8000b98:	290d      	cmphi	r1, #13
 8000b9a:	390f      	subhi	r1, #15
 8000b9c:	2909      	cmphi	r1, #9
 8000b9e:	f200 806b 	bhi.w	8000c78 <ai_layer_type_name+0xec>
 8000ba2:	1a80      	subs	r0, r0, r2
 8000ba4:	d033      	beq.n	8000c0e <ai_layer_type_name+0x82>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d033      	beq.n	8000c12 <ai_layer_type_name+0x86>
 8000baa:	1e80      	subs	r0, r0, #2
 8000bac:	d033      	beq.n	8000c16 <ai_layer_type_name+0x8a>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0x90>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0x94>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0x98>
 8000bba:	1e40      	subs	r0, r0, #1
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0x9c>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xa0>
 8000bc2:	1e40      	subs	r0, r0, #1
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xa4>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xa8>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xac>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xb0>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xb4>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xb8>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xbc>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xc0>
 8000be2:	1e80      	subs	r0, r0, #2
 8000be4:	d034      	beq.n	8000c50 <ai_layer_type_name+0xc4>
 8000be6:	1e40      	subs	r0, r0, #1
 8000be8:	d034      	beq.n	8000c54 <ai_layer_type_name+0xc8>
 8000bea:	1e40      	subs	r0, r0, #1
 8000bec:	d034      	beq.n	8000c58 <ai_layer_type_name+0xcc>
 8000bee:	1e40      	subs	r0, r0, #1
 8000bf0:	d034      	beq.n	8000c5c <ai_layer_type_name+0xd0>
 8000bf2:	1e40      	subs	r0, r0, #1
 8000bf4:	d034      	beq.n	8000c60 <ai_layer_type_name+0xd4>
 8000bf6:	1e40      	subs	r0, r0, #1
 8000bf8:	d034      	beq.n	8000c64 <ai_layer_type_name+0xd8>
 8000bfa:	1e40      	subs	r0, r0, #1
 8000bfc:	d034      	beq.n	8000c68 <ai_layer_type_name+0xdc>
 8000bfe:	1e40      	subs	r0, r0, #1
 8000c00:	d034      	beq.n	8000c6c <ai_layer_type_name+0xe0>
 8000c02:	1e40      	subs	r0, r0, #1
 8000c04:	d034      	beq.n	8000c70 <ai_layer_type_name+0xe4>
 8000c06:	1e40      	subs	r0, r0, #1
 8000c08:	d034      	beq.n	8000c74 <ai_layer_type_name+0xe8>
 8000c0a:	a01c      	add	r0, pc, #112	; (adr r0, 8000c7c <.text_5>)
 8000c0c:	4770      	bx	lr
 8000c0e:	a01c      	add	r0, pc, #112	; (adr r0, 8000c80 <.text_6>)
 8000c10:	4770      	bx	lr
 8000c12:	a01c      	add	r0, pc, #112	; (adr r0, 8000c84 <.text_7>)
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	a031      	add	r0, pc, #196	; (adr r0, 8000ce0 <.text_15>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a032      	add	r0, pc, #200	; (adr r0, 8000ce8 <.text_16>)
 8000c1e:	4770      	bx	lr
 8000c20:	a019      	add	r0, pc, #100	; (adr r0, 8000c88 <.text_8>)
 8000c22:	4770      	bx	lr
 8000c24:	a019      	add	r0, pc, #100	; (adr r0, 8000c8c <.text_9>)
 8000c26:	4770      	bx	lr
 8000c28:	a031      	add	r0, pc, #196	; (adr r0, 8000cf0 <.text_17>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a018      	add	r0, pc, #96	; (adr r0, 8000c90 <.text_10>)
 8000c2e:	4770      	bx	lr
 8000c30:	a031      	add	r0, pc, #196	; (adr r0, 8000cf8 <.text_18>)
 8000c32:	4770      	bx	lr
 8000c34:	a032      	add	r0, pc, #200	; (adr r0, 8000d00 <.text_19>)
 8000c36:	4770      	bx	lr
 8000c38:	a036      	add	r0, pc, #216	; (adr r0, 8000d14 <.text_20>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a038      	add	r0, pc, #224	; (adr r0, 8000d20 <.text_21>)
 8000c3e:	4770      	bx	lr
 8000c40:	a014      	add	r0, pc, #80	; (adr r0, 8000c94 <.text_11>)
 8000c42:	4770      	bx	lr
 8000c44:	a038      	add	r0, pc, #224	; (adr r0, 8000d28 <.text_22>)
 8000c46:	4770      	bx	lr
 8000c48:	a039      	add	r0, pc, #228	; (adr r0, 8000d30 <.text_23>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a03b      	add	r0, pc, #236	; (adr r0, 8000d3c <.text_24>)
 8000c4e:	4770      	bx	lr
 8000c50:	a03f      	add	r0, pc, #252	; (adr r0, 8000d50 <.text_25>)
 8000c52:	4770      	bx	lr
 8000c54:	a040      	add	r0, pc, #256	; (adr r0, 8000d58 <.text_26>)
 8000c56:	4770      	bx	lr
 8000c58:	a041      	add	r0, pc, #260	; (adr r0, 8000d60 <.text_27>)
 8000c5a:	4770      	bx	lr
 8000c5c:	a043      	add	r0, pc, #268	; (adr r0, 8000d6c <.text_28>)
 8000c5e:	4770      	bx	lr
 8000c60:	a044      	add	r0, pc, #272	; (adr r0, 8000d74 <.text_29>)
 8000c62:	4770      	bx	lr
 8000c64:	a045      	add	r0, pc, #276	; (adr r0, 8000d7c <.text_30>)
 8000c66:	4770      	bx	lr
 8000c68:	a00b      	add	r0, pc, #44	; (adr r0, 8000c98 <.text_12>)
 8000c6a:	4770      	bx	lr
 8000c6c:	a049      	add	r0, pc, #292	; (adr r0, 8000d94 <.text_31>)
 8000c6e:	4770      	bx	lr
 8000c70:	a04a      	add	r0, pc, #296	; (adr r0, 8000d9c <.text_32>)
 8000c72:	4770      	bx	lr
 8000c74:	a04b      	add	r0, pc, #300	; (adr r0, 8000da4 <.text_33>)
 8000c76:	4770      	bx	lr
 8000c78:	a000      	add	r0, pc, #0	; (adr r0, 8000c7c <.text_5>)
 8000c7a:	4770      	bx	lr

08000c7c <.text_5>:
 8000c7c:	00000000 	.word	0x00000000

08000c80 <.text_6>:
 8000c80:	00444441 	.word	0x00444441

08000c84 <.text_7>:
 8000c84:	00004e42 	.word	0x00004e42

08000c88 <.text_8>:
 8000c88:	00555247 	.word	0x00555247

08000c8c <.text_9>:
 8000c8c:	004e524c 	.word	0x004e524c

08000c90 <.text_10>:
 8000c90:	00004c4e 	.word	0x00004c4e

08000c94 <.text_11>:
 8000c94:	00004d53 	.word	0x00004d53

08000c98 <.text_12>:
 8000c98:	00444150 	.word	0x00444150

08000c9c <ai_layer_type_is_valid>:
 8000c9c:	f242 7111 	movw	r1, #10001	; 0x2711
 8000ca0:	1a40      	subs	r0, r0, r1
 8000ca2:	2801      	cmp	r0, #1
 8000ca4:	bf81      	itttt	hi
 8000ca6:	1ec0      	subhi	r0, r0, #3
 8000ca8:	280d      	cmphi	r0, #13
 8000caa:	380f      	subhi	r0, #15
 8000cac:	2809      	cmphi	r0, #9
 8000cae:	d801      	bhi.n	8000cb4 <ai_layer_type_is_valid+0x18>
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <ai_layers_forward_all>:
 8000cb8:	b530      	push	{r4, r5, lr}
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b081      	sub	sp, #4
 8000cbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000cc0:	b158      	cbz	r0, 8000cda <ai_layers_forward_all+0x22>
 8000cc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000cc4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000cc6:	6929      	ldr	r1, [r5, #16]
 8000cc8:	4628      	mov	r0, r5
 8000cca:	4788      	blx	r1
 8000ccc:	68e8      	ldr	r0, [r5, #12]
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	bf08      	it	eq
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd8:	d1f4      	bne.n	8000cc4 <ai_layers_forward_all+0xc>
 8000cda:	b001      	add	sp, #4
 8000cdc:	bd30      	pop	{r4, r5, pc}
	...

08000ce0 <.text_15>:
 8000ce0:	564e4f43 	.word	0x564e4f43
 8000ce4:	00004432 	.word	0x00004432

08000ce8 <.text_16>:
 8000ce8:	534e4544 	.word	0x534e4544
 8000cec:	0045      	.short	0x0045
	...

08000cf0 <.text_17>:
 8000cf0:	4d54534c 	.word	0x4d54534c
 8000cf4:	00          	.byte	0x00
 8000cf5:	00          	.byte	0x00
	...

08000cf8 <.text_18>:
 8000cf8:	4d524f4e 	.word	0x4d524f4e
 8000cfc:	00          	.byte	0x00
 8000cfd:	00          	.byte	0x00
	...

08000d00 <.text_19>:
 8000d00:	4954504f 	.word	0x4954504f
 8000d04:	455a494d 	.word	0x455a494d
 8000d08:	4f435f44 	.word	0x4f435f44
 8000d0c:	4432564e 	.word	0x4432564e
 8000d10:	00          	.byte	0x00
 8000d11:	00          	.byte	0x00
	...

08000d14 <.text_20>:
 8000d14:	4e415254 	.word	0x4e415254
 8000d18:	534f5053 	.word	0x534f5053
 8000d1c:	0045      	.short	0x0045
	...

08000d20 <.text_21>:
 8000d20:	4c4f4f50 	.word	0x4c4f4f50
 8000d24:	00          	.byte	0x00
 8000d25:	00          	.byte	0x00
	...

08000d28 <.text_22>:
 8000d28:	494c5053 	.word	0x494c5053
 8000d2c:	0054      	.short	0x0054
	...

08000d30 <.text_23>:
 8000d30:	454d4954 	.word	0x454d4954
 8000d34:	4c45445f 	.word	0x4c45445f
 8000d38:	00005941 	.word	0x00005941

08000d3c <.text_24>:
 8000d3c:	454d4954 	.word	0x454d4954
 8000d40:	5349445f 	.word	0x5349445f
 8000d44:	42495254 	.word	0x42495254
 8000d48:	44455455 	.word	0x44455455
 8000d4c:	00          	.byte	0x00
 8000d4d:	00          	.byte	0x00
	...

08000d50 <.text_25>:
 8000d50:	434e4f43 	.word	0x434e4f43
 8000d54:	00005441 	.word	0x00005441

08000d58 <.text_26>:
 8000d58:	4d4d4547 	.word	0x4d4d4547
 8000d5c:	00          	.byte	0x00
 8000d5d:	00          	.byte	0x00
	...

08000d60 <.text_27>:
 8000d60:	41535055 	.word	0x41535055
 8000d64:	454c504d 	.word	0x454c504d
 8000d68:	00          	.byte	0x00
 8000d69:	00          	.byte	0x00
	...

08000d6c <.text_28>:
 8000d6c:	57544c45 	.word	0x57544c45
 8000d70:	00455349 	.word	0x00455349

08000d74 <.text_29>:
 8000d74:	454e4547 	.word	0x454e4547
 8000d78:	00434952 	.word	0x00434952

08000d7c <.text_30>:
 8000d7c:	54534e49 	.word	0x54534e49
 8000d80:	45434e41 	.word	0x45434e41
 8000d84:	4d524f4e 	.word	0x4d524f4e
 8000d88:	5a494c41 	.word	0x5a494c41
 8000d8c:	4f495441 	.word	0x4f495441
 8000d90:	004e      	.short	0x004e
	...

08000d94 <.text_31>:
 8000d94:	43494c53 	.word	0x43494c53
 8000d98:	0045      	.short	0x0045
	...

08000d9c <.text_32>:
 8000d9c:	454c4954 	.word	0x454c4954
 8000da0:	00          	.byte	0x00
 8000da1:	00          	.byte	0x00
	...

08000da4 <.text_33>:
 8000da4:	55444552 	.word	0x55444552
 8000da8:	00004543 	.word	0x00004543

08000dac <ai_check_custom_types::ref_signatures>:
 8000dac:	84048403                                ....

08000db0 <ai_conv2d_stripe_f32>:
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b098      	sub	sp, #96	; 0x60
 8000db6:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000db8:	2800      	cmp	r0, #0
 8000dba:	f000 82cb 	beq.w	8001354 <ai_conv2d_stripe_f32+0x5a4>
 8000dbe:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000dc2:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000dc6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000dc8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000dca:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000dcc:	9004      	str	r0, [sp, #16]
 8000dce:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000dd2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dd4:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000dd8:	f8cd a014 	str.w	sl, [sp, #20]
 8000ddc:	1904      	adds	r4, r0, r4
 8000dde:	1e64      	subs	r4, r4, #1
 8000de0:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000de2:	9100      	str	r1, [sp, #0]
 8000de4:	fb94 f6f6 	sdiv	r6, r4, r6
 8000de8:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dec:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dee:	4346      	muls	r6, r0
 8000df0:	9616      	str	r6, [sp, #88]	; 0x58
 8000df2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000df6:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000df8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dfa:	9306      	str	r3, [sp, #24]
 8000dfc:	4344      	muls	r4, r0
 8000dfe:	9415      	str	r4, [sp, #84]	; 0x54
 8000e00:	437e      	muls	r6, r7
 8000e02:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e06:	437c      	muls	r4, r7
 8000e08:	9414      	str	r4, [sp, #80]	; 0x50
 8000e0a:	4346      	muls	r6, r0
 8000e0c:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000e10:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000e12:	960b      	str	r6, [sp, #44]	; 0x2c
 8000e14:	1a24      	subs	r4, r4, r0
 8000e16:	9413      	str	r4, [sp, #76]	; 0x4c
 8000e18:	4604      	mov	r4, r0
 8000e1a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e1c:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000e1e:	4344      	muls	r4, r0
 8000e20:	9412      	str	r4, [sp, #72]	; 0x48
 8000e22:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e24:	4344      	muls	r4, r0
 8000e26:	9411      	str	r4, [sp, #68]	; 0x44
 8000e28:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e2c:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e30:	fb14 f000 	smulbb	r0, r4, r0
 8000e34:	900a      	str	r0, [sp, #40]	; 0x28
 8000e36:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e38:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e3a:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e3e:	9010      	str	r0, [sp, #64]	; 0x40
 8000e40:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e42:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e44:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e4a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e4c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e4e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e52:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e54:	900e      	str	r0, [sp, #56]	; 0x38
 8000e56:	4374      	muls	r4, r6
 8000e58:	940d      	str	r4, [sp, #52]	; 0x34
 8000e5a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e5c:	1b2d      	subs	r5, r5, r4
 8000e5e:	950c      	str	r5, [sp, #48]	; 0x30
 8000e60:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e62:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e64:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e66:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e68:	427f      	negs	r7, r7
 8000e6a:	bfd8      	it	le
 8000e6c:	2700      	movle	r7, #0
 8000e6e:	1a09      	subs	r1, r1, r0
 8000e70:	4291      	cmp	r1, r2
 8000e72:	bf3d      	ittte	cc
 8000e74:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e76:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e78:	1b86      	subcc	r6, r0, r6
 8000e7a:	4616      	movcs	r6, r2
 8000e7c:	9a05      	ldr	r2, [sp, #20]
 8000e7e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e80:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e82:	18ba      	adds	r2, r7, r2
 8000e84:	434a      	muls	r2, r1
 8000e86:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e8a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e8c:	b900      	cbnz	r0, 8000e90 <ai_conv2d_stripe_f32+0xe0>
 8000e8e:	9800      	ldr	r0, [sp, #0]
 8000e90:	9001      	str	r0, [sp, #4]
 8000e92:	1bf6      	subs	r6, r6, r7
 8000e94:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2801      	cmp	r0, #1
 8000e9a:	bf04      	itt	eq
 8000e9c:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e9e:	2801      	cmpeq	r0, #1
 8000ea0:	f040 80a9 	bne.w	8000ff6 <ai_conv2d_stripe_f32+0x246>
 8000ea4:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000ea6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000eaa:	1ba4      	subs	r4, r4, r6
 8000eac:	434c      	muls	r4, r1
 8000eae:	1b80      	subs	r0, r0, r6
 8000eb0:	4341      	muls	r1, r0
 8000eb2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000eb4:	1b40      	subs	r0, r0, r5
 8000eb6:	fb00 fc03 	mul.w	ip, r0, r3
 8000eba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000ebc:	9b06      	ldr	r3, [sp, #24]
 8000ebe:	4407      	add	r7, r0
 8000ec0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000ec2:	4347      	muls	r7, r0
 8000ec4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ec8:	4370      	muls	r0, r6
 8000eca:	9e01      	ldr	r6, [sp, #4]
 8000ecc:	9b00      	ldr	r3, [sp, #0]
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ed2:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000ed6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000ed8:	bf0c      	ite	eq
 8000eda:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 8000ede:	eef0 0a40 	vmovne.f32	s1, s0
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	f000 8222 	beq.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ee8:	46b0      	mov	r8, r6
 8000eea:	462e      	mov	r6, r5
 8000eec:	4613      	mov	r3, r2
 8000eee:	f8cd c008 	str.w	ip, [sp, #8]
 8000ef2:	461d      	mov	r5, r3
 8000ef4:	f8dd e000 	ldr.w	lr, [sp]
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	463a      	mov	r2, r7
 8000efc:	4682      	mov	sl, r0
 8000efe:	f8cd 9004 	str.w	r9, [sp, #4]
 8000f02:	46c4      	mov	ip, r8
 8000f04:	f02a 0703 	bic.w	r7, sl, #3
 8000f08:	ed9c 1a00 	vldr	s2, [ip]
 8000f0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000f16:	dd61      	ble.n	8000fdc <ai_conv2d_stripe_f32+0x22c>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	2f00      	cmp	r7, #0
 8000f1c:	f04f 0900 	mov.w	r9, #0
 8000f20:	f340 801f 	ble.w	8000f62 <ai_conv2d_stripe_f32+0x1b2>
 8000f24:	edd2 4a00 	vldr	s9, [r2]
 8000f28:	ed98 5a00 	vldr	s10, [r8]
 8000f2c:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f30:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f34:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f38:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f3c:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f40:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f44:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f48:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f4c:	3210      	adds	r2, #16
 8000f4e:	f109 0904 	add.w	r9, r9, #4
 8000f52:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f56:	45b9      	cmp	r9, r7
 8000f58:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f5c:	f108 0810 	add.w	r8, r8, #16
 8000f60:	dbe0      	blt.n	8000f24 <ai_conv2d_stripe_f32+0x174>
 8000f62:	45d1      	cmp	r9, sl
 8000f64:	f280 8034 	bge.w	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f68:	f109 0901 	add.w	r9, r9, #1
 8000f6c:	edd2 2a00 	vldr	s5, [r2]
 8000f70:	edd8 1a00 	vldr	s3, [r8]
 8000f74:	1d12      	adds	r2, r2, #4
 8000f76:	45d1      	cmp	r9, sl
 8000f78:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f7c:	f108 0804 	add.w	r8, r8, #4
 8000f80:	da26      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f82:	f109 0901 	add.w	r9, r9, #1
 8000f86:	ed92 3a00 	vldr	s6, [r2]
 8000f8a:	ed98 2a00 	vldr	s4, [r8]
 8000f8e:	1d12      	adds	r2, r2, #4
 8000f90:	45d1      	cmp	r9, sl
 8000f92:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f96:	f108 0804 	add.w	r8, r8, #4
 8000f9a:	da19      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000f9c:	f109 0901 	add.w	r9, r9, #1
 8000fa0:	edd2 2a00 	vldr	s5, [r2]
 8000fa4:	edd8 1a00 	vldr	s3, [r8]
 8000fa8:	1d12      	adds	r2, r2, #4
 8000faa:	45d1      	cmp	r9, sl
 8000fac:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000fb0:	f108 0804 	add.w	r8, r8, #4
 8000fb4:	da0c      	bge.n	8000fd0 <ai_conv2d_stripe_f32+0x220>
 8000fb6:	f109 0901 	add.w	r9, r9, #1
 8000fba:	ed92 2a00 	vldr	s4, [r2]
 8000fbe:	ed98 3a00 	vldr	s6, [r8]
 8000fc2:	1d12      	adds	r2, r2, #4
 8000fc4:	45d1      	cmp	r9, sl
 8000fc6:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000fca:	f108 0804 	add.w	r8, r8, #4
 8000fce:	dbcb      	blt.n	8000f68 <ai_conv2d_stripe_f32+0x1b8>
 8000fd0:	1e40      	subs	r0, r0, #1
 8000fd2:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fd6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fda:	d19e      	bne.n	8000f1a <ai_conv2d_stripe_f32+0x16a>
 8000fdc:	9802      	ldr	r0, [sp, #8]
 8000fde:	ed8e 1a00 	vstr	s2, [lr]
 8000fe2:	1e6d      	subs	r5, r5, #1
 8000fe4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fe8:	f10e 0e04 	add.w	lr, lr, #4
 8000fec:	f10c 0c04 	add.w	ip, ip, #4
 8000ff0:	d18a      	bne.n	8000f08 <ai_conv2d_stripe_f32+0x158>
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e19a      	b.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8000ff6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000ff8:	4288      	cmp	r0, r1
 8000ffa:	bf04      	itt	eq
 8000ffc:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000ffe:	2801      	cmpeq	r0, #1
 8001000:	f040 80cc 	bne.w	800119c <ai_conv2d_stripe_f32+0x3ec>
 8001004:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001006:	9b06      	ldr	r3, [sp, #24]
 8001008:	9c00      	ldr	r4, [sp, #0]
 800100a:	9002      	str	r0, [sp, #8]
 800100c:	9824      	ldr	r0, [sp, #144]	; 0x90
 800100e:	1b81      	subs	r1, r0, r6
 8001010:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001012:	fb01 fa00 	mul.w	sl, r1, r0
 8001016:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001018:	9926      	ldr	r1, [sp, #152]	; 0x98
 800101a:	eba0 0c06 	sub.w	ip, r0, r6
 800101e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	4341      	muls	r1, r0
 8001024:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001026:	183f      	adds	r7, r7, r0
 8001028:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 800102c:	9b01      	ldr	r3, [sp, #4]
 800102e:	42a3      	cmp	r3, r4
 8001030:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001032:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8001036:	bf0c      	ite	eq
 8001038:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001198 <ai_conv2d_stripe_f32+0x3e8>
 800103c:	eef0 0a40 	vmovne.f32	s1, s0
 8001040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001042:	2400      	movs	r4, #0
 8001044:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001048:	4596      	cmp	lr, r2
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	f080 816e 	bcs.w	800132c <ai_conv2d_stripe_f32+0x57c>
 8001050:	9b00      	ldr	r3, [sp, #0]
 8001052:	9a02      	ldr	r2, [sp, #8]
 8001054:	2a00      	cmp	r2, #0
 8001056:	f000 8097 	beq.w	8001188 <ai_conv2d_stripe_f32+0x3d8>
 800105a:	9a01      	ldr	r2, [sp, #4]
 800105c:	9500      	str	r5, [sp, #0]
 800105e:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 8001062:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 8001066:	f8dd b008 	ldr.w	fp, [sp, #8]
 800106a:	9108      	str	r1, [sp, #32]
 800106c:	f8cd e01c 	str.w	lr, [sp, #28]
 8001070:	4615      	mov	r5, r2
 8001072:	9a00      	ldr	r2, [sp, #0]
 8001074:	ed97 1a00 	vldr	s2, [r7]
 8001078:	9907      	ldr	r1, [sp, #28]
 800107a:	2a00      	cmp	r2, #0
 800107c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001080:	f340 8072 	ble.w	8001168 <ai_conv2d_stripe_f32+0x3b8>
 8001084:	f026 0e03 	bic.w	lr, r6, #3
 8001088:	f1be 0f00 	cmp.w	lr, #0
 800108c:	f04f 0900 	mov.w	r9, #0
 8001090:	f340 8029 	ble.w	80010e6 <ai_conv2d_stripe_f32+0x336>
 8001094:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001098:	edd0 1a00 	vldr	s3, [r0]
 800109c:	ed91 2a00 	vldr	s4, [r1]
 80010a0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a8:	edd0 1a01 	vldr	s3, [r0, #4]
 80010ac:	ed91 2a00 	vldr	s4, [r1]
 80010b0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010b4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010b8:	edd0 1a02 	vldr	s3, [r0, #8]
 80010bc:	ed91 2a00 	vldr	s4, [r1]
 80010c0:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010c4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010c8:	f109 0904 	add.w	r9, r9, #4
 80010cc:	edd0 1a03 	vldr	s3, [r0, #12]
 80010d0:	ed91 2a00 	vldr	s4, [r1]
 80010d4:	3010      	adds	r0, #16
 80010d6:	45f1      	cmp	r9, lr
 80010d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010dc:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010e0:	dbda      	blt.n	8001098 <ai_conv2d_stripe_f32+0x2e8>
 80010e2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010e6:	45b1      	cmp	r9, r6
 80010e8:	f280 8038 	bge.w	800115c <ai_conv2d_stripe_f32+0x3ac>
 80010ec:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010f0:	f109 0901 	add.w	r9, r9, #1
 80010f4:	edd0 1a00 	vldr	s3, [r0]
 80010f8:	ed91 2a00 	vldr	s4, [r1]
 80010fc:	1d00      	adds	r0, r0, #4
 80010fe:	45b1      	cmp	r9, r6
 8001100:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001104:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001108:	da26      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800110a:	f109 0901 	add.w	r9, r9, #1
 800110e:	ed90 2a00 	vldr	s4, [r0]
 8001112:	edd1 1a00 	vldr	s3, [r1]
 8001116:	1d00      	adds	r0, r0, #4
 8001118:	45b1      	cmp	r9, r6
 800111a:	ee02 1a21 	vmla.f32	s2, s4, s3
 800111e:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001122:	da19      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 8001124:	f109 0901 	add.w	r9, r9, #1
 8001128:	edd0 1a00 	vldr	s3, [r0]
 800112c:	ed91 2a00 	vldr	s4, [r1]
 8001130:	1d00      	adds	r0, r0, #4
 8001132:	45b1      	cmp	r9, r6
 8001134:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001138:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800113c:	da0c      	bge.n	8001158 <ai_conv2d_stripe_f32+0x3a8>
 800113e:	f109 0901 	add.w	r9, r9, #1
 8001142:	ed90 2a00 	vldr	s4, [r0]
 8001146:	edd1 1a00 	vldr	s3, [r1]
 800114a:	1d00      	adds	r0, r0, #4
 800114c:	45b1      	cmp	r9, r6
 800114e:	ee02 1a21 	vmla.f32	s2, s4, s3
 8001152:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001156:	dbcb      	blt.n	80010f0 <ai_conv2d_stripe_f32+0x340>
 8001158:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800115c:	1e52      	subs	r2, r2, #1
 800115e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8001162:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001166:	d18d      	bne.n	8001084 <ai_conv2d_stripe_f32+0x2d4>
 8001168:	9908      	ldr	r1, [sp, #32]
 800116a:	ed85 1a00 	vstr	s2, [r5]
 800116e:	1c64      	adds	r4, r4, #1
 8001170:	1d2d      	adds	r5, r5, #4
 8001172:	1d3f      	adds	r7, r7, #4
 8001174:	f1bb 0b01 	subs.w	fp, fp, #1
 8001178:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800117c:	f47f af79 	bne.w	8001072 <ai_conv2d_stripe_f32+0x2c2>
 8001180:	9d00      	ldr	r5, [sp, #0]
 8001182:	9908      	ldr	r1, [sp, #32]
 8001184:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001188:	9a03      	ldr	r2, [sp, #12]
 800118a:	f10e 0e04 	add.w	lr, lr, #4
 800118e:	4596      	cmp	lr, r2
 8001190:	f4bf af2f 	bcs.w	8000ff2 <ai_conv2d_stripe_f32+0x242>
 8001194:	e75d      	b.n	8001052 <ai_conv2d_stripe_f32+0x2a2>
 8001196:	bf00      	nop
 8001198:	00000000 	.word	0x00000000
 800119c:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 80011a0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 80011a4:	4608      	mov	r0, r1
 80011a6:	1bcb      	subs	r3, r1, r7
 80011a8:	fb97 f4f0 	sdiv	r4, r7, r0
 80011ac:	fb00 3004 	mla	r0, r0, r4, r3
 80011b0:	fb90 faf1 	sdiv	sl, r0, r1
 80011b4:	fb01 0a1a 	mls	sl, r1, sl, r0
 80011b8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 80011bc:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80011be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80011c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80011c4:	fb03 4000 	mla	r0, r3, r0, r4
 80011c8:	1876      	adds	r6, r6, r1
 80011ca:	fb90 fbf3 	sdiv	fp, r0, r3
 80011ce:	1e76      	subs	r6, r6, #1
 80011d0:	187f      	adds	r7, r7, r1
 80011d2:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011d6:	eba6 060a 	sub.w	r6, r6, sl
 80011da:	eba5 050b 	sub.w	r5, r5, fp
 80011de:	1e7f      	subs	r7, r7, #1
 80011e0:	fb96 f0f1 	sdiv	r0, r6, r1
 80011e4:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011e6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011e8:	195d      	adds	r5, r3, r5
 80011ea:	1e6d      	subs	r5, r5, #1
 80011ec:	fb00 9911 	mls	r9, r0, r1, r9
 80011f0:	fb97 f1f1 	sdiv	r1, r7, r1
 80011f4:	fb95 fcf3 	sdiv	ip, r5, r3
 80011f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011fc:	9509      	str	r5, [sp, #36]	; 0x24
 80011fe:	eba6 060c 	sub.w	r6, r6, ip
 8001202:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8001204:	1a2d      	subs	r5, r5, r0
 8001206:	fb05 f803 	mul.w	r8, r5, r3
 800120a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800120c:	435d      	muls	r5, r3
 800120e:	fb06 fe05 	mul.w	lr, r6, r5
 8001212:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8001214:	9e06      	ldr	r6, [sp, #24]
 8001216:	194d      	adds	r5, r1, r5
 8001218:	fb04 f909 	mul.w	r9, r4, r9
 800121c:	435d      	muls	r5, r3
 800121e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8001220:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8001224:	9d01      	ldr	r5, [sp, #4]
 8001226:	9e00      	ldr	r6, [sp, #0]
 8001228:	1ae4      	subs	r4, r4, r3
 800122a:	42b5      	cmp	r5, r6
 800122c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800122e:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001230:	445d      	add	r5, fp
 8001232:	fb06 aa05 	mla	sl, r6, r5, sl
 8001236:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001238:	fb0a f505 	mul.w	r5, sl, r5
 800123c:	bf0c      	ite	eq
 800123e:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 80014b8 <.text_5>
 8001242:	eef0 0a40 	vmovne.f32	s1, s0
 8001246:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800124a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800124c:	2500      	movs	r5, #0
 800124e:	2a00      	cmp	r2, #0
 8001250:	d06c      	beq.n	800132c <ai_conv2d_stripe_f32+0x57c>
 8001252:	9202      	str	r2, [sp, #8]
 8001254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001256:	2a00      	cmp	r2, #0
 8001258:	d062      	beq.n	8001320 <ai_conv2d_stripe_f32+0x570>
 800125a:	9a01      	ldr	r2, [sp, #4]
 800125c:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001260:	9a00      	ldr	r2, [sp, #0]
 8001262:	f8cd c00c 	str.w	ip, [sp, #12]
 8001266:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 800126a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800126c:	f8cd e020 	str.w	lr, [sp, #32]
 8001270:	f8cd 701c 	str.w	r7, [sp, #28]
 8001274:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001278:	ed96 1a00 	vldr	s2, [r6]
 800127c:	9f07      	ldr	r7, [sp, #28]
 800127e:	f1be 0f00 	cmp.w	lr, #0
 8001282:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001286:	dd3b      	ble.n	8001300 <ai_conv2d_stripe_f32+0x550>
 8001288:	2800      	cmp	r0, #0
 800128a:	dd32      	ble.n	80012f2 <ai_conv2d_stripe_f32+0x542>
 800128c:	ea4f 0c00 	mov.w	ip, r0
 8001290:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8001294:	455f      	cmp	r7, fp
 8001296:	d227      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 8001298:	edd1 2a00 	vldr	s5, [r1]
 800129c:	edd7 1a00 	vldr	s3, [r7]
 80012a0:	1d09      	adds	r1, r1, #4
 80012a2:	1d3f      	adds	r7, r7, #4
 80012a4:	455f      	cmp	r7, fp
 80012a6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012aa:	d21d      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012ac:	ed91 3a00 	vldr	s6, [r1]
 80012b0:	ed97 2a00 	vldr	s4, [r7]
 80012b4:	1d09      	adds	r1, r1, #4
 80012b6:	1d3f      	adds	r7, r7, #4
 80012b8:	455f      	cmp	r7, fp
 80012ba:	ee03 1a02 	vmla.f32	s2, s6, s4
 80012be:	d213      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012c0:	edd1 2a00 	vldr	s5, [r1]
 80012c4:	edd7 1a00 	vldr	s3, [r7]
 80012c8:	1d09      	adds	r1, r1, #4
 80012ca:	1d3f      	adds	r7, r7, #4
 80012cc:	455f      	cmp	r7, fp
 80012ce:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012d2:	d209      	bcs.n	80012e8 <ai_conv2d_stripe_f32+0x538>
 80012d4:	ed91 2a00 	vldr	s4, [r1]
 80012d8:	ed97 3a00 	vldr	s6, [r7]
 80012dc:	1d09      	adds	r1, r1, #4
 80012de:	1d3f      	adds	r7, r7, #4
 80012e0:	455f      	cmp	r7, fp
 80012e2:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012e6:	d3d7      	bcc.n	8001298 <ai_conv2d_stripe_f32+0x4e8>
 80012e8:	f1bc 0c01 	subs.w	ip, ip, #1
 80012ec:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012f0:	d1ce      	bne.n	8001290 <ai_conv2d_stripe_f32+0x4e0>
 80012f2:	f1be 0e01 	subs.w	lr, lr, #1
 80012f6:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012fa:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012fe:	d1c3      	bne.n	8001288 <ai_conv2d_stripe_f32+0x4d8>
 8001300:	9f08      	ldr	r7, [sp, #32]
 8001302:	1c6d      	adds	r5, r5, #1
 8001304:	1d36      	adds	r6, r6, #4
 8001306:	ed8a 1a00 	vstr	s2, [sl]
 800130a:	1e52      	subs	r2, r2, #1
 800130c:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8001310:	f10a 0a04 	add.w	sl, sl, #4
 8001314:	d1ae      	bne.n	8001274 <ai_conv2d_stripe_f32+0x4c4>
 8001316:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800131a:	f8dd e020 	ldr.w	lr, [sp, #32]
 800131e:	9f07      	ldr	r7, [sp, #28]
 8001320:	9a02      	ldr	r2, [sp, #8]
 8001322:	1e52      	subs	r2, r2, #1
 8001324:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	d193      	bne.n	8001254 <ai_conv2d_stripe_f32+0x4a4>
 800132c:	9800      	ldr	r0, [sp, #0]
 800132e:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001330:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001334:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001336:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	1841      	adds	r1, r0, r1
 800133e:	912c      	str	r1, [sp, #176]	; 0xb0
 8001340:	9805      	ldr	r0, [sp, #20]
 8001342:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001346:	1841      	adds	r1, r0, r1
 8001348:	9804      	ldr	r0, [sp, #16]
 800134a:	9105      	str	r1, [sp, #20]
 800134c:	1e40      	subs	r0, r0, #1
 800134e:	9004      	str	r0, [sp, #16]
 8001350:	f47f ad86 	bne.w	8000e60 <ai_conv2d_stripe_f32+0xb0>
 8001354:	b018      	add	sp, #96	; 0x60
 8001356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800135a <func_dummy>:
 800135a:	4770      	bx	lr

0800135c <ai_dict8_dot_array_f32>:
 800135c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001360:	b081      	sub	sp, #4
 8001362:	4682      	mov	sl, r0
 8001364:	ed2d 8b02 	vpush	{d8}
 8001368:	4615      	mov	r5, r2
 800136a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800136c:	08e0      	lsrs	r0, r4, #3
 800136e:	460f      	mov	r7, r1
 8001370:	461a      	mov	r2, r3
 8001372:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80014b8 <.text_5>
 8001376:	d052      	beq.n	800141e <ai_dict8_dot_array_f32+0xc2>
 8001378:	4629      	mov	r1, r5
 800137a:	783b      	ldrb	r3, [r7, #0]
 800137c:	787d      	ldrb	r5, [r7, #1]
 800137e:	78be      	ldrb	r6, [r7, #2]
 8001380:	f897 b003 	ldrb.w	fp, [r7, #3]
 8001384:	ed92 8a00 	vldr	s16, [r2]
 8001388:	ed92 7a01 	vldr	s14, [r2, #4]
 800138c:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001390:	ed92 6a02 	vldr	s12, [r2, #8]
 8001394:	ed92 5a03 	vldr	s10, [r2, #12]
 8001398:	f897 e001 	ldrb.w	lr, [r7, #1]
 800139c:	f897 8002 	ldrb.w	r8, [r7, #2]
 80013a0:	f897 9003 	ldrb.w	r9, [r7, #3]
 80013a4:	ed92 4a04 	vldr	s8, [r2, #16]
 80013a8:	ed92 3a05 	vldr	s6, [r2, #20]
 80013ac:	ed92 2a06 	vldr	s4, [r2, #24]
 80013b0:	ed92 1a07 	vldr	s2, [r2, #28]
 80013b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80013b8:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 80013bc:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	edd5 6a00 	vldr	s13, [r5]
 80013c8:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013cc:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013d0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013d4:	edd6 5a00 	vldr	s11, [r6]
 80013d8:	eddb 4a00 	vldr	s9, [fp]
 80013dc:	eddc 3a00 	vldr	s7, [ip]
 80013e0:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013e4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013e8:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013ec:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013f0:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013f4:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013f8:	edde 2a00 	vldr	s5, [lr]
 80013fc:	edd8 1a00 	vldr	s3, [r8]
 8001400:	edd9 0a00 	vldr	s1, [r9]
 8001404:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001408:	1d3f      	adds	r7, r7, #4
 800140a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800140e:	3220      	adds	r2, #32
 8001410:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001414:	1e40      	subs	r0, r0, #1
 8001416:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141a:	d1ae      	bne.n	800137a <ai_dict8_dot_array_f32+0x1e>
 800141c:	460d      	mov	r5, r1
 800141e:	f014 0007 	ands.w	r0, r4, #7
 8001422:	d03e      	beq.n	80014a2 <ai_dict8_dot_array_f32+0x146>
 8001424:	f010 0103 	ands.w	r1, r0, #3
 8001428:	f000 800d 	beq.w	8001446 <ai_dict8_dot_array_f32+0xea>
 800142c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001430:	ed92 1a00 	vldr	s2, [r2]
 8001434:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001438:	1d12      	adds	r2, r2, #4
 800143a:	edd6 0a00 	vldr	s1, [r6]
 800143e:	1e49      	subs	r1, r1, #1
 8001440:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001444:	d1f2      	bne.n	800142c <ai_dict8_dot_array_f32+0xd0>
 8001446:	0880      	lsrs	r0, r0, #2
 8001448:	f000 802b 	beq.w	80014a2 <ai_dict8_dot_array_f32+0x146>
 800144c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001450:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001454:	ed92 1a00 	vldr	s2, [r2]
 8001458:	edd2 0a01 	vldr	s1, [r2, #4]
 800145c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001460:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001464:	ed93 2a00 	vldr	s4, [r3]
 8001468:	edd1 1a00 	vldr	s3, [r1]
 800146c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001470:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001474:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001478:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800147c:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001480:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001484:	edd2 0a02 	vldr	s1, [r2, #8]
 8001488:	ed91 2a00 	vldr	s4, [r1]
 800148c:	ed92 1a03 	vldr	s2, [r2, #12]
 8001490:	edd3 1a00 	vldr	s3, [r3]
 8001494:	3210      	adds	r2, #16
 8001496:	ee02 0a20 	vmla.f32	s0, s4, s1
 800149a:	1e40      	subs	r0, r0, #1
 800149c:	ee01 0a81 	vmla.f32	s0, s3, s2
 80014a0:	d1d4      	bne.n	800144c <ai_dict8_dot_array_f32+0xf0>
 80014a2:	edda 0a00 	vldr	s1, [sl]
 80014a6:	ee30 0a80 	vadd.f32	s0, s1, s0
 80014aa:	ed8a 0a00 	vstr	s0, [sl]
 80014ae:	ecbd 8b02 	vpop	{d8}
 80014b2:	b001      	add	sp, #4
 80014b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014b8 <.text_5>:
 80014b8:	00000000 	.word	0x00000000

080014bc <ai_dict4_dot_array_f32>:
 80014bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c0:	ed2d 8b02 	vpush	{d8}
 80014c4:	4680      	mov	r8, r0
 80014c6:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014ca:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014ce:	461e      	mov	r6, r3
 80014d0:	0040      	lsls	r0, r0, #1
 80014d2:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014d6:	460c      	mov	r4, r1
 80014d8:	4615      	mov	r5, r2
 80014da:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014de:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001620 <.text_7>
 80014e2:	d053      	beq.n	800158c <ai_dict4_dot_array_f32+0xd0>
 80014e4:	ed96 8a00 	vldr	s16, [r6]
 80014e8:	ed96 7a01 	vldr	s14, [r6, #4]
 80014ec:	ed96 6a02 	vldr	s12, [r6, #8]
 80014f0:	ed96 5a03 	vldr	s10, [r6, #12]
 80014f4:	7820      	ldrb	r0, [r4, #0]
 80014f6:	7861      	ldrb	r1, [r4, #1]
 80014f8:	78a2      	ldrb	r2, [r4, #2]
 80014fa:	78e7      	ldrb	r7, [r4, #3]
 80014fc:	ed96 4a04 	vldr	s8, [r6, #16]
 8001500:	ed96 3a05 	vldr	s6, [r6, #20]
 8001504:	ed96 2a06 	vldr	s4, [r6, #24]
 8001508:	ed96 1a07 	vldr	s2, [r6, #28]
 800150c:	f007 090f 	and.w	r9, r7, #15
 8001510:	093f      	lsrs	r7, r7, #4
 8001512:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001516:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 800151a:	edd7 1a00 	vldr	s3, [r7]
 800151e:	edda 0a00 	vldr	s1, [sl]
 8001522:	f002 070f 	and.w	r7, r2, #15
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800152c:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001530:	edd2 3a00 	vldr	s7, [r2]
 8001534:	edd7 2a00 	vldr	s5, [r7]
 8001538:	f001 020f 	and.w	r2, r1, #15
 800153c:	0909      	lsrs	r1, r1, #4
 800153e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001542:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001546:	edd1 5a00 	vldr	s11, [r1]
 800154a:	edd7 4a00 	vldr	s9, [r7]
 800154e:	f000 010f 	and.w	r1, r0, #15
 8001552:	0900      	lsrs	r0, r0, #4
 8001554:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001558:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800155c:	edd0 7a00 	vldr	s15, [r0]
 8001560:	edd2 6a00 	vldr	s13, [r2]
 8001564:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001568:	ee06 0a87 	vmla.f32	s0, s13, s14
 800156c:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001570:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001574:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001578:	1d24      	adds	r4, r4, #4
 800157a:	ee02 0a83 	vmla.f32	s0, s5, s6
 800157e:	3620      	adds	r6, #32
 8001580:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001584:	1e5b      	subs	r3, r3, #1
 8001586:	ee00 0a81 	vmla.f32	s0, s1, s2
 800158a:	d1ab      	bne.n	80014e4 <ai_dict4_dot_array_f32+0x28>
 800158c:	4576      	cmp	r6, lr
 800158e:	d22f      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 8001590:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001594:	edd6 1a00 	vldr	s3, [r6]
 8001598:	edd6 0a01 	vldr	s1, [r6, #4]
 800159c:	f000 010f 	and.w	r1, r0, #15
 80015a0:	0900      	lsrs	r0, r0, #4
 80015a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015a6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015aa:	ed90 2a00 	vldr	s4, [r0]
 80015ae:	ed92 1a00 	vldr	s2, [r2]
 80015b2:	3608      	adds	r6, #8
 80015b4:	ee02 0a21 	vmla.f32	s0, s4, s3
 80015b8:	4576      	cmp	r6, lr
 80015ba:	ee01 0a20 	vmla.f32	s0, s2, s1
 80015be:	d217      	bcs.n	80015f0 <ai_dict4_dot_array_f32+0x134>
 80015c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015c4:	ed96 1a00 	vldr	s2, [r6]
 80015c8:	ed96 2a01 	vldr	s4, [r6, #4]
 80015cc:	f000 010f 	and.w	r1, r0, #15
 80015d0:	0900      	lsrs	r0, r0, #4
 80015d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015d6:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015da:	edd0 1a00 	vldr	s3, [r0]
 80015de:	edd2 0a00 	vldr	s1, [r2]
 80015e2:	3608      	adds	r6, #8
 80015e4:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015e8:	4576      	cmp	r6, lr
 80015ea:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015ee:	d3cf      	bcc.n	8001590 <ai_dict4_dot_array_f32+0xd4>
 80015f0:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015f4:	d509      	bpl.n	800160a <ai_dict4_dot_array_f32+0x14e>
 80015f6:	7821      	ldrb	r1, [r4, #0]
 80015f8:	ed96 1a00 	vldr	s2, [r6]
 80015fc:	0909      	lsrs	r1, r1, #4
 80015fe:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8001602:	edd0 0a00 	vldr	s1, [r0]
 8001606:	ee00 0a81 	vmla.f32	s0, s1, s2
 800160a:	edd8 1a00 	vldr	s3, [r8]
 800160e:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001612:	ed88 0a00 	vstr	s0, [r8]
 8001616:	ecbd 8b02 	vpop	{d8}
 800161a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001620 <.text_7>:
 8001620:	00000000 	.word	0x00000000

08001624 <ai_dict_decompress_f32>:
 8001624:	b4f0      	push	{r4, r5, r6, r7}
 8001626:	4604      	mov	r4, r0
 8001628:	9805      	ldr	r0, [sp, #20]
 800162a:	9e04      	ldr	r6, [sp, #16]
 800162c:	2b04      	cmp	r3, #4
 800162e:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001632:	d003      	beq.n	800163c <ai_dict_decompress_f32+0x18>
 8001634:	2b08      	cmp	r3, #8
 8001636:	d03e      	beq.n	80016b6 <ai_dict_decompress_f32+0x92>
 8001638:	bcf0      	pop	{r4, r5, r6, r7}
 800163a:	4770      	bx	lr
 800163c:	42ac      	cmp	r4, r5
 800163e:	d259      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 8001640:	0870      	lsrs	r0, r6, #1
 8001642:	d02e      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001644:	07c3      	lsls	r3, r0, #31
 8001646:	d50c      	bpl.n	8001662 <ai_dict_decompress_f32+0x3e>
 8001648:	780f      	ldrb	r7, [r1, #0]
 800164a:	093f      	lsrs	r7, r7, #4
 800164c:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	f811 7b01 	ldrb.w	r7, [r1], #1
 8001656:	f007 070f 	and.w	r7, r7, #15
 800165a:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 800165e:	6063      	str	r3, [r4, #4]
 8001660:	3408      	adds	r4, #8
 8001662:	0840      	lsrs	r0, r0, #1
 8001664:	d01d      	beq.n	80016a2 <ai_dict_decompress_f32+0x7e>
 8001666:	780b      	ldrb	r3, [r1, #0]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800166e:	6027      	str	r7, [r4, #0]
 8001670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 800167c:	6067      	str	r7, [r4, #4]
 800167e:	f104 0308 	add.w	r3, r4, #8
 8001682:	780c      	ldrb	r4, [r1, #0]
 8001684:	0924      	lsrs	r4, r4, #4
 8001686:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800168a:	601f      	str	r7, [r3, #0]
 800168c:	1e40      	subs	r0, r0, #1
 800168e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001692:	f004 040f 	and.w	r4, r4, #15
 8001696:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 800169a:	605f      	str	r7, [r3, #4]
 800169c:	f103 0408 	add.w	r4, r3, #8
 80016a0:	d1e1      	bne.n	8001666 <ai_dict_decompress_f32+0x42>
 80016a2:	07f0      	lsls	r0, r6, #31
 80016a4:	d5ca      	bpl.n	800163c <ai_dict_decompress_f32+0x18>
 80016a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016b0:	f844 0b04 	str.w	r0, [r4], #4
 80016b4:	e7c2      	b.n	800163c <ai_dict_decompress_f32+0x18>
 80016b6:	42ac      	cmp	r4, r5
 80016b8:	d21c      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016ba:	7808      	ldrb	r0, [r1, #0]
 80016bc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80016c0:	6020      	str	r0, [r4, #0]
 80016c2:	1d20      	adds	r0, r4, #4
 80016c4:	42a8      	cmp	r0, r5
 80016c6:	bf3f      	itttt	cc
 80016c8:	784c      	ldrbcc	r4, [r1, #1]
 80016ca:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016ce:	f840 3b04 	strcc.w	r3, [r0], #4
 80016d2:	42a8      	cmpcc	r0, r5
 80016d4:	d20e      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016d6:	788b      	ldrb	r3, [r1, #2]
 80016d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	42a8      	cmp	r0, r5
 80016e2:	d207      	bcs.n	80016f4 <ai_dict_decompress_f32+0xd0>
 80016e4:	78cc      	ldrb	r4, [r1, #3]
 80016e6:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016ea:	1d09      	adds	r1, r1, #4
 80016ec:	1d04      	adds	r4, r0, #4
 80016ee:	42ac      	cmp	r4, r5
 80016f0:	6003      	str	r3, [r0, #0]
 80016f2:	d3e2      	bcc.n	80016ba <ai_dict_decompress_f32+0x96>
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
 80016f6:	4770      	bx	lr

080016f8 <forward_conv2d>:
 80016f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016fc:	4605      	mov	r5, r0
 80016fe:	b0a9      	sub	sp, #164	; 0xa4
 8001700:	696b      	ldr	r3, [r5, #20]
 8001702:	8819      	ldrh	r1, [r3, #0]
 8001704:	2900      	cmp	r1, #0
 8001706:	bf1a      	itte	ne
 8001708:	6858      	ldrne	r0, [r3, #4]
 800170a:	1d00      	addne	r0, r0, #4
 800170c:	2004      	moveq	r0, #4
 800170e:	6800      	ldr	r0, [r0, #0]
 8001710:	2800      	cmp	r0, #0
 8001712:	bf14      	ite	ne
 8001714:	6802      	ldrne	r2, [r0, #0]
 8001716:	2200      	moveq	r2, #0
 8001718:	2901      	cmp	r1, #1
 800171a:	bfc6      	itte	gt
 800171c:	6858      	ldrgt	r0, [r3, #4]
 800171e:	3010      	addgt	r0, #16
 8001720:	2004      	movle	r0, #4
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	2800      	cmp	r0, #0
 8001726:	bf14      	ite	ne
 8001728:	f8d0 a000 	ldrne.w	sl, [r0]
 800172c:	f04f 0a00 	moveq.w	sl, #0
 8001730:	2902      	cmp	r1, #2
 8001732:	bfc6      	itte	gt
 8001734:	6858      	ldrgt	r0, [r3, #4]
 8001736:	f100 041c 	addgt.w	r4, r0, #28
 800173a:	2404      	movle	r4, #4
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	2800      	cmp	r0, #0
 8001740:	bf14      	ite	ne
 8001742:	6806      	ldrne	r6, [r0, #0]
 8001744:	2600      	moveq	r6, #0
 8001746:	2902      	cmp	r1, #2
 8001748:	dd0a      	ble.n	8001760 <forward_conv2d+0x68>
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f113 0118 	adds.w	r1, r3, #24
 8001750:	d006      	beq.n	8001760 <forward_conv2d+0x68>
 8001752:	8b19      	ldrh	r1, [r3, #24]
 8001754:	2901      	cmp	r1, #1
 8001756:	dd03      	ble.n	8001760 <forward_conv2d+0x68>
 8001758:	69d9      	ldr	r1, [r3, #28]
 800175a:	b109      	cbz	r1, 8001760 <forward_conv2d+0x68>
 800175c:	6849      	ldr	r1, [r1, #4]
 800175e:	e000      	b.n	8001762 <forward_conv2d+0x6a>
 8001760:	2100      	movs	r1, #0
 8001762:	b100      	cbz	r0, 8001766 <forward_conv2d+0x6e>
 8001764:	6880      	ldr	r0, [r0, #8]
 8001766:	68d7      	ldr	r7, [r2, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	931b      	str	r3, [sp, #108]	; 0x6c
 800176c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001770:	685c      	ldr	r4, [r3, #4]
 8001772:	9404      	str	r4, [sp, #16]
 8001774:	68dc      	ldr	r4, [r3, #12]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	9314      	str	r3, [sp, #80]	; 0x50
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	931a      	str	r3, [sp, #104]	; 0x68
 800177e:	68bf      	ldr	r7, [r7, #8]
 8001780:	9720      	str	r7, [sp, #128]	; 0x80
 8001782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001784:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001788:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 800178a:	971f      	str	r7, [sp, #124]	; 0x7c
 800178c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800178e:	681f      	ldr	r7, [r3, #0]
 8001790:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001796:	9319      	str	r3, [sp, #100]	; 0x64
 8001798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800179a:	9318      	str	r3, [sp, #96]	; 0x60
 800179c:	68f3      	ldr	r3, [r6, #12]
 800179e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80017a2:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	9312      	str	r3, [sp, #72]	; 0x48
 80017aa:	69ab      	ldr	r3, [r5, #24]
 80017ac:	931e      	str	r3, [sp, #120]	; 0x78
 80017ae:	6992      	ldr	r2, [r2, #24]
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	931d      	str	r3, [sp, #116]	; 0x74
 80017b4:	69b2      	ldr	r2, [r6, #24]
 80017b6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80017ba:	b119      	cbz	r1, 80017c4 <forward_conv2d+0xcc>
 80017bc:	698a      	ldr	r2, [r1, #24]
 80017be:	6893      	ldr	r3, [r2, #8]
 80017c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80017c2:	e001      	b.n	80017c8 <forward_conv2d+0xd0>
 80017c4:	2200      	movs	r2, #0
 80017c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80017c8:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017cc:	688a      	ldr	r2, [r1, #8]
 80017ce:	9203      	str	r2, [sp, #12]
 80017d0:	69e9      	ldr	r1, [r5, #28]
 80017d2:	b118      	cbz	r0, 80017dc <forward_conv2d+0xe4>
 80017d4:	6981      	ldr	r1, [r0, #24]
 80017d6:	688a      	ldr	r2, [r1, #8]
 80017d8:	9215      	str	r2, [sp, #84]	; 0x54
 80017da:	e005      	b.n	80017e8 <forward_conv2d+0xf0>
 80017dc:	b111      	cbz	r1, 80017e4 <forward_conv2d+0xec>
 80017de:	688a      	ldr	r2, [r1, #8]
 80017e0:	9215      	str	r2, [sp, #84]	; 0x54
 80017e2:	e001      	b.n	80017e8 <forward_conv2d+0xf0>
 80017e4:	2300      	movs	r3, #0
 80017e6:	9315      	str	r3, [sp, #84]	; 0x54
 80017e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017ea:	9102      	str	r1, [sp, #8]
 80017ec:	b920      	cbnz	r0, 80017f8 <forward_conv2d+0x100>
 80017ee:	2100      	movs	r1, #0
 80017f0:	2201      	movs	r2, #1
 80017f2:	9124      	str	r1, [sp, #144]	; 0x90
 80017f4:	9223      	str	r2, [sp, #140]	; 0x8c
 80017f6:	e008      	b.n	800180a <forward_conv2d+0x112>
 80017f8:	6941      	ldr	r1, [r0, #20]
 80017fa:	688a      	ldr	r2, [r1, #8]
 80017fc:	9224      	str	r2, [sp, #144]	; 0x90
 80017fe:	6980      	ldr	r0, [r0, #24]
 8001800:	6841      	ldr	r1, [r0, #4]
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f003 fc3a 	bl	800507c <ai_array_get_byte_size>
 8001808:	9023      	str	r0, [sp, #140]	; 0x8c
 800180a:	aa18      	add	r2, sp, #96	; 0x60
 800180c:	6a28      	ldr	r0, [r5, #32]
 800180e:	2800      	cmp	r0, #0
 8001810:	bf12      	itee	ne
 8001812:	9022      	strne	r0, [sp, #136]	; 0x88
 8001814:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002540 <.text_15>
 8001818:	9122      	streq	r1, [sp, #136]	; 0x88
 800181a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800181c:	8813      	ldrh	r3, [r2, #0]
 800181e:	1e48      	subs	r0, r1, #1
 8001820:	1e5b      	subs	r3, r3, #1
 8001822:	aa19      	add	r2, sp, #100	; 0x64
 8001824:	fb03 1100 	mla	r1, r3, r0, r1
 8001828:	9116      	str	r1, [sp, #88]	; 0x58
 800182a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800182c:	8813      	ldrh	r3, [r2, #0]
 800182e:	1e41      	subs	r1, r0, #1
 8001830:	1e5b      	subs	r3, r3, #1
 8001832:	fb03 0001 	mla	r0, r3, r1, r0
 8001836:	901c      	str	r0, [sp, #112]	; 0x70
 8001838:	2200      	movs	r2, #0
 800183a:	69b6      	ldr	r6, [r6, #24]
 800183c:	6831      	ldr	r1, [r6, #0]
 800183e:	11cb      	asrs	r3, r1, #7
 8001840:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001844:	1449      	asrs	r1, r1, #17
 8001846:	f001 010f 	and.w	r1, r1, #15
 800184a:	2000      	movs	r0, #0
 800184c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001850:	f00c 0c03 	and.w	ip, ip, #3
 8001854:	2904      	cmp	r1, #4
 8001856:	4683      	mov	fp, r0
 8001858:	fa23 f30c 	lsr.w	r3, r3, ip
 800185c:	bf14      	ite	ne
 800185e:	2908      	cmpne	r1, #8
 8001860:	68f2      	ldreq	r2, [r6, #12]
 8001862:	b1da      	cbz	r2, 800189c <forward_conv2d+0x1a4>
 8001864:	6969      	ldr	r1, [r5, #20]
 8001866:	880d      	ldrh	r5, [r1, #0]
 8001868:	2d04      	cmp	r5, #4
 800186a:	bfa6      	itte	ge
 800186c:	6849      	ldrge	r1, [r1, #4]
 800186e:	3128      	addge	r1, #40	; 0x28
 8001870:	2104      	movlt	r1, #4
 8001872:	6809      	ldr	r1, [r1, #0]
 8001874:	2900      	cmp	r1, #0
 8001876:	bf1f      	itttt	ne
 8001878:	6808      	ldrne	r0, [r1, #0]
 800187a:	2800      	cmpne	r0, #0
 800187c:	6981      	ldrne	r1, [r0, #24]
 800187e:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001882:	6980      	ldr	r0, [r0, #24]
 8001884:	6841      	ldr	r1, [r0, #4]
 8001886:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001888:	9101      	str	r1, [sp, #4]
 800188a:	9000      	str	r0, [sp, #0]
 800188c:	4658      	mov	r0, fp
 800188e:	68b1      	ldr	r1, [r6, #8]
 8001890:	f7ff fec8 	bl	8001624 <ai_dict_decompress_f32>
 8001894:	f1bb 0f00 	cmp.w	fp, #0
 8001898:	bf18      	it	ne
 800189a:	46d9      	movne	r9, fp
 800189c:	b2bf      	uxth	r7, r7
 800189e:	427f      	negs	r7, r7
 80018a0:	2c00      	cmp	r4, #0
 80018a2:	d073      	beq.n	800198c <forward_conv2d+0x294>
 80018a4:	4622      	mov	r2, r4
 80018a6:	f1c8 0800 	rsb	r8, r8, #0
 80018aa:	9c04      	ldr	r4, [sp, #16]
 80018ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80018b0:	9e02      	ldr	r6, [sp, #8]
 80018b2:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 80018b6:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 80018ba:	9711      	str	r7, [sp, #68]	; 0x44
 80018bc:	9221      	str	r2, [sp, #132]	; 0x84
 80018be:	9826      	ldr	r0, [sp, #152]	; 0x98
 80018c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80018c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80018c6:	9025      	str	r0, [sp, #148]	; 0x94
 80018c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018ca:	4240      	negs	r0, r0
 80018cc:	bfd8      	it	le
 80018ce:	2000      	movle	r0, #0
 80018d0:	1a89      	subs	r1, r1, r2
 80018d2:	4299      	cmp	r1, r3
 80018d4:	bf3d      	ittte	cc
 80018d6:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018d8:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018da:	1a51      	subcc	r1, r2, r1
 80018dc:	4619      	movcs	r1, r3
 80018de:	910a      	str	r1, [sp, #40]	; 0x28
 80018e0:	9009      	str	r0, [sp, #36]	; 0x24
 80018e2:	9402      	str	r4, [sp, #8]
 80018e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018e6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018ec:	9008      	str	r0, [sp, #32]
 80018ee:	9107      	str	r1, [sp, #28]
 80018f0:	b212      	sxth	r2, r2
 80018f2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018f4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80018fa:	9006      	str	r0, [sp, #24]
 80018fc:	9105      	str	r1, [sp, #20]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001902:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001904:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001906:	930e      	str	r3, [sp, #56]	; 0x38
 8001908:	920d      	str	r2, [sp, #52]	; 0x34
 800190a:	9004      	str	r0, [sp, #16]
 800190c:	9103      	str	r1, [sp, #12]
 800190e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001910:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001914:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001916:	930c      	str	r3, [sp, #48]	; 0x30
 8001918:	920b      	str	r2, [sp, #44]	; 0x2c
 800191a:	9001      	str	r0, [sp, #4]
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001920:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001922:	4659      	mov	r1, fp
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fa43 	bl	8000db0 <ai_conv2d_stripe_f32>
 800192a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800192c:	b310      	cbz	r0, 8001974 <forward_conv2d+0x27c>
 800192e:	f8cd a000 	str.w	sl, [sp]
 8001932:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001934:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001936:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 800193a:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 800193e:	4682      	mov	sl, r0
 8001940:	9800      	ldr	r0, [sp, #0]
 8001942:	6981      	ldr	r1, [r0, #24]
 8001944:	f8c1 b008 	str.w	fp, [r1, #8]
 8001948:	462b      	mov	r3, r5
 800194a:	4622      	mov	r2, r4
 800194c:	4608      	mov	r0, r1
 800194e:	47c8      	blx	r9
 8001950:	443d      	add	r5, r7
 8001952:	1ba8      	subs	r0, r5, r6
 8001954:	4540      	cmp	r0, r8
 8001956:	bfa8      	it	ge
 8001958:	4635      	movge	r5, r6
 800195a:	f1ba 0a01 	subs.w	sl, sl, #1
 800195e:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 8001962:	d1ed      	bne.n	8001940 <forward_conv2d+0x248>
 8001964:	f8dd a000 	ldr.w	sl, [sp]
 8001968:	9515      	str	r5, [sp, #84]	; 0x54
 800196a:	9724      	str	r7, [sp, #144]	; 0x90
 800196c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001970:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8001974:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001978:	68c1      	ldr	r1, [r0, #12]
 800197a:	6081      	str	r1, [r0, #8]
 800197c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800197e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001980:	1808      	adds	r0, r1, r0
 8001982:	9011      	str	r0, [sp, #68]	; 0x44
 8001984:	9821      	ldr	r0, [sp, #132]	; 0x84
 8001986:	1e40      	subs	r0, r0, #1
 8001988:	9021      	str	r0, [sp, #132]	; 0x84
 800198a:	d198      	bne.n	80018be <forward_conv2d+0x1c6>
 800198c:	b029      	add	sp, #164	; 0xa4
 800198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001994 <forward_conv2d_nl_pool>:
 8001994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001998:	4604      	mov	r4, r0
 800199a:	b0b9      	sub	sp, #228	; 0xe4
 800199c:	6963      	ldr	r3, [r4, #20]
 800199e:	8819      	ldrh	r1, [r3, #0]
 80019a0:	2900      	cmp	r1, #0
 80019a2:	bf1a      	itte	ne
 80019a4:	6858      	ldrne	r0, [r3, #4]
 80019a6:	1d00      	addne	r0, r0, #4
 80019a8:	2004      	moveq	r0, #4
 80019aa:	6800      	ldr	r0, [r0, #0]
 80019ac:	2800      	cmp	r0, #0
 80019ae:	bf14      	ite	ne
 80019b0:	6802      	ldrne	r2, [r0, #0]
 80019b2:	2200      	moveq	r2, #0
 80019b4:	2901      	cmp	r1, #1
 80019b6:	bfc6      	itte	gt
 80019b8:	6858      	ldrgt	r0, [r3, #4]
 80019ba:	3010      	addgt	r0, #16
 80019bc:	2004      	movle	r0, #4
 80019be:	6800      	ldr	r0, [r0, #0]
 80019c0:	2800      	cmp	r0, #0
 80019c2:	bf14      	ite	ne
 80019c4:	f8d0 9000 	ldrne.w	r9, [r0]
 80019c8:	f04f 0900 	moveq.w	r9, #0
 80019cc:	2902      	cmp	r1, #2
 80019ce:	bfc6      	itte	gt
 80019d0:	6858      	ldrgt	r0, [r3, #4]
 80019d2:	f100 071c 	addgt.w	r7, r0, #28
 80019d6:	2704      	movle	r7, #4
 80019d8:	6838      	ldr	r0, [r7, #0]
 80019da:	2800      	cmp	r0, #0
 80019dc:	bf14      	ite	ne
 80019de:	6806      	ldrne	r6, [r0, #0]
 80019e0:	2600      	moveq	r6, #0
 80019e2:	2902      	cmp	r1, #2
 80019e4:	dd0a      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f113 0118 	adds.w	r1, r3, #24
 80019ec:	d006      	beq.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019ee:	8b19      	ldrh	r1, [r3, #24]
 80019f0:	2901      	cmp	r1, #1
 80019f2:	dd03      	ble.n	80019fc <forward_conv2d_nl_pool+0x68>
 80019f4:	69d9      	ldr	r1, [r3, #28]
 80019f6:	b109      	cbz	r1, 80019fc <forward_conv2d_nl_pool+0x68>
 80019f8:	6849      	ldr	r1, [r1, #4]
 80019fa:	e000      	b.n	80019fe <forward_conv2d_nl_pool+0x6a>
 80019fc:	2100      	movs	r1, #0
 80019fe:	b100      	cbz	r0, 8001a02 <forward_conv2d_nl_pool+0x6e>
 8001a00:	6880      	ldr	r0, [r0, #8]
 8001a02:	68d7      	ldr	r7, [r2, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	9323      	str	r3, [sp, #140]	; 0x8c
 8001a08:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001a0c:	686b      	ldr	r3, [r5, #4]
 8001a0e:	9310      	str	r3, [sp, #64]	; 0x40
 8001a10:	68eb      	ldr	r3, [r5, #12]
 8001a12:	9322      	str	r3, [sp, #136]	; 0x88
 8001a14:	68ab      	ldr	r3, [r5, #8]
 8001a16:	9321      	str	r3, [sp, #132]	; 0x84
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8001a1c:	68bf      	ldr	r7, [r7, #8]
 8001a1e:	972d      	str	r7, [sp, #180]	; 0xb4
 8001a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a22:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8001a26:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a28:	9720      	str	r7, [sp, #128]	; 0x80
 8001a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a2c:	881f      	ldrh	r7, [r3, #0]
 8001a2e:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a32:	689d      	ldr	r5, [r3, #8]
 8001a34:	69a3      	ldr	r3, [r4, #24]
 8001a36:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a3a:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a3e:	931e      	str	r3, [sp, #120]	; 0x78
 8001a40:	68f3      	ldr	r3, [r6, #12]
 8001a42:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a46:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	9319      	str	r3, [sp, #100]	; 0x64
 8001a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a50:	932b      	str	r3, [sp, #172]	; 0xac
 8001a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a54:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a58:	9311      	str	r3, [sp, #68]	; 0x44
 8001a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a5c:	f8d3 a000 	ldr.w	sl, [r3]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a64:	6992      	ldr	r2, [r2, #24]
 8001a66:	6893      	ldr	r3, [r2, #8]
 8001a68:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a6a:	69b2      	ldr	r2, [r6, #24]
 8001a6c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a70:	b119      	cbz	r1, 8001a7a <forward_conv2d_nl_pool+0xe6>
 8001a72:	698a      	ldr	r2, [r1, #24]
 8001a74:	6893      	ldr	r3, [r2, #8]
 8001a76:	931d      	str	r3, [sp, #116]	; 0x74
 8001a78:	e001      	b.n	8001a7e <forward_conv2d_nl_pool+0xea>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8001a7e:	69e1      	ldr	r1, [r4, #28]
 8001a80:	b118      	cbz	r0, 8001a8a <forward_conv2d_nl_pool+0xf6>
 8001a82:	6981      	ldr	r1, [r0, #24]
 8001a84:	688a      	ldr	r2, [r1, #8]
 8001a86:	921c      	str	r2, [sp, #112]	; 0x70
 8001a88:	e005      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a8a:	b111      	cbz	r1, 8001a92 <forward_conv2d_nl_pool+0xfe>
 8001a8c:	688a      	ldr	r2, [r1, #8]
 8001a8e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a90:	e001      	b.n	8001a96 <forward_conv2d_nl_pool+0x102>
 8001a92:	2300      	movs	r3, #0
 8001a94:	931c      	str	r3, [sp, #112]	; 0x70
 8001a96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a98:	9102      	str	r1, [sp, #8]
 8001a9a:	b920      	cbnz	r0, 8001aa6 <forward_conv2d_nl_pool+0x112>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	9116      	str	r1, [sp, #88]	; 0x58
 8001aa2:	9215      	str	r2, [sp, #84]	; 0x54
 8001aa4:	e008      	b.n	8001ab8 <forward_conv2d_nl_pool+0x124>
 8001aa6:	6941      	ldr	r1, [r0, #20]
 8001aa8:	688a      	ldr	r2, [r1, #8]
 8001aaa:	9216      	str	r2, [sp, #88]	; 0x58
 8001aac:	6980      	ldr	r0, [r0, #24]
 8001aae:	6841      	ldr	r1, [r0, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f003 fae3 	bl	800507c <ai_array_get_byte_size>
 8001ab6:	9015      	str	r0, [sp, #84]	; 0x54
 8001ab8:	aa1e      	add	r2, sp, #120	; 0x78
 8001aba:	6a20      	ldr	r0, [r4, #32]
 8001abc:	2800      	cmp	r0, #0
 8001abe:	bf12      	itee	ne
 8001ac0:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001ac2:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002540 <.text_15>
 8001ac6:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001ac8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aca:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001acc:	8813      	ldrh	r3, [r2, #0]
 8001ace:	9127      	str	r1, [sp, #156]	; 0x9c
 8001ad0:	1e5b      	subs	r3, r3, #1
 8001ad2:	1e41      	subs	r1, r0, #1
 8001ad4:	aa1f      	add	r2, sp, #124	; 0x7c
 8001ad6:	fb03 0001 	mla	r0, r3, r1, r0
 8001ada:	9018      	str	r0, [sp, #96]	; 0x60
 8001adc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001ade:	8813      	ldrh	r3, [r2, #0]
 8001ae0:	1e48      	subs	r0, r1, #1
 8001ae2:	1e5b      	subs	r3, r3, #1
 8001ae4:	fb03 1100 	mla	r1, r3, r0, r1
 8001ae8:	9126      	str	r1, [sp, #152]	; 0x98
 8001aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001aec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001aee:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001af0:	9112      	str	r1, [sp, #72]	; 0x48
 8001af2:	1a12      	subs	r2, r2, r0
 8001af4:	18ba      	adds	r2, r7, r2
 8001af6:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001af8:	fa12 f085 	uxtah	r0, r2, r5
 8001afc:	fbb0 f1f1 	udiv	r1, r0, r1
 8001b00:	1c49      	adds	r1, r1, #1
 8001b02:	9114      	str	r1, [sp, #80]	; 0x50
 8001b04:	2000      	movs	r0, #0
 8001b06:	69b6      	ldr	r6, [r6, #24]
 8001b08:	6831      	ldr	r1, [r6, #0]
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	11cb      	asrs	r3, r1, #7
 8001b10:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001b14:	1449      	asrs	r1, r1, #17
 8001b16:	f001 010f 	and.w	r1, r1, #15
 8001b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b1e:	f00c 0c03 	and.w	ip, ip, #3
 8001b22:	2904      	cmp	r1, #4
 8001b24:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b28:	bf14      	ite	ne
 8001b2a:	2908      	cmpne	r1, #8
 8001b2c:	68f2      	ldreq	r2, [r6, #12]
 8001b2e:	b1da      	cbz	r2, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b30:	6961      	ldr	r1, [r4, #20]
 8001b32:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b36:	f1bc 0f04 	cmp.w	ip, #4
 8001b3a:	bfa6      	itte	ge
 8001b3c:	6849      	ldrge	r1, [r1, #4]
 8001b3e:	3128      	addge	r1, #40	; 0x28
 8001b40:	2104      	movlt	r1, #4
 8001b42:	6809      	ldr	r1, [r1, #0]
 8001b44:	2900      	cmp	r1, #0
 8001b46:	bf1f      	itttt	ne
 8001b48:	6848      	ldrne	r0, [r1, #4]
 8001b4a:	2800      	cmpne	r0, #0
 8001b4c:	6981      	ldrne	r1, [r0, #24]
 8001b4e:	688d      	ldrne	r5, [r1, #8]
 8001b50:	6980      	ldr	r0, [r0, #24]
 8001b52:	6841      	ldr	r1, [r0, #4]
 8001b54:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b56:	9101      	str	r1, [sp, #4]
 8001b58:	9000      	str	r0, [sp, #0]
 8001b5a:	4628      	mov	r0, r5
 8001b5c:	68b1      	ldr	r1, [r6, #8]
 8001b5e:	f7ff fd61 	bl	8001624 <ai_dict_decompress_f32>
 8001b62:	b10d      	cbz	r5, 8001b68 <forward_conv2d_nl_pool+0x1d4>
 8001b64:	4628      	mov	r0, r5
 8001b66:	e000      	b.n	8001b6a <forward_conv2d_nl_pool+0x1d6>
 8001b68:	4658      	mov	r0, fp
 8001b6a:	6963      	ldr	r3, [r4, #20]
 8001b6c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b70:	881c      	ldrh	r4, [r3, #0]
 8001b72:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b76:	2600      	movs	r6, #0
 8001b78:	2c04      	cmp	r4, #4
 8001b7a:	bfa6      	itte	ge
 8001b7c:	685b      	ldrge	r3, [r3, #4]
 8001b7e:	3328      	addge	r3, #40	; 0x28
 8001b80:	2304      	movlt	r3, #4
 8001b82:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	bf14      	ite	ne
 8001b8c:	681d      	ldrne	r5, [r3, #0]
 8001b8e:	2500      	moveq	r5, #0
 8001b90:	427f      	negs	r7, r7
 8001b92:	69ac      	ldr	r4, [r5, #24]
 8001b94:	68eb      	ldr	r3, [r5, #12]
 8001b96:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b9e:	435c      	muls	r4, r3
 8001ba0:	fb0c f404 	mul.w	r4, ip, r4
 8001ba4:	9437      	str	r4, [sp, #220]	; 0xdc
 8001ba6:	fa0f f28a 	sxth.w	r2, sl
 8001baa:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bae:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001bb2:	9436      	str	r4, [sp, #216]	; 0xd8
 8001bb4:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001bb8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bba:	fb0c f404 	mul.w	r4, ip, r4
 8001bbe:	9435      	str	r4, [sp, #212]	; 0xd4
 8001bc0:	f1c8 0800 	rsb	r8, r8, #0
 8001bc4:	f9be 4000 	ldrsh.w	r4, [lr]
 8001bc8:	9434      	str	r4, [sp, #208]	; 0xd0
 8001bca:	4691      	mov	r9, r2
 8001bcc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001bce:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001bd2:	435c      	muls	r4, r3
 8001bd4:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bd6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bd8:	2c00      	cmp	r4, #0
 8001bda:	f000 812e 	beq.w	8001e3a <forward_conv2d_nl_pool+0x4a6>
 8001bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001be2:	9038      	str	r0, [sp, #224]	; 0xe0
 8001be4:	9125      	str	r1, [sp, #148]	; 0x94
 8001be6:	4614      	mov	r4, r2
 8001be8:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bea:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bec:	9324      	str	r3, [sp, #144]	; 0x90
 8001bee:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bf0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	dd6a      	ble.n	8001ccc <forward_conv2d_nl_pool+0x338>
 8001bf6:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bf8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bfc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bfe:	9031      	str	r0, [sp, #196]	; 0xc4
 8001c00:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001c02:	4240      	negs	r0, r0
 8001c04:	bfd8      	it	le
 8001c06:	2000      	movle	r0, #0
 8001c08:	1a89      	subs	r1, r1, r2
 8001c0a:	4299      	cmp	r1, r3
 8001c0c:	bf3d      	ittte	cc
 8001c0e:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001c10:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001c12:	1a51      	subcc	r1, r2, r1
 8001c14:	4619      	movcs	r1, r3
 8001c16:	9009      	str	r0, [sp, #36]	; 0x24
 8001c18:	910a      	str	r1, [sp, #40]	; 0x28
 8001c1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001c1c:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001c20:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001c24:	9008      	str	r0, [sp, #32]
 8001c26:	9107      	str	r1, [sp, #28]
 8001c28:	b212      	sxth	r2, r2
 8001c2a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c2c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c2e:	9006      	str	r0, [sp, #24]
 8001c30:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c32:	9105      	str	r1, [sp, #20]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c3c:	9004      	str	r0, [sp, #16]
 8001c3e:	930e      	str	r3, [sp, #56]	; 0x38
 8001c40:	920d      	str	r2, [sp, #52]	; 0x34
 8001c42:	9103      	str	r1, [sp, #12]
 8001c44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c48:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c4a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c4c:	9002      	str	r0, [sp, #8]
 8001c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8001c50:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c52:	9101      	str	r1, [sp, #4]
 8001c54:	4659      	mov	r1, fp
 8001c56:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c5a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c5c:	9000      	str	r0, [sp, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f8a6 	bl	8000db0 <ai_conv2d_stripe_f32>
 8001c64:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c66:	b350      	cbz	r0, 8001cbe <forward_conv2d_nl_pool+0x32a>
 8001c68:	f8cd a008 	str.w	sl, [sp, #8]
 8001c6c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c6e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c70:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c74:	4682      	mov	sl, r0
 8001c76:	69a9      	ldr	r1, [r5, #24]
 8001c78:	463b      	mov	r3, r7
 8001c7a:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c7e:	4632      	mov	r2, r6
 8001c80:	4608      	mov	r0, r1
 8001c82:	47c0      	blx	r8
 8001c84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c86:	9902      	ldr	r1, [sp, #8]
 8001c88:	4407      	add	r7, r0
 8001c8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c8c:	1a79      	subs	r1, r7, r1
 8001c8e:	4281      	cmp	r1, r0
 8001c90:	69a8      	ldr	r0, [r5, #24]
 8001c92:	6841      	ldr	r1, [r0, #4]
 8001c94:	68c0      	ldr	r0, [r0, #12]
 8001c96:	bfa8      	it	ge
 8001c98:	9f02      	ldrge	r7, [sp, #8]
 8001c9a:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c9e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001ca2:	4593      	cmp	fp, r2
 8001ca4:	d302      	bcc.n	8001cac <forward_conv2d_nl_pool+0x318>
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	4249      	negs	r1, r1
 8001caa:	448b      	add	fp, r1
 8001cac:	f1ba 0a01 	subs.w	sl, sl, #1
 8001cb0:	d1e1      	bne.n	8001c76 <forward_conv2d_nl_pool+0x2e2>
 8001cb2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001cb6:	9610      	str	r6, [sp, #64]	; 0x40
 8001cb8:	971c      	str	r7, [sp, #112]	; 0x70
 8001cba:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001cbe:	69a8      	ldr	r0, [r5, #24]
 8001cc0:	68c1      	ldr	r1, [r0, #12]
 8001cc2:	6081      	str	r1, [r0, #8]
 8001cc4:	f109 0001 	add.w	r0, r9, #1
 8001cc8:	fa0f f980 	sxth.w	r9, r0
 8001ccc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001cce:	1e40      	subs	r0, r0, #1
 8001cd0:	9014      	str	r0, [sp, #80]	; 0x50
 8001cd2:	d56b      	bpl.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001cd4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cd6:	fb00 f009 	mul.w	r0, r0, r9
 8001cda:	0080      	lsls	r0, r0, #2
 8001cdc:	4240      	negs	r0, r0
 8001cde:	eb0b 0200 	add.w	r2, fp, r0
 8001ce2:	69a8      	ldr	r0, [r5, #24]
 8001ce4:	68c3      	ldr	r3, [r0, #12]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	bf3c      	itt	cc
 8001cea:	6847      	ldrcc	r7, [r0, #4]
 8001cec:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	d236      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cf6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cf8:	45b1      	cmp	r9, r6
 8001cfa:	d033      	beq.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001cfc:	6846      	ldr	r6, [r0, #4]
 8001cfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001d02:	429a      	cmp	r2, r3
 8001d04:	f080 802e 	bcs.w	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d08:	ed92 0a00 	vldr	s0, [r2]
 8001d0c:	ed8b 0a00 	vstr	s0, [fp]
 8001d10:	68c3      	ldr	r3, [r0, #12]
 8001d12:	6846      	ldr	r6, [r0, #4]
 8001d14:	1d12      	adds	r2, r2, #4
 8001d16:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d1a:	42ba      	cmp	r2, r7
 8001d1c:	d222      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d1e:	edd2 0a00 	vldr	s1, [r2]
 8001d22:	edcb 0a01 	vstr	s1, [fp, #4]
 8001d26:	68c3      	ldr	r3, [r0, #12]
 8001d28:	6846      	ldr	r6, [r0, #4]
 8001d2a:	1d12      	adds	r2, r2, #4
 8001d2c:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d30:	42ba      	cmp	r2, r7
 8001d32:	d217      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d34:	ed92 0a00 	vldr	s0, [r2]
 8001d38:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d3c:	68c3      	ldr	r3, [r0, #12]
 8001d3e:	6846      	ldr	r6, [r0, #4]
 8001d40:	1d12      	adds	r2, r2, #4
 8001d42:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d46:	42ba      	cmp	r2, r7
 8001d48:	d20c      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3d0>
 8001d4a:	edd2 0a00 	vldr	s1, [r2]
 8001d4e:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d52:	68c3      	ldr	r3, [r0, #12]
 8001d54:	6846      	ldr	r6, [r0, #4]
 8001d56:	1d12      	adds	r2, r2, #4
 8001d58:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d5c:	42ba      	cmp	r2, r7
 8001d5e:	f10b 0b10 	add.w	fp, fp, #16
 8001d62:	d3d1      	bcc.n	8001d08 <forward_conv2d_nl_pool+0x374>
 8001d64:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d68:	189a      	adds	r2, r3, r2
 8001d6a:	eba2 0209 	sub.w	r2, r2, r9
 8001d6e:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d72:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d74:	444a      	add	r2, r9
 8001d76:	fa0f f982 	sxth.w	r9, r2
 8001d7a:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d7e:	68c1      	ldr	r1, [r0, #12]
 8001d80:	6842      	ldr	r2, [r0, #4]
 8001d82:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d86:	459b      	cmp	fp, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	d30f      	bcc.n	8001dac <forward_conv2d_nl_pool+0x418>
 8001d8c:	6841      	ldr	r1, [r0, #4]
 8001d8e:	008a      	lsls	r2, r1, #2
 8001d90:	4252      	negs	r2, r2
 8001d92:	4493      	add	fp, r2
 8001d94:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d98:	458b      	cmp	fp, r1
 8001d9a:	bf24      	itt	cs
 8001d9c:	4493      	addcs	fp, r2
 8001d9e:	458b      	cmpcs	fp, r1
 8001da0:	bf21      	itttt	cs
 8001da2:	4493      	addcs	fp, r2
 8001da4:	458b      	cmpcs	fp, r1
 8001da6:	4493      	addcs	fp, r2
 8001da8:	458b      	cmpcs	fp, r1
 8001daa:	d2ef      	bcs.n	8001d8c <forward_conv2d_nl_pool+0x3f8>
 8001dac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001dae:	4581      	cmp	r9, r0
 8001db0:	d339      	bcc.n	8001e26 <forward_conv2d_nl_pool+0x492>
 8001db2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001db4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001db8:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001dba:	eba9 0001 	sub.w	r0, r9, r1
 8001dbe:	fa0f f980 	sxth.w	r9, r0
 8001dc2:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001dc4:	1c40      	adds	r0, r0, #1
 8001dc6:	902e      	str	r0, [sp, #184]	; 0xb8
 8001dc8:	2101      	movs	r1, #1
 8001dca:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001dcc:	9008      	str	r0, [sp, #32]
 8001dce:	9107      	str	r1, [sp, #28]
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001dd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001dd6:	9206      	str	r2, [sp, #24]
 8001dd8:	b280      	uxth	r0, r0
 8001dda:	9005      	str	r0, [sp, #20]
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001de0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001de2:	9104      	str	r1, [sp, #16]
 8001de4:	b280      	uxth	r0, r0
 8001de6:	b2a1      	uxth	r1, r4
 8001de8:	9002      	str	r0, [sp, #8]
 8001dea:	9103      	str	r1, [sp, #12]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001df0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001df2:	b280      	uxth	r0, r0
 8001df4:	b289      	uxth	r1, r1
 8001df6:	9000      	str	r0, [sp, #0]
 8001df8:	9101      	str	r1, [sp, #4]
 8001dfa:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dfc:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dfe:	1a12      	subs	r2, r2, r0
 8001e00:	69a8      	ldr	r0, [r5, #24]
 8001e02:	b292      	uxth	r2, r2
 8001e04:	b289      	uxth	r1, r1
 8001e06:	47b0      	blx	r6
 8001e08:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001e0a:	6881      	ldr	r1, [r0, #8]
 8001e0c:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001e0e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001e12:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e14:	608a      	str	r2, [r1, #8]
 8001e16:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001e18:	1a20      	subs	r0, r4, r0
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	bfc3      	ittte	gt
 8001e1e:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001e20:	1a24      	subgt	r4, r4, r0
 8001e22:	b224      	sxthgt	r4, r4
 8001e24:	2400      	movle	r4, #0
 8001e26:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e28:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e2a:	1808      	adds	r0, r1, r0
 8001e2c:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e2e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e30:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e32:	4288      	cmp	r0, r1
 8001e34:	f4ff aedc 	bcc.w	8001bf0 <forward_conv2d_nl_pool+0x25c>
 8001e38:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e3a:	69a8      	ldr	r0, [r5, #24]
 8001e3c:	68c2      	ldr	r2, [r0, #12]
 8001e3e:	6082      	str	r2, [r0, #8]
 8001e40:	68c8      	ldr	r0, [r1, #12]
 8001e42:	6088      	str	r0, [r1, #8]
 8001e44:	b039      	add	sp, #228	; 0xe4
 8001e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e4c <forward_dense>:
 8001e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e50:	b081      	sub	sp, #4
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b088      	sub	sp, #32
 8001e58:	6944      	ldr	r4, [r0, #20]
 8001e5a:	8820      	ldrh	r0, [r4, #0]
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	bf1a      	itte	ne
 8001e60:	6861      	ldrne	r1, [r4, #4]
 8001e62:	1d09      	addne	r1, r1, #4
 8001e64:	2104      	moveq	r1, #4
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	680a      	ldrne	r2, [r1, #0]
 8001e6e:	2200      	moveq	r2, #0
 8001e70:	2802      	cmp	r0, #2
 8001e72:	bfa6      	itte	ge
 8001e74:	6861      	ldrge	r1, [r4, #4]
 8001e76:	3110      	addge	r1, #16
 8001e78:	2104      	movlt	r1, #4
 8001e7a:	6809      	ldr	r1, [r1, #0]
 8001e7c:	2900      	cmp	r1, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	680f      	ldrne	r7, [r1, #0]
 8001e82:	2700      	moveq	r7, #0
 8001e84:	2802      	cmp	r0, #2
 8001e86:	bfc6      	itte	gt
 8001e88:	6861      	ldrgt	r1, [r4, #4]
 8001e8a:	311c      	addgt	r1, #28
 8001e8c:	2104      	movle	r1, #4
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	2900      	cmp	r1, #0
 8001e92:	bf14      	ite	ne
 8001e94:	680b      	ldrne	r3, [r1, #0]
 8001e96:	2300      	moveq	r3, #0
 8001e98:	2802      	cmp	r0, #2
 8001e9a:	dd0b      	ble.n	8001eb4 <forward_dense+0x68>
 8001e9c:	6861      	ldr	r1, [r4, #4]
 8001e9e:	f111 0018 	adds.w	r0, r1, #24
 8001ea2:	d007      	beq.n	8001eb4 <forward_dense+0x68>
 8001ea4:	8b08      	ldrh	r0, [r1, #24]
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	db04      	blt.n	8001eb4 <forward_dense+0x68>
 8001eaa:	69c8      	ldr	r0, [r1, #28]
 8001eac:	b110      	cbz	r0, 8001eb4 <forward_dense+0x68>
 8001eae:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001eb2:	e001      	b.n	8001eb8 <forward_dense+0x6c>
 8001eb4:	f04f 0a00 	mov.w	sl, #0
 8001eb8:	68d0      	ldr	r0, [r2, #12]
 8001eba:	6844      	ldr	r4, [r0, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	6845      	ldr	r5, [r0, #4]
 8001ec0:	6881      	ldr	r1, [r0, #8]
 8001ec2:	68c0      	ldr	r0, [r0, #12]
 8001ec4:	699e      	ldr	r6, [r3, #24]
 8001ec6:	69bf      	ldr	r7, [r7, #24]
 8001ec8:	f8d6 e000 	ldr.w	lr, [r6]
 8001ecc:	6992      	ldr	r2, [r2, #24]
 8001ece:	68bf      	ldr	r7, [r7, #8]
 8001ed0:	4341      	muls	r1, r0
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001ed8:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001edc:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001ee0:	f00e 0e0f 	and.w	lr, lr, #15
 8001ee4:	f1be 0f04 	cmp.w	lr, #4
 8001ee8:	bf14      	ite	ne
 8001eea:	f1be 0f08 	cmpne.w	lr, #8
 8001eee:	68f0      	ldreq	r0, [r6, #12]
 8001ef0:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ef4:	f008 0803 	and.w	r8, r8, #3
 8001ef8:	695e      	ldr	r6, [r3, #20]
 8001efa:	6876      	ldr	r6, [r6, #4]
 8001efc:	fa29 f908 	lsr.w	r9, r9, r8
 8001f00:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001f04:	2900      	cmp	r1, #0
 8001f06:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001f0a:	f000 80ea 	beq.w	80020e2 <forward_dense+0x296>
 8001f0e:	9307      	str	r3, [sp, #28]
 8001f10:	f8cd a014 	str.w	sl, [sp, #20]
 8001f14:	9506      	str	r5, [sp, #24]
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	9104      	str	r1, [sp, #16]
 8001f1a:	9907      	ldr	r1, [sp, #28]
 8001f1c:	698a      	ldr	r2, [r1, #24]
 8001f1e:	9905      	ldr	r1, [sp, #20]
 8001f20:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2900      	cmp	r1, #0
 8001f28:	bf1a      	itte	ne
 8001f2a:	698a      	ldrne	r2, [r1, #24]
 8001f2c:	6892      	ldrne	r2, [r2, #8]
 8001f2e:	2200      	moveq	r2, #0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80ab 	bne.w	800208c <forward_dense+0x240>
 8001f36:	429f      	cmp	r7, r3
 8001f38:	f080 80c7 	bcs.w	80020ca <forward_dense+0x27e>
 8001f3c:	9003      	str	r0, [sp, #12]
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	bf0e      	itee	eq
 8001f42:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020f0 <.text_12>
 8001f46:	ed92 0a00 	vldrne	s0, [r2]
 8001f4a:	1d12      	addne	r2, r2, #4
 8001f4c:	2c04      	cmp	r4, #4
 8001f4e:	4620      	mov	r0, r4
 8001f50:	46c6      	mov	lr, r8
 8001f52:	46dc      	mov	ip, fp
 8001f54:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020f0 <.text_12>
 8001f58:	d35d      	bcc.n	8002016 <forward_dense+0x1ca>
 8001f5a:	08a1      	lsrs	r1, r4, #2
 8001f5c:	07cd      	lsls	r5, r1, #31
 8001f5e:	d51c      	bpl.n	8001f9a <forward_dense+0x14e>
 8001f60:	ed9c 4a00 	vldr	s8, [ip]
 8001f64:	edde 4a00 	vldr	s9, [lr]
 8001f68:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f6c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f70:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f74:	edde 2a02 	vldr	s5, [lr, #8]
 8001f78:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f7c:	edde 1a03 	vldr	s3, [lr, #12]
 8001f80:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f84:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f88:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f8c:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f90:	f10e 0e10 	add.w	lr, lr, #16
 8001f94:	f10c 0c10 	add.w	ip, ip, #16
 8001f98:	1f00      	subs	r0, r0, #4
 8001f9a:	0849      	lsrs	r1, r1, #1
 8001f9c:	f000 803b 	beq.w	8002016 <forward_dense+0x1ca>
 8001fa0:	edde 4a00 	vldr	s9, [lr]
 8001fa4:	edde 3a01 	vldr	s7, [lr, #4]
 8001fa8:	edde 2a02 	vldr	s5, [lr, #8]
 8001fac:	edde 1a03 	vldr	s3, [lr, #12]
 8001fb0:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001fb4:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001fb8:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001fbc:	ed9c 4a00 	vldr	s8, [ip]
 8001fc0:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001fc4:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fc8:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fcc:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fd0:	f10e 0510 	add.w	r5, lr, #16
 8001fd4:	f10c 0c10 	add.w	ip, ip, #16
 8001fd8:	edd5 8a00 	vldr	s17, [r5]
 8001fdc:	ed9c 8a00 	vldr	s16, [ip]
 8001fe0:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fe4:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fe8:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fec:	edd5 6a02 	vldr	s13, [r5, #8]
 8001ff0:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001ff4:	edd5 5a03 	vldr	s11, [r5, #12]
 8001ff8:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001ffc:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002000:	3808      	subs	r0, #8
 8002002:	ee46 0a26 	vmla.f32	s1, s12, s13
 8002006:	1e49      	subs	r1, r1, #1
 8002008:	ee45 0a25 	vmla.f32	s1, s10, s11
 800200c:	f105 0e10 	add.w	lr, r5, #16
 8002010:	f10c 0c10 	add.w	ip, ip, #16
 8002014:	d1c4      	bne.n	8001fa0 <forward_dense+0x154>
 8002016:	b378      	cbz	r0, 8002078 <forward_dense+0x22c>
 8002018:	f010 0103 	ands.w	r1, r0, #3
 800201c:	f000 800c 	beq.w	8002038 <forward_dense+0x1ec>
 8002020:	ed9c 1a00 	vldr	s2, [ip]
 8002024:	edde 1a00 	vldr	s3, [lr]
 8002028:	1e49      	subs	r1, r1, #1
 800202a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800202e:	f10e 0e04 	add.w	lr, lr, #4
 8002032:	f10c 0c04 	add.w	ip, ip, #4
 8002036:	d1f3      	bne.n	8002020 <forward_dense+0x1d4>
 8002038:	0880      	lsrs	r0, r0, #2
 800203a:	d01d      	beq.n	8002078 <forward_dense+0x22c>
 800203c:	ed9c 2a00 	vldr	s4, [ip]
 8002040:	ed9e 1a00 	vldr	s2, [lr]
 8002044:	eddc 1a01 	vldr	s3, [ip, #4]
 8002048:	edde 2a01 	vldr	s5, [lr, #4]
 800204c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002050:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002054:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002058:	ed9e 1a02 	vldr	s2, [lr, #8]
 800205c:	eddc 1a03 	vldr	s3, [ip, #12]
 8002060:	edde 2a03 	vldr	s5, [lr, #12]
 8002064:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002068:	1e40      	subs	r0, r0, #1
 800206a:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800206e:	f10e 0e10 	add.w	lr, lr, #16
 8002072:	f10c 0c10 	add.w	ip, ip, #16
 8002076:	d1e1      	bne.n	800203c <forward_dense+0x1f0>
 8002078:	ee30 0a20 	vadd.f32	s0, s0, s1
 800207c:	ed87 0a00 	vstr	s0, [r7]
 8002080:	1d3f      	adds	r7, r7, #4
 8002082:	429f      	cmp	r7, r3
 8002084:	44b3      	add	fp, r6
 8002086:	f4ff af5a 	bcc.w	8001f3e <forward_dense+0xf2>
 800208a:	e01d      	b.n	80020c8 <forward_dense+0x27c>
 800208c:	429f      	cmp	r7, r3
 800208e:	d21c      	bcs.n	80020ca <forward_dense+0x27e>
 8002090:	469a      	mov	sl, r3
 8002092:	9003      	str	r0, [sp, #12]
 8002094:	4615      	mov	r5, r2
 8002096:	2d00      	cmp	r5, #0
 8002098:	bf14      	ite	ne
 800209a:	f855 0b04 	ldrne.w	r0, [r5], #4
 800209e:	2000      	moveq	r0, #0
 80020a0:	9002      	str	r0, [sp, #8]
 80020a2:	f1b9 0f04 	cmp.w	r9, #4
 80020a6:	9a03      	ldr	r2, [sp, #12]
 80020a8:	9400      	str	r4, [sp, #0]
 80020aa:	4643      	mov	r3, r8
 80020ac:	4659      	mov	r1, fp
 80020ae:	a802      	add	r0, sp, #8
 80020b0:	d102      	bne.n	80020b8 <forward_dense+0x26c>
 80020b2:	f7ff fa03 	bl	80014bc <ai_dict4_dot_array_f32>
 80020b6:	e001      	b.n	80020bc <forward_dense+0x270>
 80020b8:	f7ff f950 	bl	800135c <ai_dict8_dot_array_f32>
 80020bc:	9802      	ldr	r0, [sp, #8]
 80020be:	f847 0b04 	str.w	r0, [r7], #4
 80020c2:	4557      	cmp	r7, sl
 80020c4:	44b3      	add	fp, r6
 80020c6:	d3e6      	bcc.n	8002096 <forward_dense+0x24a>
 80020c8:	9803      	ldr	r0, [sp, #12]
 80020ca:	9901      	ldr	r1, [sp, #4]
 80020cc:	9a06      	ldr	r2, [sp, #24]
 80020ce:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020d2:	9904      	ldr	r1, [sp, #16]
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	1e49      	subs	r1, r1, #1
 80020d8:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020dc:	9104      	str	r1, [sp, #16]
 80020de:	f47f af1c 	bne.w	8001f1a <forward_dense+0xce>
 80020e2:	b008      	add	sp, #32
 80020e4:	ecbd 8b02 	vpop	{d8}
 80020e8:	b001      	add	sp, #4
 80020ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020f0 <.text_12>:
 80020f0:	00000000 	.word	0x00000000

080020f4 <forward_gemm>:
 80020f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f8:	4604      	mov	r4, r0
 80020fa:	b091      	sub	sp, #68	; 0x44
 80020fc:	6961      	ldr	r1, [r4, #20]
 80020fe:	8808      	ldrh	r0, [r1, #0]
 8002100:	2800      	cmp	r0, #0
 8002102:	bf1a      	itte	ne
 8002104:	6848      	ldrne	r0, [r1, #4]
 8002106:	1d02      	addne	r2, r0, #4
 8002108:	2204      	moveq	r2, #4
 800210a:	460b      	mov	r3, r1
 800210c:	6810      	ldr	r0, [r2, #0]
 800210e:	8819      	ldrh	r1, [r3, #0]
 8002110:	2800      	cmp	r0, #0
 8002112:	bf14      	ite	ne
 8002114:	6805      	ldrne	r5, [r0, #0]
 8002116:	2500      	moveq	r5, #0
 8002118:	2900      	cmp	r1, #0
 800211a:	bf1d      	ittte	ne
 800211c:	6858      	ldrne	r0, [r3, #4]
 800211e:	2800      	cmpne	r0, #0
 8002120:	f8b0 c000 	ldrhne.w	ip, [r0]
 8002124:	f04f 0c00 	moveq.w	ip, #0
 8002128:	2902      	cmp	r1, #2
 800212a:	bfa6      	itte	ge
 800212c:	6858      	ldrge	r0, [r3, #4]
 800212e:	3010      	addge	r0, #16
 8002130:	2004      	movlt	r0, #4
 8002132:	6800      	ldr	r0, [r0, #0]
 8002134:	2800      	cmp	r0, #0
 8002136:	bf14      	ite	ne
 8002138:	6801      	ldrne	r1, [r0, #0]
 800213a:	2100      	moveq	r1, #0
 800213c:	2600      	movs	r6, #0
 800213e:	f1bc 0f03 	cmp.w	ip, #3
 8002142:	46b2      	mov	sl, r6
 8002144:	d107      	bne.n	8002156 <forward_gemm+0x62>
 8002146:	6810      	ldr	r0, [r2, #0]
 8002148:	2800      	cmp	r0, #0
 800214a:	d026      	beq.n	800219a <forward_gemm+0xa6>
 800214c:	6846      	ldr	r6, [r0, #4]
 800214e:	d024      	beq.n	800219a <forward_gemm+0xa6>
 8002150:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8002154:	e021      	b.n	800219a <forward_gemm+0xa6>
 8002156:	f1bc 0f02 	cmp.w	ip, #2
 800215a:	d10d      	bne.n	8002178 <forward_gemm+0x84>
 800215c:	6810      	ldr	r0, [r2, #0]
 800215e:	b100      	cbz	r0, 8002162 <forward_gemm+0x6e>
 8002160:	6846      	ldr	r6, [r0, #4]
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	2a02      	cmp	r2, #2
 8002166:	bfc6      	itte	gt
 8002168:	6858      	ldrgt	r0, [r3, #4]
 800216a:	301c      	addgt	r0, #28
 800216c:	2004      	movle	r0, #4
 800216e:	6800      	ldr	r0, [r0, #0]
 8002170:	b198      	cbz	r0, 800219a <forward_gemm+0xa6>
 8002172:	f8d0 a000 	ldr.w	sl, [r0]
 8002176:	e010      	b.n	800219a <forward_gemm+0xa6>
 8002178:	f1bc 0f01 	cmp.w	ip, #1
 800217c:	d10d      	bne.n	800219a <forward_gemm+0xa6>
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	2a02      	cmp	r2, #2
 8002182:	bfc6      	itte	gt
 8002184:	6858      	ldrgt	r0, [r3, #4]
 8002186:	f100 021c 	addgt.w	r2, r0, #28
 800218a:	2204      	movle	r2, #4
 800218c:	6810      	ldr	r0, [r2, #0]
 800218e:	2800      	cmp	r0, #0
 8002190:	d003      	beq.n	800219a <forward_gemm+0xa6>
 8002192:	6806      	ldr	r6, [r0, #0]
 8002194:	bf18      	it	ne
 8002196:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 800219a:	68c8      	ldr	r0, [r1, #12]
 800219c:	6989      	ldr	r1, [r1, #24]
 800219e:	688b      	ldr	r3, [r1, #8]
 80021a0:	6842      	ldr	r2, [r0, #4]
 80021a2:	68c1      	ldr	r1, [r0, #12]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	b289      	uxth	r1, r1
 80021a8:	a806      	add	r0, sp, #24
 80021aa:	f003 f92d 	bl	8005408 <arm_mat_init_f32>
 80021ae:	69a9      	ldr	r1, [r5, #24]
 80021b0:	68e8      	ldr	r0, [r5, #12]
 80021b2:	688b      	ldr	r3, [r1, #8]
 80021b4:	6842      	ldr	r2, [r0, #4]
 80021b6:	68c1      	ldr	r1, [r0, #12]
 80021b8:	b292      	uxth	r2, r2
 80021ba:	b289      	uxth	r1, r1
 80021bc:	a804      	add	r0, sp, #16
 80021be:	f003 f923 	bl	8005408 <arm_mat_init_f32>
 80021c2:	69b1      	ldr	r1, [r6, #24]
 80021c4:	68f0      	ldr	r0, [r6, #12]
 80021c6:	688b      	ldr	r3, [r1, #8]
 80021c8:	6842      	ldr	r2, [r0, #4]
 80021ca:	68c1      	ldr	r1, [r0, #12]
 80021cc:	b292      	uxth	r2, r2
 80021ce:	b289      	uxth	r1, r1
 80021d0:	a802      	add	r0, sp, #8
 80021d2:	f003 f919 	bl	8005408 <arm_mat_init_f32>
 80021d6:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021da:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021de:	688b      	ldr	r3, [r1, #8]
 80021e0:	6842      	ldr	r2, [r0, #4]
 80021e2:	68c1      	ldr	r1, [r0, #12]
 80021e4:	b292      	uxth	r2, r2
 80021e6:	b289      	uxth	r1, r1
 80021e8:	4668      	mov	r0, sp
 80021ea:	f003 f90d 	bl	8005408 <arm_mat_init_f32>
 80021ee:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021f2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021f6:	9905      	ldr	r1, [sp, #20]
 80021f8:	9a03      	ldr	r2, [sp, #12]
 80021fa:	ed94 0a07 	vldr	s0, [r4, #28]
 80021fe:	edd4 0a06 	vldr	s1, [r4, #24]
 8002202:	910b      	str	r1, [sp, #44]	; 0x2c
 8002204:	920e      	str	r2, [sp, #56]	; 0x38
 8002206:	920d      	str	r2, [sp, #52]	; 0x34
 8002208:	2300      	movs	r3, #0
 800220a:	f8bd e010 	ldrh.w	lr, [sp, #16]
 800220e:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8002218:	f8bd c000 	ldrh.w	ip, [sp]
 800221c:	9c07      	ldr	r4, [sp, #28]
 800221e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8002222:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8002226:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800222a:	9108      	str	r1, [sp, #32]
 800222c:	0002      	movs	r2, r0
 800222e:	bf0c      	ite	eq
 8002230:	4672      	moveq	r2, lr
 8002232:	4642      	movne	r2, r8
 8002234:	2f01      	cmp	r7, #1
 8002236:	bf0c      	ite	eq
 8002238:	4699      	moveq	r9, r3
 800223a:	f04f 0904 	movne.w	r9, #4
 800223e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8002242:	f1bc 0f01 	cmp.w	ip, #1
 8002246:	d104      	bne.n	8002252 <forward_gemm+0x15e>
 8002248:	2f01      	cmp	r7, #1
 800224a:	d004      	beq.n	8002256 <forward_gemm+0x162>
 800224c:	f1cb 0700 	rsb	r7, fp, #0
 8002250:	e002      	b.n	8002258 <forward_gemm+0x164>
 8002252:	2f01      	cmp	r7, #1
 8002254:	d000      	beq.n	8002258 <forward_gemm+0x164>
 8002256:	2700      	movs	r7, #0
 8002258:	2800      	cmp	r0, #0
 800225a:	bf0c      	ite	eq
 800225c:	46f4      	moveq	ip, lr
 800225e:	46c4      	movne	ip, r8
 8002260:	b23f      	sxth	r7, r7
 8002262:	45b4      	cmp	ip, r6
 8002264:	970c      	str	r7, [sp, #48]	; 0x30
 8002266:	f040 808b 	bne.w	8002380 <forward_gemm+0x28c>
 800226a:	2d00      	cmp	r5, #0
 800226c:	bf0c      	ite	eq
 800226e:	9109      	streq	r1, [sp, #36]	; 0x24
 8002270:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 8002274:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002276:	455f      	cmp	r7, fp
 8002278:	f040 8082 	bne.w	8002380 <forward_gemm+0x28c>
 800227c:	2800      	cmp	r0, #0
 800227e:	bf0c      	ite	eq
 8002280:	46c4      	moveq	ip, r8
 8002282:	46f4      	movne	ip, lr
 8002284:	2d00      	cmp	r5, #0
 8002286:	bf0c      	ite	eq
 8002288:	4657      	moveq	r7, sl
 800228a:	460f      	movne	r7, r1
 800228c:	45bc      	cmp	ip, r7
 800228e:	d177      	bne.n	8002380 <forward_gemm+0x28c>
 8002290:	9e08      	ldr	r6, [sp, #32]
 8002292:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002296:	9410      	str	r4, [sp, #64]	; 0x40
 8002298:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800229c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80022a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80022a2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80022a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 80022aa:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 80022ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022b2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80022b6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 80022ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
 80022be:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 80022c2:	2800      	cmp	r0, #0
 80022c4:	bf0c      	ite	eq
 80022c6:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022ca:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022ce:	fa1f fb88 	uxth.w	fp, r8
 80022d2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022d6:	f1bb 0f00 	cmp.w	fp, #0
 80022da:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8002544 <.text_16>
 80022de:	d019      	beq.n	8002314 <forward_gemm+0x220>
 80022e0:	2800      	cmp	r0, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	f04f 0b04 	moveq.w	fp, #4
 80022e8:	46a3      	movne	fp, r4
 80022ea:	2d00      	cmp	r5, #0
 80022ec:	f1a8 0801 	sub.w	r8, r8, #1
 80022f0:	edde 1a00 	vldr	s3, [lr]
 80022f4:	ed93 2a00 	vldr	s4, [r3]
 80022f8:	44de      	add	lr, fp
 80022fa:	bf0c      	ite	eq
 80022fc:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 8002300:	f04f 0b04 	movne.w	fp, #4
 8002304:	445b      	add	r3, fp
 8002306:	fa1f fb88 	uxth.w	fp, r8
 800230a:	f1bb 0f00 	cmp.w	fp, #0
 800230e:	ee01 1a82 	vmla.f32	s2, s3, s4
 8002312:	d1e5      	bne.n	80022e0 <forward_gemm+0x1ec>
 8002314:	ee20 1a81 	vmul.f32	s2, s1, s2
 8002318:	edd6 1a00 	vldr	s3, [r6]
 800231c:	ee00 1a21 	vmla.f32	s2, s0, s3
 8002320:	ed87 1a00 	vstr	s2, [r7]
 8002324:	1d3f      	adds	r7, r7, #4
 8002326:	1e52      	subs	r2, r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	002b      	movs	r3, r5
 800232c:	bf0e      	itee	eq
 800232e:	1a8b      	subeq	r3, r1, r2
 8002330:	ebaa 0302 	subne.w	r3, sl, r2
 8002334:	434b      	mulne	r3, r1
 8002336:	2a00      	cmp	r2, #0
 8002338:	444e      	add	r6, r9
 800233a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800233e:	d1c0      	bne.n	80022c2 <forward_gemm+0x1ce>
 8002340:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 8002344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002348:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 800234c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002350:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8002354:	19df      	adds	r7, r3, r7
 8002356:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800235a:	b100      	cbz	r0, 800235e <forward_gemm+0x26a>
 800235c:	2404      	movs	r4, #4
 800235e:	eb02 0c04 	add.w	ip, r2, r4
 8002362:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002368:	1e67      	subs	r7, r4, #1
 800236a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 800236e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8002372:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002376:	2a00      	cmp	r2, #0
 8002378:	d192      	bne.n	80022a0 <forward_gemm+0x1ac>
 800237a:	b011      	add	sp, #68	; 0x44
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	fb0b f606 	mul.w	r6, fp, r6
 8002384:	2e00      	cmp	r6, #0
 8002386:	ddf8      	ble.n	800237a <forward_gemm+0x286>
 8002388:	f016 0003 	ands.w	r0, r6, #3
 800238c:	d003      	beq.n	8002396 <forward_gemm+0x2a2>
 800238e:	1e40      	subs	r0, r0, #1
 8002390:	f844 3b04 	str.w	r3, [r4], #4
 8002394:	d1fb      	bne.n	800238e <forward_gemm+0x29a>
 8002396:	08b1      	lsrs	r1, r6, #2
 8002398:	d0ef      	beq.n	800237a <forward_gemm+0x286>
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	6063      	str	r3, [r4, #4]
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	60e3      	str	r3, [r4, #12]
 80023a2:	3410      	adds	r4, #16
 80023a4:	1e49      	subs	r1, r1, #1
 80023a6:	d1f8      	bne.n	800239a <forward_gemm+0x2a6>
 80023a8:	b011      	add	sp, #68	; 0x44
 80023aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080023b0 <forward_matmul>:
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b08b      	sub	sp, #44	; 0x2c
 80023b6:	6944      	ldr	r4, [r0, #20]
 80023b8:	8822      	ldrh	r2, [r4, #0]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	bf1a      	itte	ne
 80023be:	6860      	ldrne	r0, [r4, #4]
 80023c0:	1d03      	addne	r3, r0, #4
 80023c2:	2304      	moveq	r3, #4
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	bf14      	ite	ne
 80023ca:	6808      	ldrne	r0, [r1, #0]
 80023cc:	2000      	moveq	r0, #0
 80023ce:	2900      	cmp	r1, #0
 80023d0:	bf14      	ite	ne
 80023d2:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023d6:	f04f 0b00 	moveq.w	fp, #0
 80023da:	2a02      	cmp	r2, #2
 80023dc:	bfa6      	itte	ge
 80023de:	6861      	ldrge	r1, [r4, #4]
 80023e0:	3110      	addge	r1, #16
 80023e2:	2104      	movlt	r1, #4
 80023e4:	6809      	ldr	r1, [r1, #0]
 80023e6:	2900      	cmp	r1, #0
 80023e8:	bf14      	ite	ne
 80023ea:	680b      	ldrne	r3, [r1, #0]
 80023ec:	2300      	moveq	r3, #0
 80023ee:	f1bb 0f00 	cmp.w	fp, #0
 80023f2:	d108      	bne.n	8002406 <forward_matmul+0x56>
 80023f4:	2a02      	cmp	r2, #2
 80023f6:	bfc6      	itte	gt
 80023f8:	6861      	ldrgt	r1, [r4, #4]
 80023fa:	311c      	addgt	r1, #28
 80023fc:	2104      	movle	r1, #4
 80023fe:	6809      	ldr	r1, [r1, #0]
 8002400:	b109      	cbz	r1, 8002406 <forward_matmul+0x56>
 8002402:	f8d1 b000 	ldr.w	fp, [r1]
 8002406:	68dd      	ldr	r5, [r3, #12]
 8002408:	68c4      	ldr	r4, [r0, #12]
 800240a:	f8db 900c 	ldr.w	r9, [fp, #12]
 800240e:	686e      	ldr	r6, [r5, #4]
 8002410:	f8d4 e000 	ldr.w	lr, [r4]
 8002414:	f8d9 2000 	ldr.w	r2, [r9]
 8002418:	f8d5 a000 	ldr.w	sl, [r5]
 800241c:	68a1      	ldr	r1, [r4, #8]
 800241e:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002422:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002426:	68ef      	ldr	r7, [r5, #12]
 8002428:	9706      	str	r7, [sp, #24]
 800242a:	fb01 f50e 	mul.w	r5, r1, lr
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	68e7      	ldr	r7, [r4, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	434f      	muls	r7, r1
 8002436:	fb0e f707 	mul.w	r7, lr, r7
 800243a:	970a      	str	r7, [sp, #40]	; 0x28
 800243c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002440:	fb08 f404 	mul.w	r4, r8, r4
 8002444:	4354      	muls	r4, r2
 8002446:	2e00      	cmp	r6, #0
 8002448:	9409      	str	r4, [sp, #36]	; 0x24
 800244a:	fb08 f802 	mul.w	r8, r8, r2
 800244e:	d074      	beq.n	800253a <forward_matmul+0x18a>
 8002450:	2400      	movs	r4, #0
 8002452:	46a1      	mov	r9, r4
 8002454:	9602      	str	r6, [sp, #8]
 8002456:	9e06      	ldr	r6, [sp, #24]
 8002458:	2e00      	cmp	r6, #0
 800245a:	d064      	beq.n	8002526 <forward_matmul+0x176>
 800245c:	9f06      	ldr	r7, [sp, #24]
 800245e:	9701      	str	r7, [sp, #4]
 8002460:	f8cd c00c 	str.w	ip, [sp, #12]
 8002464:	2600      	movs	r6, #0
 8002466:	9505      	str	r5, [sp, #20]
 8002468:	9d03      	ldr	r5, [sp, #12]
 800246a:	2d00      	cmp	r5, #0
 800246c:	d051      	beq.n	8002512 <forward_matmul+0x162>
 800246e:	9500      	str	r5, [sp, #0]
 8002470:	f8cd a010 	str.w	sl, [sp, #16]
 8002474:	9207      	str	r2, [sp, #28]
 8002476:	f04f 0a00 	mov.w	sl, #0
 800247a:	9a04      	ldr	r2, [sp, #16]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d03f      	beq.n	8002500 <forward_matmul+0x150>
 8002480:	f04f 0c00 	mov.w	ip, #0
 8002484:	9008      	str	r0, [sp, #32]
 8002486:	9808      	ldr	r0, [sp, #32]
 8002488:	6985      	ldr	r5, [r0, #24]
 800248a:	68a8      	ldr	r0, [r5, #8]
 800248c:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002490:	4420      	add	r0, r4
 8002492:	4430      	add	r0, r6
 8002494:	eb00 050c 	add.w	r5, r0, ip
 8002498:	68b8      	ldr	r0, [r7, #8]
 800249a:	4448      	add	r0, r9
 800249c:	4450      	add	r0, sl
 800249e:	eb00 070c 	add.w	r7, r0, ip
 80024a2:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002544 <.text_16>
 80024a6:	b319      	cbz	r1, 80024f0 <forward_matmul+0x140>
 80024a8:	07c8      	lsls	r0, r1, #31
 80024aa:	d509      	bpl.n	80024c0 <forward_matmul+0x110>
 80024ac:	edd5 0a00 	vldr	s1, [r5]
 80024b0:	ed97 1a00 	vldr	s2, [r7]
 80024b4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b8:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024bc:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024c0:	0848      	lsrs	r0, r1, #1
 80024c2:	d015      	beq.n	80024f0 <forward_matmul+0x140>
 80024c4:	edd5 0a00 	vldr	s1, [r5]
 80024c8:	ed97 1a00 	vldr	s2, [r7]
 80024cc:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024d0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024d4:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024d8:	edd5 0a00 	vldr	s1, [r5]
 80024dc:	ed97 1a00 	vldr	s2, [r7]
 80024e0:	1e40      	subs	r0, r0, #1
 80024e2:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024e6:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ee:	d1e9      	bne.n	80024c4 <forward_matmul+0x114>
 80024f0:	ed83 0a00 	vstr	s0, [r3]
 80024f4:	1d1b      	adds	r3, r3, #4
 80024f6:	1e52      	subs	r2, r2, #1
 80024f8:	f10c 0c04 	add.w	ip, ip, #4
 80024fc:	d1c3      	bne.n	8002486 <forward_matmul+0xd6>
 80024fe:	9808      	ldr	r0, [sp, #32]
 8002500:	9d00      	ldr	r5, [sp, #0]
 8002502:	9a07      	ldr	r2, [sp, #28]
 8002504:	1e6d      	subs	r5, r5, #1
 8002506:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 800250a:	9500      	str	r5, [sp, #0]
 800250c:	d1b5      	bne.n	800247a <forward_matmul+0xca>
 800250e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002512:	9f01      	ldr	r7, [sp, #4]
 8002514:	9d05      	ldr	r5, [sp, #20]
 8002516:	1e7f      	subs	r7, r7, #1
 8002518:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800251c:	9701      	str	r7, [sp, #4]
 800251e:	d1a3      	bne.n	8002468 <forward_matmul+0xb8>
 8002520:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002524:	9d05      	ldr	r5, [sp, #20]
 8002526:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002528:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800252a:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 800252e:	9e02      	ldr	r6, [sp, #8]
 8002530:	1e76      	subs	r6, r6, #1
 8002532:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8002536:	9602      	str	r6, [sp, #8]
 8002538:	d18d      	bne.n	8002456 <forward_matmul+0xa6>
 800253a:	b00b      	add	sp, #44	; 0x2c
 800253c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002540 <.text_15>:
 8002540:	0800135b 	.word	0x0800135b

08002544 <.text_16>:
 8002544:	00000000 	.word	0x00000000

08002548 <ai_shape_get_size>:
 8002548:	b470      	push	{r4, r5, r6}
 800254a:	4601      	mov	r1, r0
 800254c:	f04f 0201 	mov.w	r2, #1
 8002550:	680b      	ldr	r3, [r1, #0]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	d01e      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002556:	684c      	ldr	r4, [r1, #4]
 8002558:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800255c:	4618      	mov	r0, r3
 800255e:	1f0d      	subs	r5, r1, #4
 8002560:	f010 0103 	ands.w	r1, r0, #3
 8002564:	f000 8006 	beq.w	8002574 <ai_shape_get_size+0x2c>
 8002568:	f855 6904 	ldr.w	r6, [r5], #-4
 800256c:	1e5b      	subs	r3, r3, #1
 800256e:	4372      	muls	r2, r6
 8002570:	1e49      	subs	r1, r1, #1
 8002572:	d1f9      	bne.n	8002568 <ai_shape_get_size+0x20>
 8002574:	0880      	lsrs	r0, r0, #2
 8002576:	d00d      	beq.n	8002594 <ai_shape_get_size+0x4c>
 8002578:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800257c:	3910      	subs	r1, #16
 800257e:	68cb      	ldr	r3, [r1, #12]
 8002580:	688c      	ldr	r4, [r1, #8]
 8002582:	684d      	ldr	r5, [r1, #4]
 8002584:	f851 6910 	ldr.w	r6, [r1], #-16
 8002588:	4363      	muls	r3, r4
 800258a:	436b      	muls	r3, r5
 800258c:	4373      	muls	r3, r6
 800258e:	435a      	muls	r2, r3
 8002590:	1e40      	subs	r0, r0, #1
 8002592:	d1f4      	bne.n	800257e <ai_shape_get_size+0x36>
 8002594:	bc70      	pop	{r4, r5, r6}
 8002596:	4610      	mov	r0, r2
 8002598:	4770      	bx	lr
	...

0800259c <nl_func_acos_array_f32>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	688c      	ldr	r4, [r1, #8]
 80025a0:	6880      	ldr	r0, [r0, #8]
 80025a2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80025a6:	1f0d      	subs	r5, r1, #4
 80025a8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80025ac:	1f0e      	subs	r6, r1, #4
 80025ae:	42a5      	cmp	r5, r4
 80025b0:	f0c0 800a 	bcc.w	80025c8 <nl_func_acos_array_f32+0x2c>
 80025b4:	ed95 0a00 	vldr	s0, [r5]
 80025b8:	f00d fc86 	bl	800fec8 <acosf>
 80025bc:	ed86 0a00 	vstr	s0, [r6]
 80025c0:	1f2d      	subs	r5, r5, #4
 80025c2:	1f36      	subs	r6, r6, #4
 80025c4:	42a5      	cmp	r5, r4
 80025c6:	d2f5      	bcs.n	80025b4 <nl_func_acos_array_f32+0x18>
 80025c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080025cc <forward_acos>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b081      	sub	sp, #4
 80025d0:	6942      	ldr	r2, [r0, #20]
 80025d2:	8811      	ldrh	r1, [r2, #0]
 80025d4:	2900      	cmp	r1, #0
 80025d6:	bf1a      	itte	ne
 80025d8:	6850      	ldrne	r0, [r2, #4]
 80025da:	1d00      	addne	r0, r0, #4
 80025dc:	2004      	moveq	r0, #4
 80025de:	f04f 0501 	mov.w	r5, #1
 80025e2:	6800      	ldr	r0, [r0, #0]
 80025e4:	2800      	cmp	r0, #0
 80025e6:	bf14      	ite	ne
 80025e8:	6803      	ldrne	r3, [r0, #0]
 80025ea:	2300      	moveq	r3, #0
 80025ec:	2902      	cmp	r1, #2
 80025ee:	bfa6      	itte	ge
 80025f0:	6850      	ldrge	r0, [r2, #4]
 80025f2:	3010      	addge	r0, #16
 80025f4:	2004      	movlt	r0, #4
 80025f6:	6800      	ldr	r0, [r0, #0]
 80025f8:	2800      	cmp	r0, #0
 80025fa:	bf19      	ittee	ne
 80025fc:	6800      	ldrne	r0, [r0, #0]
 80025fe:	f100 0418 	addne.w	r4, r0, #24
 8002602:	2100      	moveq	r1, #0
 8002604:	f101 0418 	addeq.w	r4, r1, #24
 8002608:	f103 0108 	add.w	r1, r3, #8
 800260c:	680a      	ldr	r2, [r1, #0]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	d01e      	beq.n	8002650 <forward_acos+0x84>
 8002612:	684e      	ldr	r6, [r1, #4]
 8002614:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002618:	4610      	mov	r0, r2
 800261a:	1f0f      	subs	r7, r1, #4
 800261c:	f010 0103 	ands.w	r1, r0, #3
 8002620:	d006      	beq.n	8002630 <forward_acos+0x64>
 8002622:	1e52      	subs	r2, r2, #1
 8002624:	f857 c904 	ldr.w	ip, [r7], #-4
 8002628:	1e49      	subs	r1, r1, #1
 800262a:	fb0c f505 	mul.w	r5, ip, r5
 800262e:	d1f8      	bne.n	8002622 <forward_acos+0x56>
 8002630:	0880      	lsrs	r0, r0, #2
 8002632:	d00d      	beq.n	8002650 <forward_acos+0x84>
 8002634:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002638:	3910      	subs	r1, #16
 800263a:	68ca      	ldr	r2, [r1, #12]
 800263c:	688e      	ldr	r6, [r1, #8]
 800263e:	684f      	ldr	r7, [r1, #4]
 8002640:	4372      	muls	r2, r6
 8002642:	f851 6910 	ldr.w	r6, [r1], #-16
 8002646:	437a      	muls	r2, r7
 8002648:	4372      	muls	r2, r6
 800264a:	4355      	muls	r5, r2
 800264c:	1e40      	subs	r0, r0, #1
 800264e:	d1f4      	bne.n	800263a <forward_acos+0x6e>
 8002650:	6998      	ldr	r0, [r3, #24]
 8002652:	6886      	ldr	r6, [r0, #8]
 8002654:	6821      	ldr	r1, [r4, #0]
 8002656:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800265a:	1f07      	subs	r7, r0, #4
 800265c:	6888      	ldr	r0, [r1, #8]
 800265e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002662:	1f14      	subs	r4, r2, #4
 8002664:	42b7      	cmp	r7, r6
 8002666:	d309      	bcc.n	800267c <forward_acos+0xb0>
 8002668:	ed97 0a00 	vldr	s0, [r7]
 800266c:	f00d fc2c 	bl	800fec8 <acosf>
 8002670:	ed84 0a00 	vstr	s0, [r4]
 8002674:	1f3f      	subs	r7, r7, #4
 8002676:	1f24      	subs	r4, r4, #4
 8002678:	42b7      	cmp	r7, r6
 800267a:	d2f5      	bcs.n	8002668 <forward_acos+0x9c>
 800267c:	b001      	add	sp, #4
 800267e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002680 <nl_func_acosh_array_f32>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	688c      	ldr	r4, [r1, #8]
 8002684:	6880      	ldr	r0, [r0, #8]
 8002686:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800268a:	1f0d      	subs	r5, r1, #4
 800268c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002690:	1f0e      	subs	r6, r1, #4
 8002692:	42a5      	cmp	r5, r4
 8002694:	f0c0 800a 	bcc.w	80026ac <nl_func_acosh_array_f32+0x2c>
 8002698:	ed95 0a00 	vldr	s0, [r5]
 800269c:	f00d fc6c 	bl	800ff78 <acoshf>
 80026a0:	ed86 0a00 	vstr	s0, [r6]
 80026a4:	1f2d      	subs	r5, r5, #4
 80026a6:	1f36      	subs	r6, r6, #4
 80026a8:	42a5      	cmp	r5, r4
 80026aa:	d2f5      	bcs.n	8002698 <nl_func_acosh_array_f32+0x18>
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b0 <forward_acosh>:
 80026b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b2:	b081      	sub	sp, #4
 80026b4:	6942      	ldr	r2, [r0, #20]
 80026b6:	8811      	ldrh	r1, [r2, #0]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	bf1a      	itte	ne
 80026bc:	6850      	ldrne	r0, [r2, #4]
 80026be:	1d00      	addne	r0, r0, #4
 80026c0:	2004      	moveq	r0, #4
 80026c2:	f04f 0501 	mov.w	r5, #1
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	2800      	cmp	r0, #0
 80026ca:	bf14      	ite	ne
 80026cc:	6803      	ldrne	r3, [r0, #0]
 80026ce:	2300      	moveq	r3, #0
 80026d0:	2902      	cmp	r1, #2
 80026d2:	bfa6      	itte	ge
 80026d4:	6850      	ldrge	r0, [r2, #4]
 80026d6:	3010      	addge	r0, #16
 80026d8:	2004      	movlt	r0, #4
 80026da:	6800      	ldr	r0, [r0, #0]
 80026dc:	2800      	cmp	r0, #0
 80026de:	bf19      	ittee	ne
 80026e0:	6800      	ldrne	r0, [r0, #0]
 80026e2:	f100 0418 	addne.w	r4, r0, #24
 80026e6:	2100      	moveq	r1, #0
 80026e8:	f101 0418 	addeq.w	r4, r1, #24
 80026ec:	f103 0108 	add.w	r1, r3, #8
 80026f0:	680a      	ldr	r2, [r1, #0]
 80026f2:	0a12      	lsrs	r2, r2, #8
 80026f4:	d01e      	beq.n	8002734 <forward_acosh+0x84>
 80026f6:	684e      	ldr	r6, [r1, #4]
 80026f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026fc:	4610      	mov	r0, r2
 80026fe:	1f0f      	subs	r7, r1, #4
 8002700:	f010 0103 	ands.w	r1, r0, #3
 8002704:	d006      	beq.n	8002714 <forward_acosh+0x64>
 8002706:	1e52      	subs	r2, r2, #1
 8002708:	f857 c904 	ldr.w	ip, [r7], #-4
 800270c:	1e49      	subs	r1, r1, #1
 800270e:	fb0c f505 	mul.w	r5, ip, r5
 8002712:	d1f8      	bne.n	8002706 <forward_acosh+0x56>
 8002714:	0880      	lsrs	r0, r0, #2
 8002716:	d00d      	beq.n	8002734 <forward_acosh+0x84>
 8002718:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800271c:	3910      	subs	r1, #16
 800271e:	68ca      	ldr	r2, [r1, #12]
 8002720:	688e      	ldr	r6, [r1, #8]
 8002722:	684f      	ldr	r7, [r1, #4]
 8002724:	4372      	muls	r2, r6
 8002726:	f851 6910 	ldr.w	r6, [r1], #-16
 800272a:	437a      	muls	r2, r7
 800272c:	4372      	muls	r2, r6
 800272e:	4355      	muls	r5, r2
 8002730:	1e40      	subs	r0, r0, #1
 8002732:	d1f4      	bne.n	800271e <forward_acosh+0x6e>
 8002734:	6998      	ldr	r0, [r3, #24]
 8002736:	6886      	ldr	r6, [r0, #8]
 8002738:	6821      	ldr	r1, [r4, #0]
 800273a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800273e:	1f07      	subs	r7, r0, #4
 8002740:	6888      	ldr	r0, [r1, #8]
 8002742:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002746:	1f14      	subs	r4, r2, #4
 8002748:	42b7      	cmp	r7, r6
 800274a:	d309      	bcc.n	8002760 <forward_acosh+0xb0>
 800274c:	ed97 0a00 	vldr	s0, [r7]
 8002750:	f00d fc12 	bl	800ff78 <acoshf>
 8002754:	ed84 0a00 	vstr	s0, [r4]
 8002758:	1f3f      	subs	r7, r7, #4
 800275a:	1f24      	subs	r4, r4, #4
 800275c:	42b7      	cmp	r7, r6
 800275e:	d2f5      	bcs.n	800274c <forward_acosh+0x9c>
 8002760:	b001      	add	sp, #4
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <nl_func_asin_array_f32>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	688c      	ldr	r4, [r1, #8]
 8002768:	6880      	ldr	r0, [r0, #8]
 800276a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800276e:	1f0d      	subs	r5, r1, #4
 8002770:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002774:	1f0e      	subs	r6, r1, #4
 8002776:	42a5      	cmp	r5, r4
 8002778:	f0c0 800a 	bcc.w	8002790 <nl_func_asin_array_f32+0x2c>
 800277c:	ed95 0a00 	vldr	s0, [r5]
 8002780:	f00d fc4a 	bl	8010018 <asinf>
 8002784:	ed86 0a00 	vstr	s0, [r6]
 8002788:	1f2d      	subs	r5, r5, #4
 800278a:	1f36      	subs	r6, r6, #4
 800278c:	42a5      	cmp	r5, r4
 800278e:	d2f5      	bcs.n	800277c <nl_func_asin_array_f32+0x18>
 8002790:	bd70      	pop	{r4, r5, r6, pc}
	...

08002794 <forward_asin>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	b081      	sub	sp, #4
 8002798:	6942      	ldr	r2, [r0, #20]
 800279a:	8811      	ldrh	r1, [r2, #0]
 800279c:	2900      	cmp	r1, #0
 800279e:	bf1a      	itte	ne
 80027a0:	6850      	ldrne	r0, [r2, #4]
 80027a2:	1d00      	addne	r0, r0, #4
 80027a4:	2004      	moveq	r0, #4
 80027a6:	f04f 0501 	mov.w	r5, #1
 80027aa:	6800      	ldr	r0, [r0, #0]
 80027ac:	2800      	cmp	r0, #0
 80027ae:	bf14      	ite	ne
 80027b0:	6803      	ldrne	r3, [r0, #0]
 80027b2:	2300      	moveq	r3, #0
 80027b4:	2902      	cmp	r1, #2
 80027b6:	bfa6      	itte	ge
 80027b8:	6850      	ldrge	r0, [r2, #4]
 80027ba:	3010      	addge	r0, #16
 80027bc:	2004      	movlt	r0, #4
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	2800      	cmp	r0, #0
 80027c2:	bf19      	ittee	ne
 80027c4:	6800      	ldrne	r0, [r0, #0]
 80027c6:	f100 0418 	addne.w	r4, r0, #24
 80027ca:	2100      	moveq	r1, #0
 80027cc:	f101 0418 	addeq.w	r4, r1, #24
 80027d0:	f103 0108 	add.w	r1, r3, #8
 80027d4:	680a      	ldr	r2, [r1, #0]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	d01e      	beq.n	8002818 <forward_asin+0x84>
 80027da:	684e      	ldr	r6, [r1, #4]
 80027dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027e0:	4610      	mov	r0, r2
 80027e2:	1f0f      	subs	r7, r1, #4
 80027e4:	f010 0103 	ands.w	r1, r0, #3
 80027e8:	d006      	beq.n	80027f8 <forward_asin+0x64>
 80027ea:	1e52      	subs	r2, r2, #1
 80027ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80027f0:	1e49      	subs	r1, r1, #1
 80027f2:	fb0c f505 	mul.w	r5, ip, r5
 80027f6:	d1f8      	bne.n	80027ea <forward_asin+0x56>
 80027f8:	0880      	lsrs	r0, r0, #2
 80027fa:	d00d      	beq.n	8002818 <forward_asin+0x84>
 80027fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002800:	3910      	subs	r1, #16
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	688e      	ldr	r6, [r1, #8]
 8002806:	684f      	ldr	r7, [r1, #4]
 8002808:	4372      	muls	r2, r6
 800280a:	f851 6910 	ldr.w	r6, [r1], #-16
 800280e:	437a      	muls	r2, r7
 8002810:	4372      	muls	r2, r6
 8002812:	4355      	muls	r5, r2
 8002814:	1e40      	subs	r0, r0, #1
 8002816:	d1f4      	bne.n	8002802 <forward_asin+0x6e>
 8002818:	6998      	ldr	r0, [r3, #24]
 800281a:	6886      	ldr	r6, [r0, #8]
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002822:	1f07      	subs	r7, r0, #4
 8002824:	6888      	ldr	r0, [r1, #8]
 8002826:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800282a:	1f14      	subs	r4, r2, #4
 800282c:	42b7      	cmp	r7, r6
 800282e:	d309      	bcc.n	8002844 <forward_asin+0xb0>
 8002830:	ed97 0a00 	vldr	s0, [r7]
 8002834:	f00d fbf0 	bl	8010018 <asinf>
 8002838:	ed84 0a00 	vstr	s0, [r4]
 800283c:	1f3f      	subs	r7, r7, #4
 800283e:	1f24      	subs	r4, r4, #4
 8002840:	42b7      	cmp	r7, r6
 8002842:	d2f5      	bcs.n	8002830 <forward_asin+0x9c>
 8002844:	b001      	add	sp, #4
 8002846:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002848 <nl_func_asinh_array_f32>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	688c      	ldr	r4, [r1, #8]
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002852:	1f0d      	subs	r5, r1, #4
 8002854:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002858:	1f0e      	subs	r6, r1, #4
 800285a:	42a5      	cmp	r5, r4
 800285c:	f0c0 800a 	bcc.w	8002874 <nl_func_asinh_array_f32+0x2c>
 8002860:	ed95 0a00 	vldr	s0, [r5]
 8002864:	f00c fd60 	bl	800f328 <asinhf>
 8002868:	ed86 0a00 	vstr	s0, [r6]
 800286c:	1f2d      	subs	r5, r5, #4
 800286e:	1f36      	subs	r6, r6, #4
 8002870:	42a5      	cmp	r5, r4
 8002872:	d2f5      	bcs.n	8002860 <nl_func_asinh_array_f32+0x18>
 8002874:	bd70      	pop	{r4, r5, r6, pc}
	...

08002878 <forward_asinh>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b081      	sub	sp, #4
 800287c:	6942      	ldr	r2, [r0, #20]
 800287e:	8811      	ldrh	r1, [r2, #0]
 8002880:	2900      	cmp	r1, #0
 8002882:	bf1a      	itte	ne
 8002884:	6850      	ldrne	r0, [r2, #4]
 8002886:	1d00      	addne	r0, r0, #4
 8002888:	2004      	moveq	r0, #4
 800288a:	f04f 0501 	mov.w	r5, #1
 800288e:	6800      	ldr	r0, [r0, #0]
 8002890:	2800      	cmp	r0, #0
 8002892:	bf14      	ite	ne
 8002894:	6803      	ldrne	r3, [r0, #0]
 8002896:	2300      	moveq	r3, #0
 8002898:	2902      	cmp	r1, #2
 800289a:	bfa6      	itte	ge
 800289c:	6850      	ldrge	r0, [r2, #4]
 800289e:	3010      	addge	r0, #16
 80028a0:	2004      	movlt	r0, #4
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bf19      	ittee	ne
 80028a8:	6800      	ldrne	r0, [r0, #0]
 80028aa:	f100 0418 	addne.w	r4, r0, #24
 80028ae:	2100      	moveq	r1, #0
 80028b0:	f101 0418 	addeq.w	r4, r1, #24
 80028b4:	f103 0108 	add.w	r1, r3, #8
 80028b8:	680a      	ldr	r2, [r1, #0]
 80028ba:	0a12      	lsrs	r2, r2, #8
 80028bc:	d01e      	beq.n	80028fc <forward_asinh+0x84>
 80028be:	684e      	ldr	r6, [r1, #4]
 80028c0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028c4:	4610      	mov	r0, r2
 80028c6:	1f0f      	subs	r7, r1, #4
 80028c8:	f010 0103 	ands.w	r1, r0, #3
 80028cc:	d006      	beq.n	80028dc <forward_asinh+0x64>
 80028ce:	1e52      	subs	r2, r2, #1
 80028d0:	f857 c904 	ldr.w	ip, [r7], #-4
 80028d4:	1e49      	subs	r1, r1, #1
 80028d6:	fb0c f505 	mul.w	r5, ip, r5
 80028da:	d1f8      	bne.n	80028ce <forward_asinh+0x56>
 80028dc:	0880      	lsrs	r0, r0, #2
 80028de:	d00d      	beq.n	80028fc <forward_asinh+0x84>
 80028e0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028e4:	3910      	subs	r1, #16
 80028e6:	68ca      	ldr	r2, [r1, #12]
 80028e8:	688e      	ldr	r6, [r1, #8]
 80028ea:	684f      	ldr	r7, [r1, #4]
 80028ec:	4372      	muls	r2, r6
 80028ee:	f851 6910 	ldr.w	r6, [r1], #-16
 80028f2:	437a      	muls	r2, r7
 80028f4:	4372      	muls	r2, r6
 80028f6:	4355      	muls	r5, r2
 80028f8:	1e40      	subs	r0, r0, #1
 80028fa:	d1f4      	bne.n	80028e6 <forward_asinh+0x6e>
 80028fc:	6998      	ldr	r0, [r3, #24]
 80028fe:	6886      	ldr	r6, [r0, #8]
 8002900:	6821      	ldr	r1, [r4, #0]
 8002902:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002906:	1f07      	subs	r7, r0, #4
 8002908:	6888      	ldr	r0, [r1, #8]
 800290a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800290e:	1f14      	subs	r4, r2, #4
 8002910:	42b7      	cmp	r7, r6
 8002912:	d309      	bcc.n	8002928 <forward_asinh+0xb0>
 8002914:	ed97 0a00 	vldr	s0, [r7]
 8002918:	f00c fd06 	bl	800f328 <asinhf>
 800291c:	ed84 0a00 	vstr	s0, [r4]
 8002920:	1f3f      	subs	r7, r7, #4
 8002922:	1f24      	subs	r4, r4, #4
 8002924:	42b7      	cmp	r7, r6
 8002926:	d2f5      	bcs.n	8002914 <forward_asinh+0x9c>
 8002928:	b001      	add	sp, #4
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800292c <nl_func_atan_array_f32>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	688c      	ldr	r4, [r1, #8]
 8002930:	6880      	ldr	r0, [r0, #8]
 8002932:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002936:	1f0d      	subs	r5, r1, #4
 8002938:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800293c:	1f0e      	subs	r6, r1, #4
 800293e:	42a5      	cmp	r5, r4
 8002940:	f0c0 800a 	bcc.w	8002958 <nl_func_atan_array_f32+0x2c>
 8002944:	ed95 0a00 	vldr	s0, [r5]
 8002948:	f00c fd56 	bl	800f3f8 <atanf>
 800294c:	ed86 0a00 	vstr	s0, [r6]
 8002950:	1f2d      	subs	r5, r5, #4
 8002952:	1f36      	subs	r6, r6, #4
 8002954:	42a5      	cmp	r5, r4
 8002956:	d2f5      	bcs.n	8002944 <nl_func_atan_array_f32+0x18>
 8002958:	bd70      	pop	{r4, r5, r6, pc}
	...

0800295c <forward_atan>:
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b081      	sub	sp, #4
 8002960:	6942      	ldr	r2, [r0, #20]
 8002962:	8811      	ldrh	r1, [r2, #0]
 8002964:	2900      	cmp	r1, #0
 8002966:	bf1a      	itte	ne
 8002968:	6850      	ldrne	r0, [r2, #4]
 800296a:	1d00      	addne	r0, r0, #4
 800296c:	2004      	moveq	r0, #4
 800296e:	f04f 0501 	mov.w	r5, #1
 8002972:	6800      	ldr	r0, [r0, #0]
 8002974:	2800      	cmp	r0, #0
 8002976:	bf14      	ite	ne
 8002978:	6803      	ldrne	r3, [r0, #0]
 800297a:	2300      	moveq	r3, #0
 800297c:	2902      	cmp	r1, #2
 800297e:	bfa6      	itte	ge
 8002980:	6850      	ldrge	r0, [r2, #4]
 8002982:	3010      	addge	r0, #16
 8002984:	2004      	movlt	r0, #4
 8002986:	6800      	ldr	r0, [r0, #0]
 8002988:	2800      	cmp	r0, #0
 800298a:	bf19      	ittee	ne
 800298c:	6800      	ldrne	r0, [r0, #0]
 800298e:	f100 0418 	addne.w	r4, r0, #24
 8002992:	2100      	moveq	r1, #0
 8002994:	f101 0418 	addeq.w	r4, r1, #24
 8002998:	f103 0108 	add.w	r1, r3, #8
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	0a12      	lsrs	r2, r2, #8
 80029a0:	d01e      	beq.n	80029e0 <forward_atan+0x84>
 80029a2:	684e      	ldr	r6, [r1, #4]
 80029a4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a8:	4610      	mov	r0, r2
 80029aa:	1f0f      	subs	r7, r1, #4
 80029ac:	f010 0103 	ands.w	r1, r0, #3
 80029b0:	d006      	beq.n	80029c0 <forward_atan+0x64>
 80029b2:	1e52      	subs	r2, r2, #1
 80029b4:	f857 c904 	ldr.w	ip, [r7], #-4
 80029b8:	1e49      	subs	r1, r1, #1
 80029ba:	fb0c f505 	mul.w	r5, ip, r5
 80029be:	d1f8      	bne.n	80029b2 <forward_atan+0x56>
 80029c0:	0880      	lsrs	r0, r0, #2
 80029c2:	d00d      	beq.n	80029e0 <forward_atan+0x84>
 80029c4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029c8:	3910      	subs	r1, #16
 80029ca:	68ca      	ldr	r2, [r1, #12]
 80029cc:	688e      	ldr	r6, [r1, #8]
 80029ce:	684f      	ldr	r7, [r1, #4]
 80029d0:	4372      	muls	r2, r6
 80029d2:	f851 6910 	ldr.w	r6, [r1], #-16
 80029d6:	437a      	muls	r2, r7
 80029d8:	4372      	muls	r2, r6
 80029da:	4355      	muls	r5, r2
 80029dc:	1e40      	subs	r0, r0, #1
 80029de:	d1f4      	bne.n	80029ca <forward_atan+0x6e>
 80029e0:	6998      	ldr	r0, [r3, #24]
 80029e2:	6886      	ldr	r6, [r0, #8]
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029ea:	1f07      	subs	r7, r0, #4
 80029ec:	6888      	ldr	r0, [r1, #8]
 80029ee:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029f2:	1f14      	subs	r4, r2, #4
 80029f4:	42b7      	cmp	r7, r6
 80029f6:	d309      	bcc.n	8002a0c <forward_atan+0xb0>
 80029f8:	ed97 0a00 	vldr	s0, [r7]
 80029fc:	f00c fcfc 	bl	800f3f8 <atanf>
 8002a00:	ed84 0a00 	vstr	s0, [r4]
 8002a04:	1f3f      	subs	r7, r7, #4
 8002a06:	1f24      	subs	r4, r4, #4
 8002a08:	42b7      	cmp	r7, r6
 8002a0a:	d2f5      	bcs.n	80029f8 <forward_atan+0x9c>
 8002a0c:	b001      	add	sp, #4
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a10 <nl_func_atanh_array_f32>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	688c      	ldr	r4, [r1, #8]
 8002a14:	6880      	ldr	r0, [r0, #8]
 8002a16:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002a1a:	1f0d      	subs	r5, r1, #4
 8002a1c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002a20:	1f0e      	subs	r6, r1, #4
 8002a22:	42a5      	cmp	r5, r4
 8002a24:	f0c0 800a 	bcc.w	8002a3c <nl_func_atanh_array_f32+0x2c>
 8002a28:	ed95 0a00 	vldr	s0, [r5]
 8002a2c:	f00d fb4c 	bl	80100c8 <atanhf>
 8002a30:	ed86 0a00 	vstr	s0, [r6]
 8002a34:	1f2d      	subs	r5, r5, #4
 8002a36:	1f36      	subs	r6, r6, #4
 8002a38:	42a5      	cmp	r5, r4
 8002a3a:	d2f5      	bcs.n	8002a28 <nl_func_atanh_array_f32+0x18>
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a40 <forward_atanh>:
 8002a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a42:	b081      	sub	sp, #4
 8002a44:	6942      	ldr	r2, [r0, #20]
 8002a46:	8811      	ldrh	r1, [r2, #0]
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	bf1a      	itte	ne
 8002a4c:	6850      	ldrne	r0, [r2, #4]
 8002a4e:	1d00      	addne	r0, r0, #4
 8002a50:	2004      	moveq	r0, #4
 8002a52:	f04f 0501 	mov.w	r5, #1
 8002a56:	6800      	ldr	r0, [r0, #0]
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	6803      	ldrne	r3, [r0, #0]
 8002a5e:	2300      	moveq	r3, #0
 8002a60:	2902      	cmp	r1, #2
 8002a62:	bfa6      	itte	ge
 8002a64:	6850      	ldrge	r0, [r2, #4]
 8002a66:	3010      	addge	r0, #16
 8002a68:	2004      	movlt	r0, #4
 8002a6a:	6800      	ldr	r0, [r0, #0]
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	bf19      	ittee	ne
 8002a70:	6800      	ldrne	r0, [r0, #0]
 8002a72:	f100 0418 	addne.w	r4, r0, #24
 8002a76:	2100      	moveq	r1, #0
 8002a78:	f101 0418 	addeq.w	r4, r1, #24
 8002a7c:	f103 0108 	add.w	r1, r3, #8
 8002a80:	680a      	ldr	r2, [r1, #0]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	d01e      	beq.n	8002ac4 <forward_atanh+0x84>
 8002a86:	684e      	ldr	r6, [r1, #4]
 8002a88:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	1f0f      	subs	r7, r1, #4
 8002a90:	f010 0103 	ands.w	r1, r0, #3
 8002a94:	d006      	beq.n	8002aa4 <forward_atanh+0x64>
 8002a96:	1e52      	subs	r2, r2, #1
 8002a98:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a9c:	1e49      	subs	r1, r1, #1
 8002a9e:	fb0c f505 	mul.w	r5, ip, r5
 8002aa2:	d1f8      	bne.n	8002a96 <forward_atanh+0x56>
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	d00d      	beq.n	8002ac4 <forward_atanh+0x84>
 8002aa8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002aac:	3910      	subs	r1, #16
 8002aae:	68ca      	ldr	r2, [r1, #12]
 8002ab0:	688e      	ldr	r6, [r1, #8]
 8002ab2:	684f      	ldr	r7, [r1, #4]
 8002ab4:	4372      	muls	r2, r6
 8002ab6:	f851 6910 	ldr.w	r6, [r1], #-16
 8002aba:	437a      	muls	r2, r7
 8002abc:	4372      	muls	r2, r6
 8002abe:	4355      	muls	r5, r2
 8002ac0:	1e40      	subs	r0, r0, #1
 8002ac2:	d1f4      	bne.n	8002aae <forward_atanh+0x6e>
 8002ac4:	6998      	ldr	r0, [r3, #24]
 8002ac6:	6886      	ldr	r6, [r0, #8]
 8002ac8:	6821      	ldr	r1, [r4, #0]
 8002aca:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ace:	1f07      	subs	r7, r0, #4
 8002ad0:	6888      	ldr	r0, [r1, #8]
 8002ad2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002ad6:	1f14      	subs	r4, r2, #4
 8002ad8:	42b7      	cmp	r7, r6
 8002ada:	d309      	bcc.n	8002af0 <forward_atanh+0xb0>
 8002adc:	ed97 0a00 	vldr	s0, [r7]
 8002ae0:	f00d faf2 	bl	80100c8 <atanhf>
 8002ae4:	ed84 0a00 	vstr	s0, [r4]
 8002ae8:	1f3f      	subs	r7, r7, #4
 8002aea:	1f24      	subs	r4, r4, #4
 8002aec:	42b7      	cmp	r7, r6
 8002aee:	d2f5      	bcs.n	8002adc <forward_atanh+0x9c>
 8002af0:	b001      	add	sp, #4
 8002af2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af4 <nl_func_cos_array_f32>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	688c      	ldr	r4, [r1, #8]
 8002af8:	6880      	ldr	r0, [r0, #8]
 8002afa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002afe:	1f0d      	subs	r5, r1, #4
 8002b00:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002b04:	1f0e      	subs	r6, r1, #4
 8002b06:	42a5      	cmp	r5, r4
 8002b08:	f0c0 800a 	bcc.w	8002b20 <nl_func_cos_array_f32+0x2c>
 8002b0c:	ed95 0a00 	vldr	s0, [r5]
 8002b10:	f00c fd86 	bl	800f620 <cosf>
 8002b14:	ed86 0a00 	vstr	s0, [r6]
 8002b18:	1f2d      	subs	r5, r5, #4
 8002b1a:	1f36      	subs	r6, r6, #4
 8002b1c:	42a5      	cmp	r5, r4
 8002b1e:	d2f5      	bcs.n	8002b0c <nl_func_cos_array_f32+0x18>
 8002b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b24 <forward_cos>:
 8002b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b26:	b081      	sub	sp, #4
 8002b28:	6942      	ldr	r2, [r0, #20]
 8002b2a:	8811      	ldrh	r1, [r2, #0]
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	bf1a      	itte	ne
 8002b30:	6850      	ldrne	r0, [r2, #4]
 8002b32:	1d00      	addne	r0, r0, #4
 8002b34:	2004      	moveq	r0, #4
 8002b36:	f04f 0501 	mov.w	r5, #1
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	6803      	ldrne	r3, [r0, #0]
 8002b42:	2300      	moveq	r3, #0
 8002b44:	2902      	cmp	r1, #2
 8002b46:	bfa6      	itte	ge
 8002b48:	6850      	ldrge	r0, [r2, #4]
 8002b4a:	3010      	addge	r0, #16
 8002b4c:	2004      	movlt	r0, #4
 8002b4e:	6800      	ldr	r0, [r0, #0]
 8002b50:	2800      	cmp	r0, #0
 8002b52:	bf19      	ittee	ne
 8002b54:	6800      	ldrne	r0, [r0, #0]
 8002b56:	f100 0418 	addne.w	r4, r0, #24
 8002b5a:	2100      	moveq	r1, #0
 8002b5c:	f101 0418 	addeq.w	r4, r1, #24
 8002b60:	f103 0108 	add.w	r1, r3, #8
 8002b64:	680a      	ldr	r2, [r1, #0]
 8002b66:	0a12      	lsrs	r2, r2, #8
 8002b68:	d01e      	beq.n	8002ba8 <forward_cos+0x84>
 8002b6a:	684e      	ldr	r6, [r1, #4]
 8002b6c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b70:	4610      	mov	r0, r2
 8002b72:	1f0f      	subs	r7, r1, #4
 8002b74:	f010 0103 	ands.w	r1, r0, #3
 8002b78:	d006      	beq.n	8002b88 <forward_cos+0x64>
 8002b7a:	1e52      	subs	r2, r2, #1
 8002b7c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b80:	1e49      	subs	r1, r1, #1
 8002b82:	fb0c f505 	mul.w	r5, ip, r5
 8002b86:	d1f8      	bne.n	8002b7a <forward_cos+0x56>
 8002b88:	0880      	lsrs	r0, r0, #2
 8002b8a:	d00d      	beq.n	8002ba8 <forward_cos+0x84>
 8002b8c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b90:	3910      	subs	r1, #16
 8002b92:	68ca      	ldr	r2, [r1, #12]
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	684f      	ldr	r7, [r1, #4]
 8002b98:	4372      	muls	r2, r6
 8002b9a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b9e:	437a      	muls	r2, r7
 8002ba0:	4372      	muls	r2, r6
 8002ba2:	4355      	muls	r5, r2
 8002ba4:	1e40      	subs	r0, r0, #1
 8002ba6:	d1f4      	bne.n	8002b92 <forward_cos+0x6e>
 8002ba8:	6998      	ldr	r0, [r3, #24]
 8002baa:	6886      	ldr	r6, [r0, #8]
 8002bac:	6821      	ldr	r1, [r4, #0]
 8002bae:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002bb2:	1f07      	subs	r7, r0, #4
 8002bb4:	6888      	ldr	r0, [r1, #8]
 8002bb6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002bba:	1f14      	subs	r4, r2, #4
 8002bbc:	42b7      	cmp	r7, r6
 8002bbe:	d309      	bcc.n	8002bd4 <forward_cos+0xb0>
 8002bc0:	ed97 0a00 	vldr	s0, [r7]
 8002bc4:	f00c fd2c 	bl	800f620 <cosf>
 8002bc8:	ed84 0a00 	vstr	s0, [r4]
 8002bcc:	1f3f      	subs	r7, r7, #4
 8002bce:	1f24      	subs	r4, r4, #4
 8002bd0:	42b7      	cmp	r7, r6
 8002bd2:	d2f5      	bcs.n	8002bc0 <forward_cos+0x9c>
 8002bd4:	b001      	add	sp, #4
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bd8 <nl_func_cosh_array_f32>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	688c      	ldr	r4, [r1, #8]
 8002bdc:	6880      	ldr	r0, [r0, #8]
 8002bde:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002be2:	1f0d      	subs	r5, r1, #4
 8002be4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002be8:	1f0e      	subs	r6, r1, #4
 8002bea:	42a5      	cmp	r5, r4
 8002bec:	f0c0 800a 	bcc.w	8002c04 <nl_func_cosh_array_f32+0x2c>
 8002bf0:	ed95 0a00 	vldr	s0, [r5]
 8002bf4:	f00d fadc 	bl	80101b0 <coshf>
 8002bf8:	ed86 0a00 	vstr	s0, [r6]
 8002bfc:	1f2d      	subs	r5, r5, #4
 8002bfe:	1f36      	subs	r6, r6, #4
 8002c00:	42a5      	cmp	r5, r4
 8002c02:	d2f5      	bcs.n	8002bf0 <nl_func_cosh_array_f32+0x18>
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c08 <forward_cosh>:
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b081      	sub	sp, #4
 8002c0c:	6942      	ldr	r2, [r0, #20]
 8002c0e:	8811      	ldrh	r1, [r2, #0]
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bf1a      	itte	ne
 8002c14:	6850      	ldrne	r0, [r2, #4]
 8002c16:	1d00      	addne	r0, r0, #4
 8002c18:	2004      	moveq	r0, #4
 8002c1a:	f04f 0501 	mov.w	r5, #1
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	2800      	cmp	r0, #0
 8002c22:	bf14      	ite	ne
 8002c24:	6803      	ldrne	r3, [r0, #0]
 8002c26:	2300      	moveq	r3, #0
 8002c28:	2902      	cmp	r1, #2
 8002c2a:	bfa6      	itte	ge
 8002c2c:	6850      	ldrge	r0, [r2, #4]
 8002c2e:	3010      	addge	r0, #16
 8002c30:	2004      	movlt	r0, #4
 8002c32:	6800      	ldr	r0, [r0, #0]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	bf19      	ittee	ne
 8002c38:	6800      	ldrne	r0, [r0, #0]
 8002c3a:	f100 0418 	addne.w	r4, r0, #24
 8002c3e:	2100      	moveq	r1, #0
 8002c40:	f101 0418 	addeq.w	r4, r1, #24
 8002c44:	f103 0108 	add.w	r1, r3, #8
 8002c48:	680a      	ldr	r2, [r1, #0]
 8002c4a:	0a12      	lsrs	r2, r2, #8
 8002c4c:	d01e      	beq.n	8002c8c <forward_cosh+0x84>
 8002c4e:	684e      	ldr	r6, [r1, #4]
 8002c50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c54:	4610      	mov	r0, r2
 8002c56:	1f0f      	subs	r7, r1, #4
 8002c58:	f010 0103 	ands.w	r1, r0, #3
 8002c5c:	d006      	beq.n	8002c6c <forward_cosh+0x64>
 8002c5e:	1e52      	subs	r2, r2, #1
 8002c60:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c64:	1e49      	subs	r1, r1, #1
 8002c66:	fb0c f505 	mul.w	r5, ip, r5
 8002c6a:	d1f8      	bne.n	8002c5e <forward_cosh+0x56>
 8002c6c:	0880      	lsrs	r0, r0, #2
 8002c6e:	d00d      	beq.n	8002c8c <forward_cosh+0x84>
 8002c70:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c74:	3910      	subs	r1, #16
 8002c76:	68ca      	ldr	r2, [r1, #12]
 8002c78:	688e      	ldr	r6, [r1, #8]
 8002c7a:	684f      	ldr	r7, [r1, #4]
 8002c7c:	4372      	muls	r2, r6
 8002c7e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c82:	437a      	muls	r2, r7
 8002c84:	4372      	muls	r2, r6
 8002c86:	4355      	muls	r5, r2
 8002c88:	1e40      	subs	r0, r0, #1
 8002c8a:	d1f4      	bne.n	8002c76 <forward_cosh+0x6e>
 8002c8c:	6998      	ldr	r0, [r3, #24]
 8002c8e:	6886      	ldr	r6, [r0, #8]
 8002c90:	6821      	ldr	r1, [r4, #0]
 8002c92:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c96:	1f07      	subs	r7, r0, #4
 8002c98:	6888      	ldr	r0, [r1, #8]
 8002c9a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c9e:	1f14      	subs	r4, r2, #4
 8002ca0:	42b7      	cmp	r7, r6
 8002ca2:	d309      	bcc.n	8002cb8 <forward_cosh+0xb0>
 8002ca4:	ed97 0a00 	vldr	s0, [r7]
 8002ca8:	f00d fa82 	bl	80101b0 <coshf>
 8002cac:	ed84 0a00 	vstr	s0, [r4]
 8002cb0:	1f3f      	subs	r7, r7, #4
 8002cb2:	1f24      	subs	r4, r4, #4
 8002cb4:	42b7      	cmp	r7, r6
 8002cb6:	d2f5      	bcs.n	8002ca4 <forward_cosh+0x9c>
 8002cb8:	b001      	add	sp, #4
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <nl_func_erf_array_f32>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	688c      	ldr	r4, [r1, #8]
 8002cc0:	6880      	ldr	r0, [r0, #8]
 8002cc2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002cc6:	1f0d      	subs	r5, r1, #4
 8002cc8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ccc:	1f0e      	subs	r6, r1, #4
 8002cce:	42a5      	cmp	r5, r4
 8002cd0:	f0c0 800a 	bcc.w	8002ce8 <nl_func_erf_array_f32+0x2c>
 8002cd4:	ed95 0a00 	vldr	s0, [r5]
 8002cd8:	f00c fce2 	bl	800f6a0 <erff>
 8002cdc:	ed86 0a00 	vstr	s0, [r6]
 8002ce0:	1f2d      	subs	r5, r5, #4
 8002ce2:	1f36      	subs	r6, r6, #4
 8002ce4:	42a5      	cmp	r5, r4
 8002ce6:	d2f5      	bcs.n	8002cd4 <nl_func_erf_array_f32+0x18>
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cec <forward_erf>:
 8002cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cee:	b081      	sub	sp, #4
 8002cf0:	6942      	ldr	r2, [r0, #20]
 8002cf2:	8811      	ldrh	r1, [r2, #0]
 8002cf4:	2900      	cmp	r1, #0
 8002cf6:	bf1a      	itte	ne
 8002cf8:	6850      	ldrne	r0, [r2, #4]
 8002cfa:	1d00      	addne	r0, r0, #4
 8002cfc:	2004      	moveq	r0, #4
 8002cfe:	f04f 0501 	mov.w	r5, #1
 8002d02:	6800      	ldr	r0, [r0, #0]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	bf14      	ite	ne
 8002d08:	6803      	ldrne	r3, [r0, #0]
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	2902      	cmp	r1, #2
 8002d0e:	bfa6      	itte	ge
 8002d10:	6850      	ldrge	r0, [r2, #4]
 8002d12:	3010      	addge	r0, #16
 8002d14:	2004      	movlt	r0, #4
 8002d16:	6800      	ldr	r0, [r0, #0]
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	bf19      	ittee	ne
 8002d1c:	6800      	ldrne	r0, [r0, #0]
 8002d1e:	f100 0418 	addne.w	r4, r0, #24
 8002d22:	2100      	moveq	r1, #0
 8002d24:	f101 0418 	addeq.w	r4, r1, #24
 8002d28:	f103 0108 	add.w	r1, r3, #8
 8002d2c:	680a      	ldr	r2, [r1, #0]
 8002d2e:	0a12      	lsrs	r2, r2, #8
 8002d30:	d01e      	beq.n	8002d70 <forward_erf+0x84>
 8002d32:	684e      	ldr	r6, [r1, #4]
 8002d34:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d38:	4610      	mov	r0, r2
 8002d3a:	1f0f      	subs	r7, r1, #4
 8002d3c:	f010 0103 	ands.w	r1, r0, #3
 8002d40:	d006      	beq.n	8002d50 <forward_erf+0x64>
 8002d42:	1e52      	subs	r2, r2, #1
 8002d44:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d48:	1e49      	subs	r1, r1, #1
 8002d4a:	fb0c f505 	mul.w	r5, ip, r5
 8002d4e:	d1f8      	bne.n	8002d42 <forward_erf+0x56>
 8002d50:	0880      	lsrs	r0, r0, #2
 8002d52:	d00d      	beq.n	8002d70 <forward_erf+0x84>
 8002d54:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d58:	3910      	subs	r1, #16
 8002d5a:	68ca      	ldr	r2, [r1, #12]
 8002d5c:	688e      	ldr	r6, [r1, #8]
 8002d5e:	684f      	ldr	r7, [r1, #4]
 8002d60:	4372      	muls	r2, r6
 8002d62:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d66:	437a      	muls	r2, r7
 8002d68:	4372      	muls	r2, r6
 8002d6a:	4355      	muls	r5, r2
 8002d6c:	1e40      	subs	r0, r0, #1
 8002d6e:	d1f4      	bne.n	8002d5a <forward_erf+0x6e>
 8002d70:	6998      	ldr	r0, [r3, #24]
 8002d72:	6886      	ldr	r6, [r0, #8]
 8002d74:	6821      	ldr	r1, [r4, #0]
 8002d76:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d7a:	1f07      	subs	r7, r0, #4
 8002d7c:	6888      	ldr	r0, [r1, #8]
 8002d7e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d82:	1f14      	subs	r4, r2, #4
 8002d84:	42b7      	cmp	r7, r6
 8002d86:	d309      	bcc.n	8002d9c <forward_erf+0xb0>
 8002d88:	ed97 0a00 	vldr	s0, [r7]
 8002d8c:	f00c fc88 	bl	800f6a0 <erff>
 8002d90:	ed84 0a00 	vstr	s0, [r4]
 8002d94:	1f3f      	subs	r7, r7, #4
 8002d96:	1f24      	subs	r4, r4, #4
 8002d98:	42b7      	cmp	r7, r6
 8002d9a:	d2f5      	bcs.n	8002d88 <forward_erf+0x9c>
 8002d9c:	b001      	add	sp, #4
 8002d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002da0 <nl_func_log_array_f32>:
 8002da0:	b570      	push	{r4, r5, r6, lr}
 8002da2:	688c      	ldr	r4, [r1, #8]
 8002da4:	6880      	ldr	r0, [r0, #8]
 8002da6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002daa:	1f0d      	subs	r5, r1, #4
 8002dac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002db0:	1f0e      	subs	r6, r1, #4
 8002db2:	42a5      	cmp	r5, r4
 8002db4:	f0c0 800a 	bcc.w	8002dcc <nl_func_log_array_f32+0x2c>
 8002db8:	ed95 0a00 	vldr	s0, [r5]
 8002dbc:	f00d fb2e 	bl	801041c <logf>
 8002dc0:	ed86 0a00 	vstr	s0, [r6]
 8002dc4:	1f2d      	subs	r5, r5, #4
 8002dc6:	1f36      	subs	r6, r6, #4
 8002dc8:	42a5      	cmp	r5, r4
 8002dca:	d2f5      	bcs.n	8002db8 <nl_func_log_array_f32+0x18>
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002dd0 <forward_log>:
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b081      	sub	sp, #4
 8002dd4:	6942      	ldr	r2, [r0, #20]
 8002dd6:	8811      	ldrh	r1, [r2, #0]
 8002dd8:	2900      	cmp	r1, #0
 8002dda:	bf1a      	itte	ne
 8002ddc:	6850      	ldrne	r0, [r2, #4]
 8002dde:	1d00      	addne	r0, r0, #4
 8002de0:	2004      	moveq	r0, #4
 8002de2:	f04f 0501 	mov.w	r5, #1
 8002de6:	6800      	ldr	r0, [r0, #0]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	bf14      	ite	ne
 8002dec:	6803      	ldrne	r3, [r0, #0]
 8002dee:	2300      	moveq	r3, #0
 8002df0:	2902      	cmp	r1, #2
 8002df2:	bfa6      	itte	ge
 8002df4:	6850      	ldrge	r0, [r2, #4]
 8002df6:	3010      	addge	r0, #16
 8002df8:	2004      	movlt	r0, #4
 8002dfa:	6800      	ldr	r0, [r0, #0]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	bf19      	ittee	ne
 8002e00:	6800      	ldrne	r0, [r0, #0]
 8002e02:	f100 0418 	addne.w	r4, r0, #24
 8002e06:	2100      	moveq	r1, #0
 8002e08:	f101 0418 	addeq.w	r4, r1, #24
 8002e0c:	f103 0108 	add.w	r1, r3, #8
 8002e10:	680a      	ldr	r2, [r1, #0]
 8002e12:	0a12      	lsrs	r2, r2, #8
 8002e14:	d01e      	beq.n	8002e54 <forward_log+0x84>
 8002e16:	684e      	ldr	r6, [r1, #4]
 8002e18:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	1f0f      	subs	r7, r1, #4
 8002e20:	f010 0103 	ands.w	r1, r0, #3
 8002e24:	d006      	beq.n	8002e34 <forward_log+0x64>
 8002e26:	1e52      	subs	r2, r2, #1
 8002e28:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e2c:	1e49      	subs	r1, r1, #1
 8002e2e:	fb0c f505 	mul.w	r5, ip, r5
 8002e32:	d1f8      	bne.n	8002e26 <forward_log+0x56>
 8002e34:	0880      	lsrs	r0, r0, #2
 8002e36:	d00d      	beq.n	8002e54 <forward_log+0x84>
 8002e38:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e3c:	3910      	subs	r1, #16
 8002e3e:	68ca      	ldr	r2, [r1, #12]
 8002e40:	688e      	ldr	r6, [r1, #8]
 8002e42:	684f      	ldr	r7, [r1, #4]
 8002e44:	4372      	muls	r2, r6
 8002e46:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e4a:	437a      	muls	r2, r7
 8002e4c:	4372      	muls	r2, r6
 8002e4e:	4355      	muls	r5, r2
 8002e50:	1e40      	subs	r0, r0, #1
 8002e52:	d1f4      	bne.n	8002e3e <forward_log+0x6e>
 8002e54:	6998      	ldr	r0, [r3, #24]
 8002e56:	6886      	ldr	r6, [r0, #8]
 8002e58:	6821      	ldr	r1, [r4, #0]
 8002e5a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e5e:	1f07      	subs	r7, r0, #4
 8002e60:	6888      	ldr	r0, [r1, #8]
 8002e62:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e66:	1f14      	subs	r4, r2, #4
 8002e68:	42b7      	cmp	r7, r6
 8002e6a:	d309      	bcc.n	8002e80 <forward_log+0xb0>
 8002e6c:	ed97 0a00 	vldr	s0, [r7]
 8002e70:	f00d fad4 	bl	801041c <logf>
 8002e74:	ed84 0a00 	vstr	s0, [r4]
 8002e78:	1f3f      	subs	r7, r7, #4
 8002e7a:	1f24      	subs	r4, r4, #4
 8002e7c:	42b7      	cmp	r7, r6
 8002e7e:	d2f5      	bcs.n	8002e6c <forward_log+0x9c>
 8002e80:	b001      	add	sp, #4
 8002e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e84 <nl_func_rsqrt_array_f32>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	460c      	mov	r4, r1
 8002e88:	6880      	ldr	r0, [r0, #8]
 8002e8a:	68a1      	ldr	r1, [r4, #8]
 8002e8c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e90:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e94:	1f1d      	subs	r5, r3, #4
 8002e96:	1f16      	subs	r6, r2, #4
 8002e98:	428d      	cmp	r5, r1
 8002e9a:	d30e      	bcc.n	8002eba <nl_func_rsqrt_array_f32+0x36>
 8002e9c:	ed95 0a00 	vldr	s0, [r5]
 8002ea0:	f002 fa2c 	bl	80052fc <ai_math_sqrt>
 8002ea4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002ea8:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002eac:	edc6 0a00 	vstr	s1, [r6]
 8002eb0:	1f2d      	subs	r5, r5, #4
 8002eb2:	68a0      	ldr	r0, [r4, #8]
 8002eb4:	1f36      	subs	r6, r6, #4
 8002eb6:	4285      	cmp	r5, r0
 8002eb8:	d2f0      	bcs.n	8002e9c <nl_func_rsqrt_array_f32+0x18>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}

08002ebc <forward_rsqrt>:
 8002ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ebe:	b081      	sub	sp, #4
 8002ec0:	6942      	ldr	r2, [r0, #20]
 8002ec2:	8811      	ldrh	r1, [r2, #0]
 8002ec4:	2900      	cmp	r1, #0
 8002ec6:	bf1a      	itte	ne
 8002ec8:	6850      	ldrne	r0, [r2, #4]
 8002eca:	1d00      	addne	r0, r0, #4
 8002ecc:	2004      	moveq	r0, #4
 8002ece:	f04f 0501 	mov.w	r5, #1
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	6803      	ldrne	r3, [r0, #0]
 8002eda:	2300      	moveq	r3, #0
 8002edc:	2902      	cmp	r1, #2
 8002ede:	bfa6      	itte	ge
 8002ee0:	6850      	ldrge	r0, [r2, #4]
 8002ee2:	3010      	addge	r0, #16
 8002ee4:	2004      	movlt	r0, #4
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bf19      	ittee	ne
 8002eec:	6800      	ldrne	r0, [r0, #0]
 8002eee:	f100 0418 	addne.w	r4, r0, #24
 8002ef2:	2100      	moveq	r1, #0
 8002ef4:	f101 0418 	addeq.w	r4, r1, #24
 8002ef8:	f103 0108 	add.w	r1, r3, #8
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	0a12      	lsrs	r2, r2, #8
 8002f00:	d01e      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f02:	684e      	ldr	r6, [r1, #4]
 8002f04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f08:	4610      	mov	r0, r2
 8002f0a:	1f0f      	subs	r7, r1, #4
 8002f0c:	f010 0103 	ands.w	r1, r0, #3
 8002f10:	d006      	beq.n	8002f20 <forward_rsqrt+0x64>
 8002f12:	1e52      	subs	r2, r2, #1
 8002f14:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f18:	1e49      	subs	r1, r1, #1
 8002f1a:	fb0c f505 	mul.w	r5, ip, r5
 8002f1e:	d1f8      	bne.n	8002f12 <forward_rsqrt+0x56>
 8002f20:	0880      	lsrs	r0, r0, #2
 8002f22:	d00d      	beq.n	8002f40 <forward_rsqrt+0x84>
 8002f24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f28:	3910      	subs	r1, #16
 8002f2a:	68ca      	ldr	r2, [r1, #12]
 8002f2c:	688e      	ldr	r6, [r1, #8]
 8002f2e:	684f      	ldr	r7, [r1, #4]
 8002f30:	4372      	muls	r2, r6
 8002f32:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f36:	437a      	muls	r2, r7
 8002f38:	4372      	muls	r2, r6
 8002f3a:	4355      	muls	r5, r2
 8002f3c:	1e40      	subs	r0, r0, #1
 8002f3e:	d1f4      	bne.n	8002f2a <forward_rsqrt+0x6e>
 8002f40:	699e      	ldr	r6, [r3, #24]
 8002f42:	68b0      	ldr	r0, [r6, #8]
 8002f44:	6822      	ldr	r2, [r4, #0]
 8002f46:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f4a:	1f0f      	subs	r7, r1, #4
 8002f4c:	6891      	ldr	r1, [r2, #8]
 8002f4e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f52:	1f1c      	subs	r4, r3, #4
 8002f54:	4287      	cmp	r7, r0
 8002f56:	d30e      	bcc.n	8002f76 <forward_rsqrt+0xba>
 8002f58:	ed97 0a00 	vldr	s0, [r7]
 8002f5c:	f002 f9ce 	bl	80052fc <ai_math_sqrt>
 8002f60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f64:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f68:	edc4 0a00 	vstr	s1, [r4]
 8002f6c:	1f3f      	subs	r7, r7, #4
 8002f6e:	68b0      	ldr	r0, [r6, #8]
 8002f70:	1f24      	subs	r4, r4, #4
 8002f72:	4287      	cmp	r7, r0
 8002f74:	d2f0      	bcs.n	8002f58 <forward_rsqrt+0x9c>
 8002f76:	b001      	add	sp, #4
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f7c <nl_func_sin_array_f32>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	688c      	ldr	r4, [r1, #8]
 8002f80:	6880      	ldr	r0, [r0, #8]
 8002f82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f86:	1f0d      	subs	r5, r1, #4
 8002f88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f8c:	1f0e      	subs	r6, r1, #4
 8002f8e:	42a5      	cmp	r5, r4
 8002f90:	f0c0 800a 	bcc.w	8002fa8 <nl_func_sin_array_f32+0x2c>
 8002f94:	ed95 0a00 	vldr	s0, [r5]
 8002f98:	f00c feda 	bl	800fd50 <sinf>
 8002f9c:	ed86 0a00 	vstr	s0, [r6]
 8002fa0:	1f2d      	subs	r5, r5, #4
 8002fa2:	1f36      	subs	r6, r6, #4
 8002fa4:	42a5      	cmp	r5, r4
 8002fa6:	d2f5      	bcs.n	8002f94 <nl_func_sin_array_f32+0x18>
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002fac <forward_sin>:
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fae:	b081      	sub	sp, #4
 8002fb0:	6942      	ldr	r2, [r0, #20]
 8002fb2:	8811      	ldrh	r1, [r2, #0]
 8002fb4:	2900      	cmp	r1, #0
 8002fb6:	bf1a      	itte	ne
 8002fb8:	6850      	ldrne	r0, [r2, #4]
 8002fba:	1d00      	addne	r0, r0, #4
 8002fbc:	2004      	moveq	r0, #4
 8002fbe:	f04f 0501 	mov.w	r5, #1
 8002fc2:	6800      	ldr	r0, [r0, #0]
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	6803      	ldrne	r3, [r0, #0]
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	2902      	cmp	r1, #2
 8002fce:	bfa6      	itte	ge
 8002fd0:	6850      	ldrge	r0, [r2, #4]
 8002fd2:	3010      	addge	r0, #16
 8002fd4:	2004      	movlt	r0, #4
 8002fd6:	6800      	ldr	r0, [r0, #0]
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	bf19      	ittee	ne
 8002fdc:	6800      	ldrne	r0, [r0, #0]
 8002fde:	f100 0418 	addne.w	r4, r0, #24
 8002fe2:	2100      	moveq	r1, #0
 8002fe4:	f101 0418 	addeq.w	r4, r1, #24
 8002fe8:	f103 0108 	add.w	r1, r3, #8
 8002fec:	680a      	ldr	r2, [r1, #0]
 8002fee:	0a12      	lsrs	r2, r2, #8
 8002ff0:	d01e      	beq.n	8003030 <forward_sin+0x84>
 8002ff2:	684e      	ldr	r6, [r1, #4]
 8002ff4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	1f0f      	subs	r7, r1, #4
 8002ffc:	f010 0103 	ands.w	r1, r0, #3
 8003000:	d006      	beq.n	8003010 <forward_sin+0x64>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	f857 c904 	ldr.w	ip, [r7], #-4
 8003008:	1e49      	subs	r1, r1, #1
 800300a:	fb0c f505 	mul.w	r5, ip, r5
 800300e:	d1f8      	bne.n	8003002 <forward_sin+0x56>
 8003010:	0880      	lsrs	r0, r0, #2
 8003012:	d00d      	beq.n	8003030 <forward_sin+0x84>
 8003014:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003018:	3910      	subs	r1, #16
 800301a:	68ca      	ldr	r2, [r1, #12]
 800301c:	688e      	ldr	r6, [r1, #8]
 800301e:	684f      	ldr	r7, [r1, #4]
 8003020:	4372      	muls	r2, r6
 8003022:	f851 6910 	ldr.w	r6, [r1], #-16
 8003026:	437a      	muls	r2, r7
 8003028:	4372      	muls	r2, r6
 800302a:	4355      	muls	r5, r2
 800302c:	1e40      	subs	r0, r0, #1
 800302e:	d1f4      	bne.n	800301a <forward_sin+0x6e>
 8003030:	6998      	ldr	r0, [r3, #24]
 8003032:	6886      	ldr	r6, [r0, #8]
 8003034:	6821      	ldr	r1, [r4, #0]
 8003036:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800303a:	1f07      	subs	r7, r0, #4
 800303c:	6888      	ldr	r0, [r1, #8]
 800303e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003042:	1f14      	subs	r4, r2, #4
 8003044:	42b7      	cmp	r7, r6
 8003046:	d309      	bcc.n	800305c <forward_sin+0xb0>
 8003048:	ed97 0a00 	vldr	s0, [r7]
 800304c:	f00c fe80 	bl	800fd50 <sinf>
 8003050:	ed84 0a00 	vstr	s0, [r4]
 8003054:	1f3f      	subs	r7, r7, #4
 8003056:	1f24      	subs	r4, r4, #4
 8003058:	42b7      	cmp	r7, r6
 800305a:	d2f5      	bcs.n	8003048 <forward_sin+0x9c>
 800305c:	b001      	add	sp, #4
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003060 <nl_func_sinh_array_f32>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	688c      	ldr	r4, [r1, #8]
 8003064:	6880      	ldr	r0, [r0, #8]
 8003066:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800306a:	1f0d      	subs	r5, r1, #4
 800306c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003070:	1f0e      	subs	r6, r1, #4
 8003072:	42a5      	cmp	r5, r4
 8003074:	f0c0 800a 	bcc.w	800308c <nl_func_sinh_array_f32+0x2c>
 8003078:	ed95 0a00 	vldr	s0, [r5]
 800307c:	f00d fba8 	bl	80107d0 <sinhf>
 8003080:	ed86 0a00 	vstr	s0, [r6]
 8003084:	1f2d      	subs	r5, r5, #4
 8003086:	1f36      	subs	r6, r6, #4
 8003088:	42a5      	cmp	r5, r4
 800308a:	d2f5      	bcs.n	8003078 <nl_func_sinh_array_f32+0x18>
 800308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003090 <forward_sinh>:
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b081      	sub	sp, #4
 8003094:	6942      	ldr	r2, [r0, #20]
 8003096:	8811      	ldrh	r1, [r2, #0]
 8003098:	2900      	cmp	r1, #0
 800309a:	bf1a      	itte	ne
 800309c:	6850      	ldrne	r0, [r2, #4]
 800309e:	1d00      	addne	r0, r0, #4
 80030a0:	2004      	moveq	r0, #4
 80030a2:	f04f 0501 	mov.w	r5, #1
 80030a6:	6800      	ldr	r0, [r0, #0]
 80030a8:	2800      	cmp	r0, #0
 80030aa:	bf14      	ite	ne
 80030ac:	6803      	ldrne	r3, [r0, #0]
 80030ae:	2300      	moveq	r3, #0
 80030b0:	2902      	cmp	r1, #2
 80030b2:	bfa6      	itte	ge
 80030b4:	6850      	ldrge	r0, [r2, #4]
 80030b6:	3010      	addge	r0, #16
 80030b8:	2004      	movlt	r0, #4
 80030ba:	6800      	ldr	r0, [r0, #0]
 80030bc:	2800      	cmp	r0, #0
 80030be:	bf19      	ittee	ne
 80030c0:	6800      	ldrne	r0, [r0, #0]
 80030c2:	f100 0418 	addne.w	r4, r0, #24
 80030c6:	2100      	moveq	r1, #0
 80030c8:	f101 0418 	addeq.w	r4, r1, #24
 80030cc:	f103 0108 	add.w	r1, r3, #8
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	0a12      	lsrs	r2, r2, #8
 80030d4:	d01e      	beq.n	8003114 <forward_sinh+0x84>
 80030d6:	684e      	ldr	r6, [r1, #4]
 80030d8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030dc:	4610      	mov	r0, r2
 80030de:	1f0f      	subs	r7, r1, #4
 80030e0:	f010 0103 	ands.w	r1, r0, #3
 80030e4:	d006      	beq.n	80030f4 <forward_sinh+0x64>
 80030e6:	1e52      	subs	r2, r2, #1
 80030e8:	f857 c904 	ldr.w	ip, [r7], #-4
 80030ec:	1e49      	subs	r1, r1, #1
 80030ee:	fb0c f505 	mul.w	r5, ip, r5
 80030f2:	d1f8      	bne.n	80030e6 <forward_sinh+0x56>
 80030f4:	0880      	lsrs	r0, r0, #2
 80030f6:	d00d      	beq.n	8003114 <forward_sinh+0x84>
 80030f8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030fc:	3910      	subs	r1, #16
 80030fe:	68ca      	ldr	r2, [r1, #12]
 8003100:	688e      	ldr	r6, [r1, #8]
 8003102:	684f      	ldr	r7, [r1, #4]
 8003104:	4372      	muls	r2, r6
 8003106:	f851 6910 	ldr.w	r6, [r1], #-16
 800310a:	437a      	muls	r2, r7
 800310c:	4372      	muls	r2, r6
 800310e:	4355      	muls	r5, r2
 8003110:	1e40      	subs	r0, r0, #1
 8003112:	d1f4      	bne.n	80030fe <forward_sinh+0x6e>
 8003114:	6998      	ldr	r0, [r3, #24]
 8003116:	6886      	ldr	r6, [r0, #8]
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800311e:	1f07      	subs	r7, r0, #4
 8003120:	6888      	ldr	r0, [r1, #8]
 8003122:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003126:	1f14      	subs	r4, r2, #4
 8003128:	42b7      	cmp	r7, r6
 800312a:	d309      	bcc.n	8003140 <forward_sinh+0xb0>
 800312c:	ed97 0a00 	vldr	s0, [r7]
 8003130:	f00d fb4e 	bl	80107d0 <sinhf>
 8003134:	ed84 0a00 	vstr	s0, [r4]
 8003138:	1f3f      	subs	r7, r7, #4
 800313a:	1f24      	subs	r4, r4, #4
 800313c:	42b7      	cmp	r7, r6
 800313e:	d2f5      	bcs.n	800312c <forward_sinh+0x9c>
 8003140:	b001      	add	sp, #4
 8003142:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003144 <nl_func_tan_array_f32>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	688c      	ldr	r4, [r1, #8]
 8003148:	6880      	ldr	r0, [r0, #8]
 800314a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800314e:	1f0d      	subs	r5, r1, #4
 8003150:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003154:	1f0e      	subs	r6, r1, #4
 8003156:	42a5      	cmp	r5, r4
 8003158:	f0c0 800a 	bcc.w	8003170 <nl_func_tan_array_f32+0x2c>
 800315c:	ed95 0a00 	vldr	s0, [r5]
 8003160:	f00c fe38 	bl	800fdd4 <tanf>
 8003164:	ed86 0a00 	vstr	s0, [r6]
 8003168:	1f2d      	subs	r5, r5, #4
 800316a:	1f36      	subs	r6, r6, #4
 800316c:	42a5      	cmp	r5, r4
 800316e:	d2f5      	bcs.n	800315c <nl_func_tan_array_f32+0x18>
 8003170:	bd70      	pop	{r4, r5, r6, pc}
	...

08003174 <forward_tan>:
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003176:	b081      	sub	sp, #4
 8003178:	6942      	ldr	r2, [r0, #20]
 800317a:	8811      	ldrh	r1, [r2, #0]
 800317c:	2900      	cmp	r1, #0
 800317e:	bf1a      	itte	ne
 8003180:	6850      	ldrne	r0, [r2, #4]
 8003182:	1d00      	addne	r0, r0, #4
 8003184:	2004      	moveq	r0, #4
 8003186:	f04f 0501 	mov.w	r5, #1
 800318a:	6800      	ldr	r0, [r0, #0]
 800318c:	2800      	cmp	r0, #0
 800318e:	bf14      	ite	ne
 8003190:	6803      	ldrne	r3, [r0, #0]
 8003192:	2300      	moveq	r3, #0
 8003194:	2902      	cmp	r1, #2
 8003196:	bfa6      	itte	ge
 8003198:	6850      	ldrge	r0, [r2, #4]
 800319a:	3010      	addge	r0, #16
 800319c:	2004      	movlt	r0, #4
 800319e:	6800      	ldr	r0, [r0, #0]
 80031a0:	2800      	cmp	r0, #0
 80031a2:	bf19      	ittee	ne
 80031a4:	6800      	ldrne	r0, [r0, #0]
 80031a6:	f100 0418 	addne.w	r4, r0, #24
 80031aa:	2100      	moveq	r1, #0
 80031ac:	f101 0418 	addeq.w	r4, r1, #24
 80031b0:	f103 0108 	add.w	r1, r3, #8
 80031b4:	680a      	ldr	r2, [r1, #0]
 80031b6:	0a12      	lsrs	r2, r2, #8
 80031b8:	d01e      	beq.n	80031f8 <forward_tan+0x84>
 80031ba:	684e      	ldr	r6, [r1, #4]
 80031bc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031c0:	4610      	mov	r0, r2
 80031c2:	1f0f      	subs	r7, r1, #4
 80031c4:	f010 0103 	ands.w	r1, r0, #3
 80031c8:	d006      	beq.n	80031d8 <forward_tan+0x64>
 80031ca:	1e52      	subs	r2, r2, #1
 80031cc:	f857 c904 	ldr.w	ip, [r7], #-4
 80031d0:	1e49      	subs	r1, r1, #1
 80031d2:	fb0c f505 	mul.w	r5, ip, r5
 80031d6:	d1f8      	bne.n	80031ca <forward_tan+0x56>
 80031d8:	0880      	lsrs	r0, r0, #2
 80031da:	d00d      	beq.n	80031f8 <forward_tan+0x84>
 80031dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031e0:	3910      	subs	r1, #16
 80031e2:	68ca      	ldr	r2, [r1, #12]
 80031e4:	688e      	ldr	r6, [r1, #8]
 80031e6:	684f      	ldr	r7, [r1, #4]
 80031e8:	4372      	muls	r2, r6
 80031ea:	f851 6910 	ldr.w	r6, [r1], #-16
 80031ee:	437a      	muls	r2, r7
 80031f0:	4372      	muls	r2, r6
 80031f2:	4355      	muls	r5, r2
 80031f4:	1e40      	subs	r0, r0, #1
 80031f6:	d1f4      	bne.n	80031e2 <forward_tan+0x6e>
 80031f8:	6998      	ldr	r0, [r3, #24]
 80031fa:	6886      	ldr	r6, [r0, #8]
 80031fc:	6821      	ldr	r1, [r4, #0]
 80031fe:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003202:	1f07      	subs	r7, r0, #4
 8003204:	6888      	ldr	r0, [r1, #8]
 8003206:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800320a:	1f14      	subs	r4, r2, #4
 800320c:	42b7      	cmp	r7, r6
 800320e:	d309      	bcc.n	8003224 <forward_tan+0xb0>
 8003210:	ed97 0a00 	vldr	s0, [r7]
 8003214:	f00c fdde 	bl	800fdd4 <tanf>
 8003218:	ed84 0a00 	vstr	s0, [r4]
 800321c:	1f3f      	subs	r7, r7, #4
 800321e:	1f24      	subs	r4, r4, #4
 8003220:	42b7      	cmp	r7, r6
 8003222:	d2f5      	bcs.n	8003210 <forward_tan+0x9c>
 8003224:	b001      	add	sp, #4
 8003226:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003228 <nl_func_abs_array_f32>:
 8003228:	6889      	ldr	r1, [r1, #8]
 800322a:	6880      	ldr	r0, [r0, #8]
 800322c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003230:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003234:	1f1b      	subs	r3, r3, #4
 8003236:	1f10      	subs	r0, r2, #4
 8003238:	428b      	cmp	r3, r1
 800323a:	d307      	bcc.n	800324c <nl_func_abs_array_f32+0x24>
 800323c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003240:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003244:	428b      	cmp	r3, r1
 8003246:	f840 2904 	str.w	r2, [r0], #-4
 800324a:	d2f7      	bcs.n	800323c <nl_func_abs_array_f32+0x14>
 800324c:	4770      	bx	lr
	...

08003250 <forward_abs>:
 8003250:	b4f0      	push	{r4, r5, r6, r7}
 8003252:	6942      	ldr	r2, [r0, #20]
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	2900      	cmp	r1, #0
 8003258:	bf1a      	itte	ne
 800325a:	6850      	ldrne	r0, [r2, #4]
 800325c:	1d00      	addne	r0, r0, #4
 800325e:	2004      	moveq	r0, #4
 8003260:	f04f 0501 	mov.w	r5, #1
 8003264:	6800      	ldr	r0, [r0, #0]
 8003266:	2800      	cmp	r0, #0
 8003268:	bf14      	ite	ne
 800326a:	6803      	ldrne	r3, [r0, #0]
 800326c:	2300      	moveq	r3, #0
 800326e:	2902      	cmp	r1, #2
 8003270:	bfa6      	itte	ge
 8003272:	6850      	ldrge	r0, [r2, #4]
 8003274:	3010      	addge	r0, #16
 8003276:	2004      	movlt	r0, #4
 8003278:	6800      	ldr	r0, [r0, #0]
 800327a:	2800      	cmp	r0, #0
 800327c:	bf19      	ittee	ne
 800327e:	6800      	ldrne	r0, [r0, #0]
 8003280:	f100 0418 	addne.w	r4, r0, #24
 8003284:	2100      	moveq	r1, #0
 8003286:	f101 0418 	addeq.w	r4, r1, #24
 800328a:	f103 0108 	add.w	r1, r3, #8
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	0a12      	lsrs	r2, r2, #8
 8003292:	d01e      	beq.n	80032d2 <forward_abs+0x82>
 8003294:	684e      	ldr	r6, [r1, #4]
 8003296:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800329a:	4610      	mov	r0, r2
 800329c:	1f0f      	subs	r7, r1, #4
 800329e:	f010 0103 	ands.w	r1, r0, #3
 80032a2:	d006      	beq.n	80032b2 <forward_abs+0x62>
 80032a4:	1e52      	subs	r2, r2, #1
 80032a6:	f857 c904 	ldr.w	ip, [r7], #-4
 80032aa:	1e49      	subs	r1, r1, #1
 80032ac:	fb0c f505 	mul.w	r5, ip, r5
 80032b0:	d1f8      	bne.n	80032a4 <forward_abs+0x54>
 80032b2:	0880      	lsrs	r0, r0, #2
 80032b4:	d00d      	beq.n	80032d2 <forward_abs+0x82>
 80032b6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80032ba:	3910      	subs	r1, #16
 80032bc:	68ca      	ldr	r2, [r1, #12]
 80032be:	688e      	ldr	r6, [r1, #8]
 80032c0:	684f      	ldr	r7, [r1, #4]
 80032c2:	4372      	muls	r2, r6
 80032c4:	f851 6910 	ldr.w	r6, [r1], #-16
 80032c8:	437a      	muls	r2, r7
 80032ca:	4372      	muls	r2, r6
 80032cc:	4355      	muls	r5, r2
 80032ce:	1e40      	subs	r0, r0, #1
 80032d0:	d1f4      	bne.n	80032bc <forward_abs+0x6c>
 80032d2:	6998      	ldr	r0, [r3, #24]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	6880      	ldr	r0, [r0, #8]
 80032d8:	6893      	ldr	r3, [r2, #8]
 80032da:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032de:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032e2:	1f09      	subs	r1, r1, #4
 80032e4:	1f22      	subs	r2, r4, #4
 80032e6:	4281      	cmp	r1, r0
 80032e8:	f0c0 8008 	bcc.w	80032fc <forward_abs+0xac>
 80032ec:	f851 3904 	ldr.w	r3, [r1], #-4
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	4281      	cmp	r1, r0
 80032f6:	f842 3904 	str.w	r3, [r2], #-4
 80032fa:	d2f7      	bcs.n	80032ec <forward_abs+0x9c>
 80032fc:	bcf0      	pop	{r4, r5, r6, r7}
 80032fe:	4770      	bx	lr

08003300 <nl_func_ceil_array_f32>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	688c      	ldr	r4, [r1, #8]
 8003304:	6880      	ldr	r0, [r0, #8]
 8003306:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800330a:	1f0d      	subs	r5, r1, #4
 800330c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003310:	1f0e      	subs	r6, r1, #4
 8003312:	42a5      	cmp	r5, r4
 8003314:	f0c0 800a 	bcc.w	800332c <nl_func_ceil_array_f32+0x2c>
 8003318:	ed95 0a00 	vldr	s0, [r5]
 800331c:	f00c f940 	bl	800f5a0 <ceilf>
 8003320:	ed86 0a00 	vstr	s0, [r6]
 8003324:	1f2d      	subs	r5, r5, #4
 8003326:	1f36      	subs	r6, r6, #4
 8003328:	42a5      	cmp	r5, r4
 800332a:	d2f5      	bcs.n	8003318 <nl_func_ceil_array_f32+0x18>
 800332c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003330 <forward_ceil>:
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b081      	sub	sp, #4
 8003334:	6942      	ldr	r2, [r0, #20]
 8003336:	8811      	ldrh	r1, [r2, #0]
 8003338:	2900      	cmp	r1, #0
 800333a:	bf1a      	itte	ne
 800333c:	6850      	ldrne	r0, [r2, #4]
 800333e:	1d00      	addne	r0, r0, #4
 8003340:	2004      	moveq	r0, #4
 8003342:	f04f 0501 	mov.w	r5, #1
 8003346:	6800      	ldr	r0, [r0, #0]
 8003348:	2800      	cmp	r0, #0
 800334a:	bf14      	ite	ne
 800334c:	6803      	ldrne	r3, [r0, #0]
 800334e:	2300      	moveq	r3, #0
 8003350:	2902      	cmp	r1, #2
 8003352:	bfa6      	itte	ge
 8003354:	6850      	ldrge	r0, [r2, #4]
 8003356:	3010      	addge	r0, #16
 8003358:	2004      	movlt	r0, #4
 800335a:	6800      	ldr	r0, [r0, #0]
 800335c:	2800      	cmp	r0, #0
 800335e:	bf19      	ittee	ne
 8003360:	6800      	ldrne	r0, [r0, #0]
 8003362:	f100 0418 	addne.w	r4, r0, #24
 8003366:	2100      	moveq	r1, #0
 8003368:	f101 0418 	addeq.w	r4, r1, #24
 800336c:	f103 0108 	add.w	r1, r3, #8
 8003370:	680a      	ldr	r2, [r1, #0]
 8003372:	0a12      	lsrs	r2, r2, #8
 8003374:	d01e      	beq.n	80033b4 <forward_ceil+0x84>
 8003376:	684e      	ldr	r6, [r1, #4]
 8003378:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800337c:	4610      	mov	r0, r2
 800337e:	1f0f      	subs	r7, r1, #4
 8003380:	f010 0103 	ands.w	r1, r0, #3
 8003384:	d006      	beq.n	8003394 <forward_ceil+0x64>
 8003386:	1e52      	subs	r2, r2, #1
 8003388:	f857 c904 	ldr.w	ip, [r7], #-4
 800338c:	1e49      	subs	r1, r1, #1
 800338e:	fb0c f505 	mul.w	r5, ip, r5
 8003392:	d1f8      	bne.n	8003386 <forward_ceil+0x56>
 8003394:	0880      	lsrs	r0, r0, #2
 8003396:	d00d      	beq.n	80033b4 <forward_ceil+0x84>
 8003398:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800339c:	3910      	subs	r1, #16
 800339e:	68ca      	ldr	r2, [r1, #12]
 80033a0:	688e      	ldr	r6, [r1, #8]
 80033a2:	684f      	ldr	r7, [r1, #4]
 80033a4:	4372      	muls	r2, r6
 80033a6:	f851 6910 	ldr.w	r6, [r1], #-16
 80033aa:	437a      	muls	r2, r7
 80033ac:	4372      	muls	r2, r6
 80033ae:	4355      	muls	r5, r2
 80033b0:	1e40      	subs	r0, r0, #1
 80033b2:	d1f4      	bne.n	800339e <forward_ceil+0x6e>
 80033b4:	6998      	ldr	r0, [r3, #24]
 80033b6:	6886      	ldr	r6, [r0, #8]
 80033b8:	6821      	ldr	r1, [r4, #0]
 80033ba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80033be:	1f07      	subs	r7, r0, #4
 80033c0:	6888      	ldr	r0, [r1, #8]
 80033c2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80033c6:	1f14      	subs	r4, r2, #4
 80033c8:	42b7      	cmp	r7, r6
 80033ca:	d309      	bcc.n	80033e0 <forward_ceil+0xb0>
 80033cc:	ed97 0a00 	vldr	s0, [r7]
 80033d0:	f00c f8e6 	bl	800f5a0 <ceilf>
 80033d4:	ed84 0a00 	vstr	s0, [r4]
 80033d8:	1f3f      	subs	r7, r7, #4
 80033da:	1f24      	subs	r4, r4, #4
 80033dc:	42b7      	cmp	r7, r6
 80033de:	d2f5      	bcs.n	80033cc <forward_ceil+0x9c>
 80033e0:	b001      	add	sp, #4
 80033e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033e4 <nl_func_floor_array_f32>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	688c      	ldr	r4, [r1, #8]
 80033e8:	6880      	ldr	r0, [r0, #8]
 80033ea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033ee:	1f0d      	subs	r5, r1, #4
 80033f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033f4:	1f0e      	subs	r6, r1, #4
 80033f6:	42a5      	cmp	r5, r4
 80033f8:	f0c0 800a 	bcc.w	8003410 <nl_func_floor_array_f32+0x2c>
 80033fc:	ed95 0a00 	vldr	s0, [r5]
 8003400:	f00c fb36 	bl	800fa70 <floorf>
 8003404:	ed86 0a00 	vstr	s0, [r6]
 8003408:	1f2d      	subs	r5, r5, #4
 800340a:	1f36      	subs	r6, r6, #4
 800340c:	42a5      	cmp	r5, r4
 800340e:	d2f5      	bcs.n	80033fc <nl_func_floor_array_f32+0x18>
 8003410:	bd70      	pop	{r4, r5, r6, pc}
	...

08003414 <forward_floor>:
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	b081      	sub	sp, #4
 8003418:	6942      	ldr	r2, [r0, #20]
 800341a:	8811      	ldrh	r1, [r2, #0]
 800341c:	2900      	cmp	r1, #0
 800341e:	bf1a      	itte	ne
 8003420:	6850      	ldrne	r0, [r2, #4]
 8003422:	1d00      	addne	r0, r0, #4
 8003424:	2004      	moveq	r0, #4
 8003426:	f04f 0501 	mov.w	r5, #1
 800342a:	6800      	ldr	r0, [r0, #0]
 800342c:	2800      	cmp	r0, #0
 800342e:	bf14      	ite	ne
 8003430:	6803      	ldrne	r3, [r0, #0]
 8003432:	2300      	moveq	r3, #0
 8003434:	2902      	cmp	r1, #2
 8003436:	bfa6      	itte	ge
 8003438:	6850      	ldrge	r0, [r2, #4]
 800343a:	3010      	addge	r0, #16
 800343c:	2004      	movlt	r0, #4
 800343e:	6800      	ldr	r0, [r0, #0]
 8003440:	2800      	cmp	r0, #0
 8003442:	bf19      	ittee	ne
 8003444:	6800      	ldrne	r0, [r0, #0]
 8003446:	f100 0418 	addne.w	r4, r0, #24
 800344a:	2100      	moveq	r1, #0
 800344c:	f101 0418 	addeq.w	r4, r1, #24
 8003450:	f103 0108 	add.w	r1, r3, #8
 8003454:	680a      	ldr	r2, [r1, #0]
 8003456:	0a12      	lsrs	r2, r2, #8
 8003458:	d01e      	beq.n	8003498 <forward_floor+0x84>
 800345a:	684e      	ldr	r6, [r1, #4]
 800345c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003460:	4610      	mov	r0, r2
 8003462:	1f0f      	subs	r7, r1, #4
 8003464:	f010 0103 	ands.w	r1, r0, #3
 8003468:	d006      	beq.n	8003478 <forward_floor+0x64>
 800346a:	1e52      	subs	r2, r2, #1
 800346c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003470:	1e49      	subs	r1, r1, #1
 8003472:	fb0c f505 	mul.w	r5, ip, r5
 8003476:	d1f8      	bne.n	800346a <forward_floor+0x56>
 8003478:	0880      	lsrs	r0, r0, #2
 800347a:	d00d      	beq.n	8003498 <forward_floor+0x84>
 800347c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003480:	3910      	subs	r1, #16
 8003482:	68ca      	ldr	r2, [r1, #12]
 8003484:	688e      	ldr	r6, [r1, #8]
 8003486:	684f      	ldr	r7, [r1, #4]
 8003488:	4372      	muls	r2, r6
 800348a:	f851 6910 	ldr.w	r6, [r1], #-16
 800348e:	437a      	muls	r2, r7
 8003490:	4372      	muls	r2, r6
 8003492:	4355      	muls	r5, r2
 8003494:	1e40      	subs	r0, r0, #1
 8003496:	d1f4      	bne.n	8003482 <forward_floor+0x6e>
 8003498:	6998      	ldr	r0, [r3, #24]
 800349a:	6886      	ldr	r6, [r0, #8]
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80034a2:	1f07      	subs	r7, r0, #4
 80034a4:	6888      	ldr	r0, [r1, #8]
 80034a6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80034aa:	1f14      	subs	r4, r2, #4
 80034ac:	42b7      	cmp	r7, r6
 80034ae:	d309      	bcc.n	80034c4 <forward_floor+0xb0>
 80034b0:	ed97 0a00 	vldr	s0, [r7]
 80034b4:	f00c fadc 	bl	800fa70 <floorf>
 80034b8:	ed84 0a00 	vstr	s0, [r4]
 80034bc:	1f3f      	subs	r7, r7, #4
 80034be:	1f24      	subs	r4, r4, #4
 80034c0:	42b7      	cmp	r7, r6
 80034c2:	d2f5      	bcs.n	80034b0 <forward_floor+0x9c>
 80034c4:	b001      	add	sp, #4
 80034c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034c8 <nl_func_round_array_f32>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	688c      	ldr	r4, [r1, #8]
 80034cc:	6880      	ldr	r0, [r0, #8]
 80034ce:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034d2:	1f0d      	subs	r5, r1, #4
 80034d4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034d8:	1f0e      	subs	r6, r1, #4
 80034da:	42a5      	cmp	r5, r4
 80034dc:	f0c0 800a 	bcc.w	80034f4 <nl_func_round_array_f32+0x2c>
 80034e0:	ed95 0a00 	vldr	s0, [r5]
 80034e4:	f00c fc0e 	bl	800fd04 <roundf>
 80034e8:	ed86 0a00 	vstr	s0, [r6]
 80034ec:	1f2d      	subs	r5, r5, #4
 80034ee:	1f36      	subs	r6, r6, #4
 80034f0:	42a5      	cmp	r5, r4
 80034f2:	d2f5      	bcs.n	80034e0 <nl_func_round_array_f32+0x18>
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080034f8 <forward_round>:
 80034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fa:	b081      	sub	sp, #4
 80034fc:	6942      	ldr	r2, [r0, #20]
 80034fe:	8811      	ldrh	r1, [r2, #0]
 8003500:	2900      	cmp	r1, #0
 8003502:	bf1a      	itte	ne
 8003504:	6850      	ldrne	r0, [r2, #4]
 8003506:	1d00      	addne	r0, r0, #4
 8003508:	2004      	moveq	r0, #4
 800350a:	f04f 0501 	mov.w	r5, #1
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	2800      	cmp	r0, #0
 8003512:	bf14      	ite	ne
 8003514:	6803      	ldrne	r3, [r0, #0]
 8003516:	2300      	moveq	r3, #0
 8003518:	2902      	cmp	r1, #2
 800351a:	bfa6      	itte	ge
 800351c:	6850      	ldrge	r0, [r2, #4]
 800351e:	3010      	addge	r0, #16
 8003520:	2004      	movlt	r0, #4
 8003522:	6800      	ldr	r0, [r0, #0]
 8003524:	2800      	cmp	r0, #0
 8003526:	bf19      	ittee	ne
 8003528:	6800      	ldrne	r0, [r0, #0]
 800352a:	f100 0418 	addne.w	r4, r0, #24
 800352e:	2100      	moveq	r1, #0
 8003530:	f101 0418 	addeq.w	r4, r1, #24
 8003534:	f103 0108 	add.w	r1, r3, #8
 8003538:	680a      	ldr	r2, [r1, #0]
 800353a:	0a12      	lsrs	r2, r2, #8
 800353c:	d01e      	beq.n	800357c <forward_round+0x84>
 800353e:	684e      	ldr	r6, [r1, #4]
 8003540:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003544:	4610      	mov	r0, r2
 8003546:	1f0f      	subs	r7, r1, #4
 8003548:	f010 0103 	ands.w	r1, r0, #3
 800354c:	d006      	beq.n	800355c <forward_round+0x64>
 800354e:	1e52      	subs	r2, r2, #1
 8003550:	f857 c904 	ldr.w	ip, [r7], #-4
 8003554:	1e49      	subs	r1, r1, #1
 8003556:	fb0c f505 	mul.w	r5, ip, r5
 800355a:	d1f8      	bne.n	800354e <forward_round+0x56>
 800355c:	0880      	lsrs	r0, r0, #2
 800355e:	d00d      	beq.n	800357c <forward_round+0x84>
 8003560:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003564:	3910      	subs	r1, #16
 8003566:	68ca      	ldr	r2, [r1, #12]
 8003568:	688e      	ldr	r6, [r1, #8]
 800356a:	684f      	ldr	r7, [r1, #4]
 800356c:	4372      	muls	r2, r6
 800356e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003572:	437a      	muls	r2, r7
 8003574:	4372      	muls	r2, r6
 8003576:	4355      	muls	r5, r2
 8003578:	1e40      	subs	r0, r0, #1
 800357a:	d1f4      	bne.n	8003566 <forward_round+0x6e>
 800357c:	6998      	ldr	r0, [r3, #24]
 800357e:	6886      	ldr	r6, [r0, #8]
 8003580:	6821      	ldr	r1, [r4, #0]
 8003582:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003586:	1f07      	subs	r7, r0, #4
 8003588:	6888      	ldr	r0, [r1, #8]
 800358a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800358e:	1f14      	subs	r4, r2, #4
 8003590:	42b7      	cmp	r7, r6
 8003592:	d309      	bcc.n	80035a8 <forward_round+0xb0>
 8003594:	ed97 0a00 	vldr	s0, [r7]
 8003598:	f00c fbb4 	bl	800fd04 <roundf>
 800359c:	ed84 0a00 	vstr	s0, [r4]
 80035a0:	1f3f      	subs	r7, r7, #4
 80035a2:	1f24      	subs	r4, r4, #4
 80035a4:	42b7      	cmp	r7, r6
 80035a6:	d2f5      	bcs.n	8003594 <forward_round+0x9c>
 80035a8:	b001      	add	sp, #4
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035ac <nl_func_neg_array_f32>:
 80035ac:	6889      	ldr	r1, [r1, #8]
 80035ae:	6880      	ldr	r0, [r0, #8]
 80035b0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80035b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80035b8:	1f1b      	subs	r3, r3, #4
 80035ba:	1f12      	subs	r2, r2, #4
 80035bc:	428b      	cmp	r3, r1
 80035be:	d32b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035c0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80035c4:	edd3 0a00 	vldr	s1, [r3]
 80035c8:	1f18      	subs	r0, r3, #4
 80035ca:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035ce:	4288      	cmp	r0, r1
 80035d0:	edc2 0a00 	vstr	s1, [r2]
 80035d4:	d320      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035d6:	ed90 1a00 	vldr	s2, [r0]
 80035da:	1f13      	subs	r3, r2, #4
 80035dc:	1f00      	subs	r0, r0, #4
 80035de:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035e2:	4288      	cmp	r0, r1
 80035e4:	ed83 1a00 	vstr	s2, [r3]
 80035e8:	d316      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 80035ea:	edd0 0a00 	vldr	s1, [r0]
 80035ee:	f1a2 0308 	sub.w	r3, r2, #8
 80035f2:	1f00      	subs	r0, r0, #4
 80035f4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035f8:	4288      	cmp	r0, r1
 80035fa:	edc3 0a00 	vstr	s1, [r3]
 80035fe:	d30b      	bcc.n	8003618 <nl_func_neg_array_f32+0x6c>
 8003600:	ed90 1a00 	vldr	s2, [r0]
 8003604:	f1a2 030c 	sub.w	r3, r2, #12
 8003608:	ee61 0a00 	vmul.f32	s1, s2, s0
 800360c:	edc3 0a00 	vstr	s1, [r3]
 8003610:	1f03      	subs	r3, r0, #4
 8003612:	3a10      	subs	r2, #16
 8003614:	428b      	cmp	r3, r1
 8003616:	d2d5      	bcs.n	80035c4 <nl_func_neg_array_f32+0x18>
 8003618:	4770      	bx	lr
	...

0800361c <forward_neg>:
 800361c:	b4f0      	push	{r4, r5, r6, r7}
 800361e:	6942      	ldr	r2, [r0, #20]
 8003620:	8811      	ldrh	r1, [r2, #0]
 8003622:	2900      	cmp	r1, #0
 8003624:	bf1a      	itte	ne
 8003626:	6850      	ldrne	r0, [r2, #4]
 8003628:	1d00      	addne	r0, r0, #4
 800362a:	2004      	moveq	r0, #4
 800362c:	f04f 0501 	mov.w	r5, #1
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	2800      	cmp	r0, #0
 8003634:	bf14      	ite	ne
 8003636:	6803      	ldrne	r3, [r0, #0]
 8003638:	2300      	moveq	r3, #0
 800363a:	2902      	cmp	r1, #2
 800363c:	bfa6      	itte	ge
 800363e:	6850      	ldrge	r0, [r2, #4]
 8003640:	3010      	addge	r0, #16
 8003642:	2004      	movlt	r0, #4
 8003644:	6800      	ldr	r0, [r0, #0]
 8003646:	2800      	cmp	r0, #0
 8003648:	bf19      	ittee	ne
 800364a:	6800      	ldrne	r0, [r0, #0]
 800364c:	f100 0418 	addne.w	r4, r0, #24
 8003650:	2100      	moveq	r1, #0
 8003652:	f101 0418 	addeq.w	r4, r1, #24
 8003656:	f103 0108 	add.w	r1, r3, #8
 800365a:	680a      	ldr	r2, [r1, #0]
 800365c:	0a12      	lsrs	r2, r2, #8
 800365e:	d01e      	beq.n	800369e <forward_neg+0x82>
 8003660:	684e      	ldr	r6, [r1, #4]
 8003662:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003666:	4610      	mov	r0, r2
 8003668:	1f0f      	subs	r7, r1, #4
 800366a:	f010 0103 	ands.w	r1, r0, #3
 800366e:	d006      	beq.n	800367e <forward_neg+0x62>
 8003670:	1e52      	subs	r2, r2, #1
 8003672:	f857 c904 	ldr.w	ip, [r7], #-4
 8003676:	1e49      	subs	r1, r1, #1
 8003678:	fb0c f505 	mul.w	r5, ip, r5
 800367c:	d1f8      	bne.n	8003670 <forward_neg+0x54>
 800367e:	0880      	lsrs	r0, r0, #2
 8003680:	d00d      	beq.n	800369e <forward_neg+0x82>
 8003682:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003686:	3910      	subs	r1, #16
 8003688:	68ca      	ldr	r2, [r1, #12]
 800368a:	688e      	ldr	r6, [r1, #8]
 800368c:	684f      	ldr	r7, [r1, #4]
 800368e:	4372      	muls	r2, r6
 8003690:	f851 6910 	ldr.w	r6, [r1], #-16
 8003694:	437a      	muls	r2, r7
 8003696:	4372      	muls	r2, r6
 8003698:	4355      	muls	r5, r2
 800369a:	1e40      	subs	r0, r0, #1
 800369c:	d1f4      	bne.n	8003688 <forward_neg+0x6c>
 800369e:	6998      	ldr	r0, [r3, #24]
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6880      	ldr	r0, [r0, #8]
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80036aa:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80036ae:	1f09      	subs	r1, r1, #4
 80036b0:	1f22      	subs	r2, r4, #4
 80036b2:	4281      	cmp	r1, r0
 80036b4:	f0c0 802c 	bcc.w	8003710 <forward_neg+0xf4>
 80036b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80036bc:	edd1 0a00 	vldr	s1, [r1]
 80036c0:	1f09      	subs	r1, r1, #4
 80036c2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036c6:	4281      	cmp	r1, r0
 80036c8:	edc2 0a00 	vstr	s1, [r2]
 80036cc:	d320      	bcc.n	8003710 <forward_neg+0xf4>
 80036ce:	ed91 1a00 	vldr	s2, [r1]
 80036d2:	1f13      	subs	r3, r2, #4
 80036d4:	1f09      	subs	r1, r1, #4
 80036d6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036da:	4281      	cmp	r1, r0
 80036dc:	ed83 1a00 	vstr	s2, [r3]
 80036e0:	d316      	bcc.n	8003710 <forward_neg+0xf4>
 80036e2:	edd1 0a00 	vldr	s1, [r1]
 80036e6:	f1a2 0308 	sub.w	r3, r2, #8
 80036ea:	1f09      	subs	r1, r1, #4
 80036ec:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036f0:	4281      	cmp	r1, r0
 80036f2:	edc3 0a00 	vstr	s1, [r3]
 80036f6:	d30b      	bcc.n	8003710 <forward_neg+0xf4>
 80036f8:	ed91 1a00 	vldr	s2, [r1]
 80036fc:	f1a2 030c 	sub.w	r3, r2, #12
 8003700:	1f09      	subs	r1, r1, #4
 8003702:	3a10      	subs	r2, #16
 8003704:	ee61 0a00 	vmul.f32	s1, s2, s0
 8003708:	4281      	cmp	r1, r0
 800370a:	edc3 0a00 	vstr	s1, [r3]
 800370e:	d2d5      	bcs.n	80036bc <forward_neg+0xa0>
 8003710:	bcf0      	pop	{r4, r5, r6, r7}
 8003712:	4770      	bx	lr

08003714 <nl_func_reciprocal_array_f32>:
 8003714:	6889      	ldr	r1, [r1, #8]
 8003716:	6880      	ldr	r0, [r0, #8]
 8003718:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800371c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003720:	1f1b      	subs	r3, r3, #4
 8003722:	1f12      	subs	r2, r2, #4
 8003724:	428b      	cmp	r3, r1
 8003726:	d331      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003728:	ed93 0a00 	vldr	s0, [r3]
 800372c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003730:	1f18      	subs	r0, r3, #4
 8003732:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003736:	4288      	cmp	r0, r1
 8003738:	ed82 0a00 	vstr	s0, [r2]
 800373c:	d326      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 800373e:	edd0 0a00 	vldr	s1, [r0]
 8003742:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003746:	1f13      	subs	r3, r2, #4
 8003748:	1f00      	subs	r0, r0, #4
 800374a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800374e:	4288      	cmp	r0, r1
 8003750:	ed83 0a00 	vstr	s0, [r3]
 8003754:	d31a      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003756:	ed90 0a00 	vldr	s0, [r0]
 800375a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800375e:	f1a2 0308 	sub.w	r3, r2, #8
 8003762:	1f00      	subs	r0, r0, #4
 8003764:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003768:	4288      	cmp	r0, r1
 800376a:	ed83 0a00 	vstr	s0, [r3]
 800376e:	d30d      	bcc.n	800378c <nl_func_reciprocal_array_f32+0x78>
 8003770:	edd0 0a00 	vldr	s1, [r0]
 8003774:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003778:	f1a2 030c 	sub.w	r3, r2, #12
 800377c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003780:	ed83 0a00 	vstr	s0, [r3]
 8003784:	1f03      	subs	r3, r0, #4
 8003786:	3a10      	subs	r2, #16
 8003788:	428b      	cmp	r3, r1
 800378a:	d2cd      	bcs.n	8003728 <nl_func_reciprocal_array_f32+0x14>
 800378c:	4770      	bx	lr
	...

08003790 <forward_reciprocal>:
 8003790:	b4f0      	push	{r4, r5, r6, r7}
 8003792:	6942      	ldr	r2, [r0, #20]
 8003794:	8811      	ldrh	r1, [r2, #0]
 8003796:	2900      	cmp	r1, #0
 8003798:	bf1a      	itte	ne
 800379a:	6850      	ldrne	r0, [r2, #4]
 800379c:	1d00      	addne	r0, r0, #4
 800379e:	2004      	moveq	r0, #4
 80037a0:	f04f 0501 	mov.w	r5, #1
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	2800      	cmp	r0, #0
 80037a8:	bf14      	ite	ne
 80037aa:	6803      	ldrne	r3, [r0, #0]
 80037ac:	2300      	moveq	r3, #0
 80037ae:	2902      	cmp	r1, #2
 80037b0:	bfa6      	itte	ge
 80037b2:	6850      	ldrge	r0, [r2, #4]
 80037b4:	3010      	addge	r0, #16
 80037b6:	2004      	movlt	r0, #4
 80037b8:	6800      	ldr	r0, [r0, #0]
 80037ba:	2800      	cmp	r0, #0
 80037bc:	bf19      	ittee	ne
 80037be:	6800      	ldrne	r0, [r0, #0]
 80037c0:	f100 0418 	addne.w	r4, r0, #24
 80037c4:	2100      	moveq	r1, #0
 80037c6:	f101 0418 	addeq.w	r4, r1, #24
 80037ca:	f103 0108 	add.w	r1, r3, #8
 80037ce:	680a      	ldr	r2, [r1, #0]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	d01e      	beq.n	8003812 <forward_reciprocal+0x82>
 80037d4:	684e      	ldr	r6, [r1, #4]
 80037d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037da:	4610      	mov	r0, r2
 80037dc:	1f0f      	subs	r7, r1, #4
 80037de:	f010 0103 	ands.w	r1, r0, #3
 80037e2:	d006      	beq.n	80037f2 <forward_reciprocal+0x62>
 80037e4:	1e52      	subs	r2, r2, #1
 80037e6:	f857 c904 	ldr.w	ip, [r7], #-4
 80037ea:	1e49      	subs	r1, r1, #1
 80037ec:	fb0c f505 	mul.w	r5, ip, r5
 80037f0:	d1f8      	bne.n	80037e4 <forward_reciprocal+0x54>
 80037f2:	0880      	lsrs	r0, r0, #2
 80037f4:	d00d      	beq.n	8003812 <forward_reciprocal+0x82>
 80037f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037fa:	3910      	subs	r1, #16
 80037fc:	68ca      	ldr	r2, [r1, #12]
 80037fe:	688e      	ldr	r6, [r1, #8]
 8003800:	684f      	ldr	r7, [r1, #4]
 8003802:	4372      	muls	r2, r6
 8003804:	f851 6910 	ldr.w	r6, [r1], #-16
 8003808:	437a      	muls	r2, r7
 800380a:	4372      	muls	r2, r6
 800380c:	4355      	muls	r5, r2
 800380e:	1e40      	subs	r0, r0, #1
 8003810:	d1f4      	bne.n	80037fc <forward_reciprocal+0x6c>
 8003812:	6998      	ldr	r0, [r3, #24]
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	6880      	ldr	r0, [r0, #8]
 8003818:	6893      	ldr	r3, [r2, #8]
 800381a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800381e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003822:	1f09      	subs	r1, r1, #4
 8003824:	1f22      	subs	r2, r4, #4
 8003826:	4281      	cmp	r1, r0
 8003828:	f0c0 8032 	bcc.w	8003890 <forward_reciprocal+0x100>
 800382c:	ed91 0a00 	vldr	s0, [r1]
 8003830:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003834:	1f09      	subs	r1, r1, #4
 8003836:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800383a:	4281      	cmp	r1, r0
 800383c:	ed82 0a00 	vstr	s0, [r2]
 8003840:	d326      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003842:	edd1 0a00 	vldr	s1, [r1]
 8003846:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800384a:	1f13      	subs	r3, r2, #4
 800384c:	1f09      	subs	r1, r1, #4
 800384e:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003852:	4281      	cmp	r1, r0
 8003854:	ed83 0a00 	vstr	s0, [r3]
 8003858:	d31a      	bcc.n	8003890 <forward_reciprocal+0x100>
 800385a:	ed91 0a00 	vldr	s0, [r1]
 800385e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003862:	f1a2 0308 	sub.w	r3, r2, #8
 8003866:	1f09      	subs	r1, r1, #4
 8003868:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800386c:	4281      	cmp	r1, r0
 800386e:	ed83 0a00 	vstr	s0, [r3]
 8003872:	d30d      	bcc.n	8003890 <forward_reciprocal+0x100>
 8003874:	edd1 0a00 	vldr	s1, [r1]
 8003878:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800387c:	f1a2 030c 	sub.w	r3, r2, #12
 8003880:	1f09      	subs	r1, r1, #4
 8003882:	3a10      	subs	r2, #16
 8003884:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003888:	4281      	cmp	r1, r0
 800388a:	ed83 0a00 	vstr	s0, [r3]
 800388e:	d2cd      	bcs.n	800382c <forward_reciprocal+0x9c>
 8003890:	bcf0      	pop	{r4, r5, r6, r7}
 8003892:	4770      	bx	lr

08003894 <nl_func_exp_array_f32>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	688c      	ldr	r4, [r1, #8]
 8003898:	6880      	ldr	r0, [r0, #8]
 800389a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800389e:	1f0d      	subs	r5, r1, #4
 80038a0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80038a4:	1f0e      	subs	r6, r1, #4
 80038a6:	42a5      	cmp	r5, r4
 80038a8:	f0c0 800a 	bcc.w	80038c0 <nl_func_exp_array_f32+0x2c>
 80038ac:	ed95 0a00 	vldr	s0, [r5]
 80038b0:	f00c fcde 	bl	8010270 <expf>
 80038b4:	ed86 0a00 	vstr	s0, [r6]
 80038b8:	1f2d      	subs	r5, r5, #4
 80038ba:	1f36      	subs	r6, r6, #4
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d2f5      	bcs.n	80038ac <nl_func_exp_array_f32+0x18>
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080038c4 <forward_exp>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b081      	sub	sp, #4
 80038c8:	6942      	ldr	r2, [r0, #20]
 80038ca:	8811      	ldrh	r1, [r2, #0]
 80038cc:	2900      	cmp	r1, #0
 80038ce:	bf1a      	itte	ne
 80038d0:	6850      	ldrne	r0, [r2, #4]
 80038d2:	1d00      	addne	r0, r0, #4
 80038d4:	2004      	moveq	r0, #4
 80038d6:	f04f 0501 	mov.w	r5, #1
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	2800      	cmp	r0, #0
 80038de:	bf14      	ite	ne
 80038e0:	6803      	ldrne	r3, [r0, #0]
 80038e2:	2300      	moveq	r3, #0
 80038e4:	2902      	cmp	r1, #2
 80038e6:	bfa6      	itte	ge
 80038e8:	6850      	ldrge	r0, [r2, #4]
 80038ea:	3010      	addge	r0, #16
 80038ec:	2004      	movlt	r0, #4
 80038ee:	6800      	ldr	r0, [r0, #0]
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bf19      	ittee	ne
 80038f4:	6800      	ldrne	r0, [r0, #0]
 80038f6:	f100 0418 	addne.w	r4, r0, #24
 80038fa:	2100      	moveq	r1, #0
 80038fc:	f101 0418 	addeq.w	r4, r1, #24
 8003900:	f103 0108 	add.w	r1, r3, #8
 8003904:	680a      	ldr	r2, [r1, #0]
 8003906:	0a12      	lsrs	r2, r2, #8
 8003908:	d01e      	beq.n	8003948 <forward_exp+0x84>
 800390a:	684e      	ldr	r6, [r1, #4]
 800390c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003910:	4610      	mov	r0, r2
 8003912:	1f0f      	subs	r7, r1, #4
 8003914:	f010 0103 	ands.w	r1, r0, #3
 8003918:	d006      	beq.n	8003928 <forward_exp+0x64>
 800391a:	1e52      	subs	r2, r2, #1
 800391c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003920:	1e49      	subs	r1, r1, #1
 8003922:	fb0c f505 	mul.w	r5, ip, r5
 8003926:	d1f8      	bne.n	800391a <forward_exp+0x56>
 8003928:	0880      	lsrs	r0, r0, #2
 800392a:	d00d      	beq.n	8003948 <forward_exp+0x84>
 800392c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003930:	3910      	subs	r1, #16
 8003932:	68ca      	ldr	r2, [r1, #12]
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	684f      	ldr	r7, [r1, #4]
 8003938:	4372      	muls	r2, r6
 800393a:	f851 6910 	ldr.w	r6, [r1], #-16
 800393e:	437a      	muls	r2, r7
 8003940:	4372      	muls	r2, r6
 8003942:	4355      	muls	r5, r2
 8003944:	1e40      	subs	r0, r0, #1
 8003946:	d1f4      	bne.n	8003932 <forward_exp+0x6e>
 8003948:	6998      	ldr	r0, [r3, #24]
 800394a:	6886      	ldr	r6, [r0, #8]
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003952:	1f07      	subs	r7, r0, #4
 8003954:	6888      	ldr	r0, [r1, #8]
 8003956:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800395a:	1f14      	subs	r4, r2, #4
 800395c:	42b7      	cmp	r7, r6
 800395e:	d309      	bcc.n	8003974 <forward_exp+0xb0>
 8003960:	ed97 0a00 	vldr	s0, [r7]
 8003964:	f00c fc84 	bl	8010270 <expf>
 8003968:	ed84 0a00 	vstr	s0, [r4]
 800396c:	1f3f      	subs	r7, r7, #4
 800396e:	1f24      	subs	r4, r4, #4
 8003970:	42b7      	cmp	r7, r6
 8003972:	d2f5      	bcs.n	8003960 <forward_exp+0x9c>
 8003974:	b001      	add	sp, #4
 8003976:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003978 <nl_func_sigmoid_array_f32>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	688c      	ldr	r4, [r1, #8]
 800397c:	6880      	ldr	r0, [r0, #8]
 800397e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003982:	1f0d      	subs	r5, r1, #4
 8003984:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003988:	1f0e      	subs	r6, r1, #4
 800398a:	42a5      	cmp	r5, r4
 800398c:	f0c0 8014 	bcc.w	80039b8 <nl_func_sigmoid_array_f32+0x40>
 8003990:	ed95 0a00 	vldr	s0, [r5]
 8003994:	eeb1 0a40 	vneg.f32	s0, s0
 8003998:	f00c fc6a 	bl	8010270 <expf>
 800399c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80039a0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80039a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80039a8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80039ac:	ed86 0a00 	vstr	s0, [r6]
 80039b0:	1f2d      	subs	r5, r5, #4
 80039b2:	1f36      	subs	r6, r6, #4
 80039b4:	42a5      	cmp	r5, r4
 80039b6:	d2eb      	bcs.n	8003990 <nl_func_sigmoid_array_f32+0x18>
 80039b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080039bc <forward_sigmoid>:
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b081      	sub	sp, #4
 80039c0:	6942      	ldr	r2, [r0, #20]
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	2900      	cmp	r1, #0
 80039c6:	bf1a      	itte	ne
 80039c8:	6850      	ldrne	r0, [r2, #4]
 80039ca:	1d00      	addne	r0, r0, #4
 80039cc:	2004      	moveq	r0, #4
 80039ce:	f04f 0501 	mov.w	r5, #1
 80039d2:	6800      	ldr	r0, [r0, #0]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	bf14      	ite	ne
 80039d8:	6803      	ldrne	r3, [r0, #0]
 80039da:	2300      	moveq	r3, #0
 80039dc:	2902      	cmp	r1, #2
 80039de:	bfa6      	itte	ge
 80039e0:	6850      	ldrge	r0, [r2, #4]
 80039e2:	3010      	addge	r0, #16
 80039e4:	2004      	movlt	r0, #4
 80039e6:	6800      	ldr	r0, [r0, #0]
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bf19      	ittee	ne
 80039ec:	6800      	ldrne	r0, [r0, #0]
 80039ee:	f100 0418 	addne.w	r4, r0, #24
 80039f2:	2100      	moveq	r1, #0
 80039f4:	f101 0418 	addeq.w	r4, r1, #24
 80039f8:	f103 0108 	add.w	r1, r3, #8
 80039fc:	680a      	ldr	r2, [r1, #0]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	d01e      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a02:	684e      	ldr	r6, [r1, #4]
 8003a04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a08:	4610      	mov	r0, r2
 8003a0a:	1f0f      	subs	r7, r1, #4
 8003a0c:	f010 0103 	ands.w	r1, r0, #3
 8003a10:	d006      	beq.n	8003a20 <forward_sigmoid+0x64>
 8003a12:	1e52      	subs	r2, r2, #1
 8003a14:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a18:	1e49      	subs	r1, r1, #1
 8003a1a:	fb0c f505 	mul.w	r5, ip, r5
 8003a1e:	d1f8      	bne.n	8003a12 <forward_sigmoid+0x56>
 8003a20:	0880      	lsrs	r0, r0, #2
 8003a22:	d00d      	beq.n	8003a40 <forward_sigmoid+0x84>
 8003a24:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a28:	3910      	subs	r1, #16
 8003a2a:	68ca      	ldr	r2, [r1, #12]
 8003a2c:	688e      	ldr	r6, [r1, #8]
 8003a2e:	684f      	ldr	r7, [r1, #4]
 8003a30:	4372      	muls	r2, r6
 8003a32:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a36:	437a      	muls	r2, r7
 8003a38:	4372      	muls	r2, r6
 8003a3a:	4355      	muls	r5, r2
 8003a3c:	1e40      	subs	r0, r0, #1
 8003a3e:	d1f4      	bne.n	8003a2a <forward_sigmoid+0x6e>
 8003a40:	6998      	ldr	r0, [r3, #24]
 8003a42:	6886      	ldr	r6, [r0, #8]
 8003a44:	6821      	ldr	r1, [r4, #0]
 8003a46:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a4a:	1f07      	subs	r7, r0, #4
 8003a4c:	6888      	ldr	r0, [r1, #8]
 8003a4e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a52:	1f14      	subs	r4, r2, #4
 8003a54:	42b7      	cmp	r7, r6
 8003a56:	d313      	bcc.n	8003a80 <forward_sigmoid+0xc4>
 8003a58:	ed97 0a00 	vldr	s0, [r7]
 8003a5c:	eeb1 0a40 	vneg.f32	s0, s0
 8003a60:	f00c fc06 	bl	8010270 <expf>
 8003a64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a68:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a70:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a74:	ed84 0a00 	vstr	s0, [r4]
 8003a78:	1f3f      	subs	r7, r7, #4
 8003a7a:	1f24      	subs	r4, r4, #4
 8003a7c:	42b7      	cmp	r7, r6
 8003a7e:	d2eb      	bcs.n	8003a58 <forward_sigmoid+0x9c>
 8003a80:	b001      	add	sp, #4
 8003a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a84 <nl_func_sign_array_f32>:
 8003a84:	6889      	ldr	r1, [r1, #8]
 8003a86:	6880      	ldr	r0, [r0, #8]
 8003a88:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a8c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a90:	1f1b      	subs	r3, r3, #4
 8003a92:	1f10      	subs	r0, r2, #4
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d314      	bcc.n	8003ac2 <nl_func_sign_array_f32+0x3e>
 8003a98:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9c:	ed93 0a00 	vldr	s0, [r3]
 8003aa0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa8:	bfcc      	ite	gt
 8003aaa:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b90 <.text_49>
 8003aae:	ee00 2a10 	vmovle	s0, r2
 8003ab2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003ab6:	ed80 0a00 	vstr	s0, [r0]
 8003aba:	1f1b      	subs	r3, r3, #4
 8003abc:	1f00      	subs	r0, r0, #4
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d2ec      	bcs.n	8003a9c <nl_func_sign_array_f32+0x18>
 8003ac2:	4770      	bx	lr

08003ac4 <forward_sign>:
 8003ac4:	b4f0      	push	{r4, r5, r6, r7}
 8003ac6:	6942      	ldr	r2, [r0, #20]
 8003ac8:	8811      	ldrh	r1, [r2, #0]
 8003aca:	2900      	cmp	r1, #0
 8003acc:	bf1a      	itte	ne
 8003ace:	6850      	ldrne	r0, [r2, #4]
 8003ad0:	1d00      	addne	r0, r0, #4
 8003ad2:	2004      	moveq	r0, #4
 8003ad4:	f04f 0501 	mov.w	r5, #1
 8003ad8:	6800      	ldr	r0, [r0, #0]
 8003ada:	2800      	cmp	r0, #0
 8003adc:	bf14      	ite	ne
 8003ade:	6803      	ldrne	r3, [r0, #0]
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	2901      	cmp	r1, #1
 8003ae4:	bfc6      	itte	gt
 8003ae6:	6850      	ldrgt	r0, [r2, #4]
 8003ae8:	3010      	addgt	r0, #16
 8003aea:	2004      	movle	r0, #4
 8003aec:	6800      	ldr	r0, [r0, #0]
 8003aee:	2800      	cmp	r0, #0
 8003af0:	bf19      	ittee	ne
 8003af2:	6800      	ldrne	r0, [r0, #0]
 8003af4:	f100 0418 	addne.w	r4, r0, #24
 8003af8:	2100      	moveq	r1, #0
 8003afa:	f101 0418 	addeq.w	r4, r1, #24
 8003afe:	f103 0108 	add.w	r1, r3, #8
 8003b02:	680a      	ldr	r2, [r1, #0]
 8003b04:	0a12      	lsrs	r2, r2, #8
 8003b06:	d01e      	beq.n	8003b46 <forward_sign+0x82>
 8003b08:	684e      	ldr	r6, [r1, #4]
 8003b0a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b0e:	4610      	mov	r0, r2
 8003b10:	1f0f      	subs	r7, r1, #4
 8003b12:	f010 0103 	ands.w	r1, r0, #3
 8003b16:	d006      	beq.n	8003b26 <forward_sign+0x62>
 8003b18:	1e52      	subs	r2, r2, #1
 8003b1a:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b1e:	1e49      	subs	r1, r1, #1
 8003b20:	fb0c f505 	mul.w	r5, ip, r5
 8003b24:	d1f8      	bne.n	8003b18 <forward_sign+0x54>
 8003b26:	0880      	lsrs	r0, r0, #2
 8003b28:	d00d      	beq.n	8003b46 <forward_sign+0x82>
 8003b2a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b2e:	3910      	subs	r1, #16
 8003b30:	68ca      	ldr	r2, [r1, #12]
 8003b32:	688e      	ldr	r6, [r1, #8]
 8003b34:	684f      	ldr	r7, [r1, #4]
 8003b36:	4372      	muls	r2, r6
 8003b38:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b3c:	437a      	muls	r2, r7
 8003b3e:	4372      	muls	r2, r6
 8003b40:	4355      	muls	r5, r2
 8003b42:	1e40      	subs	r0, r0, #1
 8003b44:	d1f4      	bne.n	8003b30 <forward_sign+0x6c>
 8003b46:	6998      	ldr	r0, [r3, #24]
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	6880      	ldr	r0, [r0, #8]
 8003b4c:	6893      	ldr	r3, [r2, #8]
 8003b4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b52:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b56:	1f09      	subs	r1, r1, #4
 8003b58:	1f22      	subs	r2, r4, #4
 8003b5a:	4281      	cmp	r1, r0
 8003b5c:	f0c0 8015 	bcc.w	8003b8a <forward_sign+0xc6>
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	ed91 0a00 	vldr	s0, [r1]
 8003b68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	bfcc      	ite	gt
 8003b72:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b90 <.text_49>
 8003b76:	ee00 3a10 	vmovle	s0, r3
 8003b7a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b7e:	ed82 0a00 	vstr	s0, [r2]
 8003b82:	1f09      	subs	r1, r1, #4
 8003b84:	1f12      	subs	r2, r2, #4
 8003b86:	4281      	cmp	r1, r0
 8003b88:	d2ec      	bcs.n	8003b64 <forward_sign+0xa0>
 8003b8a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b8c:	4770      	bx	lr
	...

08003b90 <.text_49>:
 8003b90:	00000001 	.word	0x00000001

08003b94 <nl_func_sqrt_array_f32>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	6880      	ldr	r0, [r0, #8]
 8003b9a:	68a1      	ldr	r1, [r4, #8]
 8003b9c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ba0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ba4:	1f1d      	subs	r5, r3, #4
 8003ba6:	1f16      	subs	r6, r2, #4
 8003ba8:	428d      	cmp	r5, r1
 8003baa:	d30a      	bcc.n	8003bc2 <nl_func_sqrt_array_f32+0x2e>
 8003bac:	ed95 0a00 	vldr	s0, [r5]
 8003bb0:	f001 fba4 	bl	80052fc <ai_math_sqrt>
 8003bb4:	ed86 0a00 	vstr	s0, [r6]
 8003bb8:	1f2d      	subs	r5, r5, #4
 8003bba:	68a0      	ldr	r0, [r4, #8]
 8003bbc:	1f36      	subs	r6, r6, #4
 8003bbe:	4285      	cmp	r5, r0
 8003bc0:	d2f4      	bcs.n	8003bac <nl_func_sqrt_array_f32+0x18>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}

08003bc4 <forward_sqrt>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	b081      	sub	sp, #4
 8003bc8:	6942      	ldr	r2, [r0, #20]
 8003bca:	8811      	ldrh	r1, [r2, #0]
 8003bcc:	2900      	cmp	r1, #0
 8003bce:	bf1a      	itte	ne
 8003bd0:	6850      	ldrne	r0, [r2, #4]
 8003bd2:	1d00      	addne	r0, r0, #4
 8003bd4:	2004      	moveq	r0, #4
 8003bd6:	f04f 0501 	mov.w	r5, #1
 8003bda:	6800      	ldr	r0, [r0, #0]
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	bf14      	ite	ne
 8003be0:	6803      	ldrne	r3, [r0, #0]
 8003be2:	2300      	moveq	r3, #0
 8003be4:	2902      	cmp	r1, #2
 8003be6:	bfa6      	itte	ge
 8003be8:	6850      	ldrge	r0, [r2, #4]
 8003bea:	3010      	addge	r0, #16
 8003bec:	2004      	movlt	r0, #4
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	bf19      	ittee	ne
 8003bf4:	6800      	ldrne	r0, [r0, #0]
 8003bf6:	f100 0418 	addne.w	r4, r0, #24
 8003bfa:	2100      	moveq	r1, #0
 8003bfc:	f101 0418 	addeq.w	r4, r1, #24
 8003c00:	f103 0108 	add.w	r1, r3, #8
 8003c04:	680a      	ldr	r2, [r1, #0]
 8003c06:	0a12      	lsrs	r2, r2, #8
 8003c08:	d01e      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c0a:	684e      	ldr	r6, [r1, #4]
 8003c0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c10:	4610      	mov	r0, r2
 8003c12:	1f0f      	subs	r7, r1, #4
 8003c14:	f010 0103 	ands.w	r1, r0, #3
 8003c18:	d006      	beq.n	8003c28 <forward_sqrt+0x64>
 8003c1a:	1e52      	subs	r2, r2, #1
 8003c1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c20:	1e49      	subs	r1, r1, #1
 8003c22:	fb0c f505 	mul.w	r5, ip, r5
 8003c26:	d1f8      	bne.n	8003c1a <forward_sqrt+0x56>
 8003c28:	0880      	lsrs	r0, r0, #2
 8003c2a:	d00d      	beq.n	8003c48 <forward_sqrt+0x84>
 8003c2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c30:	3910      	subs	r1, #16
 8003c32:	68ca      	ldr	r2, [r1, #12]
 8003c34:	688e      	ldr	r6, [r1, #8]
 8003c36:	684f      	ldr	r7, [r1, #4]
 8003c38:	4372      	muls	r2, r6
 8003c3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c3e:	437a      	muls	r2, r7
 8003c40:	4372      	muls	r2, r6
 8003c42:	4355      	muls	r5, r2
 8003c44:	1e40      	subs	r0, r0, #1
 8003c46:	d1f4      	bne.n	8003c32 <forward_sqrt+0x6e>
 8003c48:	699e      	ldr	r6, [r3, #24]
 8003c4a:	68b0      	ldr	r0, [r6, #8]
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c52:	1f0f      	subs	r7, r1, #4
 8003c54:	6891      	ldr	r1, [r2, #8]
 8003c56:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c5a:	1f1c      	subs	r4, r3, #4
 8003c5c:	4287      	cmp	r7, r0
 8003c5e:	d30a      	bcc.n	8003c76 <forward_sqrt+0xb2>
 8003c60:	ed97 0a00 	vldr	s0, [r7]
 8003c64:	f001 fb4a 	bl	80052fc <ai_math_sqrt>
 8003c68:	ed84 0a00 	vstr	s0, [r4]
 8003c6c:	1f3f      	subs	r7, r7, #4
 8003c6e:	68b0      	ldr	r0, [r6, #8]
 8003c70:	1f24      	subs	r4, r4, #4
 8003c72:	4287      	cmp	r7, r0
 8003c74:	d2f4      	bcs.n	8003c60 <forward_sqrt+0x9c>
 8003c76:	b001      	add	sp, #4
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c7c <nl_func_soft_plus_array_f32>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	688c      	ldr	r4, [r1, #8]
 8003c80:	6880      	ldr	r0, [r0, #8]
 8003c82:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c86:	1f0d      	subs	r5, r1, #4
 8003c88:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c8c:	1f0e      	subs	r6, r1, #4
 8003c8e:	42a5      	cmp	r5, r4
 8003c90:	f0c0 8010 	bcc.w	8003cb4 <nl_func_soft_plus_array_f32+0x38>
 8003c94:	ed95 0a00 	vldr	s0, [r5]
 8003c98:	f00c faea 	bl	8010270 <expf>
 8003c9c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ca0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003ca4:	f00c fbba 	bl	801041c <logf>
 8003ca8:	ed86 0a00 	vstr	s0, [r6]
 8003cac:	1f2d      	subs	r5, r5, #4
 8003cae:	1f36      	subs	r6, r6, #4
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d2ef      	bcs.n	8003c94 <nl_func_soft_plus_array_f32+0x18>
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb8 <forward_soft_plus>:
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b081      	sub	sp, #4
 8003cbc:	6942      	ldr	r2, [r0, #20]
 8003cbe:	8811      	ldrh	r1, [r2, #0]
 8003cc0:	2900      	cmp	r1, #0
 8003cc2:	bf1a      	itte	ne
 8003cc4:	6850      	ldrne	r0, [r2, #4]
 8003cc6:	1d00      	addne	r0, r0, #4
 8003cc8:	2004      	moveq	r0, #4
 8003cca:	f04f 0501 	mov.w	r5, #1
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	bf14      	ite	ne
 8003cd4:	6803      	ldrne	r3, [r0, #0]
 8003cd6:	2300      	moveq	r3, #0
 8003cd8:	2902      	cmp	r1, #2
 8003cda:	bfa6      	itte	ge
 8003cdc:	6850      	ldrge	r0, [r2, #4]
 8003cde:	3010      	addge	r0, #16
 8003ce0:	2004      	movlt	r0, #4
 8003ce2:	6800      	ldr	r0, [r0, #0]
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	bf19      	ittee	ne
 8003ce8:	6800      	ldrne	r0, [r0, #0]
 8003cea:	f100 0418 	addne.w	r4, r0, #24
 8003cee:	2100      	moveq	r1, #0
 8003cf0:	f101 0418 	addeq.w	r4, r1, #24
 8003cf4:	f103 0108 	add.w	r1, r3, #8
 8003cf8:	680a      	ldr	r2, [r1, #0]
 8003cfa:	0a12      	lsrs	r2, r2, #8
 8003cfc:	d01e      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003cfe:	684e      	ldr	r6, [r1, #4]
 8003d00:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d04:	4610      	mov	r0, r2
 8003d06:	1f0f      	subs	r7, r1, #4
 8003d08:	f010 0103 	ands.w	r1, r0, #3
 8003d0c:	d006      	beq.n	8003d1c <forward_soft_plus+0x64>
 8003d0e:	1e52      	subs	r2, r2, #1
 8003d10:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d14:	1e49      	subs	r1, r1, #1
 8003d16:	fb0c f505 	mul.w	r5, ip, r5
 8003d1a:	d1f8      	bne.n	8003d0e <forward_soft_plus+0x56>
 8003d1c:	0880      	lsrs	r0, r0, #2
 8003d1e:	d00d      	beq.n	8003d3c <forward_soft_plus+0x84>
 8003d20:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d24:	3910      	subs	r1, #16
 8003d26:	68ca      	ldr	r2, [r1, #12]
 8003d28:	688e      	ldr	r6, [r1, #8]
 8003d2a:	684f      	ldr	r7, [r1, #4]
 8003d2c:	4372      	muls	r2, r6
 8003d2e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d32:	437a      	muls	r2, r7
 8003d34:	4372      	muls	r2, r6
 8003d36:	4355      	muls	r5, r2
 8003d38:	1e40      	subs	r0, r0, #1
 8003d3a:	d1f4      	bne.n	8003d26 <forward_soft_plus+0x6e>
 8003d3c:	6998      	ldr	r0, [r3, #24]
 8003d3e:	6886      	ldr	r6, [r0, #8]
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d46:	1f07      	subs	r7, r0, #4
 8003d48:	6888      	ldr	r0, [r1, #8]
 8003d4a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d4e:	1f14      	subs	r4, r2, #4
 8003d50:	42b7      	cmp	r7, r6
 8003d52:	d30f      	bcc.n	8003d74 <forward_soft_plus+0xbc>
 8003d54:	ed97 0a00 	vldr	s0, [r7]
 8003d58:	f00c fa8a 	bl	8010270 <expf>
 8003d5c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d64:	f00c fb5a 	bl	801041c <logf>
 8003d68:	ed84 0a00 	vstr	s0, [r4]
 8003d6c:	1f3f      	subs	r7, r7, #4
 8003d6e:	1f24      	subs	r4, r4, #4
 8003d70:	42b7      	cmp	r7, r6
 8003d72:	d2ef      	bcs.n	8003d54 <forward_soft_plus+0x9c>
 8003d74:	b001      	add	sp, #4
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <nl_func_soft_sign_array_f32>:
 8003d78:	6889      	ldr	r1, [r1, #8]
 8003d7a:	6880      	ldr	r0, [r0, #8]
 8003d7c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d80:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d84:	1f1b      	subs	r3, r3, #4
 8003d86:	1f10      	subs	r0, r2, #4
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	d30f      	bcc.n	8003dac <nl_func_soft_sign_array_f32+0x34>
 8003d8c:	ed93 0a00 	vldr	s0, [r3]
 8003d90:	eef0 0ac0 	vabs.f32	s1, s0
 8003d94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d98:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d9c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003da0:	ed80 0a00 	vstr	s0, [r0]
 8003da4:	1f1b      	subs	r3, r3, #4
 8003da6:	1f00      	subs	r0, r0, #4
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d2ef      	bcs.n	8003d8c <nl_func_soft_sign_array_f32+0x14>
 8003dac:	4770      	bx	lr
	...

08003db0 <forward_soft_sign>:
 8003db0:	b4f0      	push	{r4, r5, r6, r7}
 8003db2:	6942      	ldr	r2, [r0, #20]
 8003db4:	8811      	ldrh	r1, [r2, #0]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	bf1a      	itte	ne
 8003dba:	6850      	ldrne	r0, [r2, #4]
 8003dbc:	1d00      	addne	r0, r0, #4
 8003dbe:	2004      	moveq	r0, #4
 8003dc0:	f04f 0501 	mov.w	r5, #1
 8003dc4:	6800      	ldr	r0, [r0, #0]
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	bf14      	ite	ne
 8003dca:	6803      	ldrne	r3, [r0, #0]
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	2902      	cmp	r1, #2
 8003dd0:	bfa6      	itte	ge
 8003dd2:	6850      	ldrge	r0, [r2, #4]
 8003dd4:	3010      	addge	r0, #16
 8003dd6:	2004      	movlt	r0, #4
 8003dd8:	6800      	ldr	r0, [r0, #0]
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	bf19      	ittee	ne
 8003dde:	6800      	ldrne	r0, [r0, #0]
 8003de0:	f100 0418 	addne.w	r4, r0, #24
 8003de4:	2100      	moveq	r1, #0
 8003de6:	f101 0418 	addeq.w	r4, r1, #24
 8003dea:	f103 0108 	add.w	r1, r3, #8
 8003dee:	680a      	ldr	r2, [r1, #0]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	d01e      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003df4:	684e      	ldr	r6, [r1, #4]
 8003df6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	1f0f      	subs	r7, r1, #4
 8003dfe:	f010 0103 	ands.w	r1, r0, #3
 8003e02:	d006      	beq.n	8003e12 <forward_soft_sign+0x62>
 8003e04:	1e52      	subs	r2, r2, #1
 8003e06:	f857 c904 	ldr.w	ip, [r7], #-4
 8003e0a:	1e49      	subs	r1, r1, #1
 8003e0c:	fb0c f505 	mul.w	r5, ip, r5
 8003e10:	d1f8      	bne.n	8003e04 <forward_soft_sign+0x54>
 8003e12:	0880      	lsrs	r0, r0, #2
 8003e14:	d00d      	beq.n	8003e32 <forward_soft_sign+0x82>
 8003e16:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003e1a:	3910      	subs	r1, #16
 8003e1c:	68ca      	ldr	r2, [r1, #12]
 8003e1e:	688e      	ldr	r6, [r1, #8]
 8003e20:	684f      	ldr	r7, [r1, #4]
 8003e22:	4372      	muls	r2, r6
 8003e24:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e28:	437a      	muls	r2, r7
 8003e2a:	4372      	muls	r2, r6
 8003e2c:	4355      	muls	r5, r2
 8003e2e:	1e40      	subs	r0, r0, #1
 8003e30:	d1f4      	bne.n	8003e1c <forward_soft_sign+0x6c>
 8003e32:	6998      	ldr	r0, [r3, #24]
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6880      	ldr	r0, [r0, #8]
 8003e38:	6893      	ldr	r3, [r2, #8]
 8003e3a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e3e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e42:	1f09      	subs	r1, r1, #4
 8003e44:	1f22      	subs	r2, r4, #4
 8003e46:	4281      	cmp	r1, r0
 8003e48:	f0c0 8010 	bcc.w	8003e6c <forward_soft_sign+0xbc>
 8003e4c:	ed91 0a00 	vldr	s0, [r1]
 8003e50:	eef0 0ac0 	vabs.f32	s1, s0
 8003e54:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e58:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e5c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e60:	ed82 0a00 	vstr	s0, [r2]
 8003e64:	1f09      	subs	r1, r1, #4
 8003e66:	1f12      	subs	r2, r2, #4
 8003e68:	4281      	cmp	r1, r0
 8003e6a:	d2ef      	bcs.n	8003e4c <forward_soft_sign+0x9c>
 8003e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e6e:	4770      	bx	lr

08003e70 <nl_func_tanh_array_f32>:
 8003e70:	b570      	push	{r4, r5, r6, lr}
 8003e72:	688c      	ldr	r4, [r1, #8]
 8003e74:	6880      	ldr	r0, [r0, #8]
 8003e76:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e7a:	1f0d      	subs	r5, r1, #4
 8003e7c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e80:	1f0e      	subs	r6, r1, #4
 8003e82:	42a5      	cmp	r5, r4
 8003e84:	f0c0 800a 	bcc.w	8003e9c <nl_func_tanh_array_f32+0x2c>
 8003e88:	ed95 0a00 	vldr	s0, [r5]
 8003e8c:	f00b ffca 	bl	800fe24 <tanhf>
 8003e90:	ed86 0a00 	vstr	s0, [r6]
 8003e94:	1f2d      	subs	r5, r5, #4
 8003e96:	1f36      	subs	r6, r6, #4
 8003e98:	42a5      	cmp	r5, r4
 8003e9a:	d2f5      	bcs.n	8003e88 <nl_func_tanh_array_f32+0x18>
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ea0 <forward_tanh>:
 8003ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea2:	b081      	sub	sp, #4
 8003ea4:	6942      	ldr	r2, [r0, #20]
 8003ea6:	8811      	ldrh	r1, [r2, #0]
 8003ea8:	2900      	cmp	r1, #0
 8003eaa:	bf1a      	itte	ne
 8003eac:	6850      	ldrne	r0, [r2, #4]
 8003eae:	1d00      	addne	r0, r0, #4
 8003eb0:	2004      	moveq	r0, #4
 8003eb2:	f04f 0501 	mov.w	r5, #1
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	6803      	ldrne	r3, [r0, #0]
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	2902      	cmp	r1, #2
 8003ec2:	bfa6      	itte	ge
 8003ec4:	6850      	ldrge	r0, [r2, #4]
 8003ec6:	3010      	addge	r0, #16
 8003ec8:	2004      	movlt	r0, #4
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	bf19      	ittee	ne
 8003ed0:	6800      	ldrne	r0, [r0, #0]
 8003ed2:	f100 0418 	addne.w	r4, r0, #24
 8003ed6:	2100      	moveq	r1, #0
 8003ed8:	f101 0418 	addeq.w	r4, r1, #24
 8003edc:	f103 0108 	add.w	r1, r3, #8
 8003ee0:	680a      	ldr	r2, [r1, #0]
 8003ee2:	0a12      	lsrs	r2, r2, #8
 8003ee4:	d01e      	beq.n	8003f24 <forward_tanh+0x84>
 8003ee6:	684e      	ldr	r6, [r1, #4]
 8003ee8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003eec:	4610      	mov	r0, r2
 8003eee:	1f0f      	subs	r7, r1, #4
 8003ef0:	f010 0103 	ands.w	r1, r0, #3
 8003ef4:	d006      	beq.n	8003f04 <forward_tanh+0x64>
 8003ef6:	1e52      	subs	r2, r2, #1
 8003ef8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003efc:	1e49      	subs	r1, r1, #1
 8003efe:	fb0c f505 	mul.w	r5, ip, r5
 8003f02:	d1f8      	bne.n	8003ef6 <forward_tanh+0x56>
 8003f04:	0880      	lsrs	r0, r0, #2
 8003f06:	d00d      	beq.n	8003f24 <forward_tanh+0x84>
 8003f08:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003f0c:	3910      	subs	r1, #16
 8003f0e:	68ca      	ldr	r2, [r1, #12]
 8003f10:	688e      	ldr	r6, [r1, #8]
 8003f12:	684f      	ldr	r7, [r1, #4]
 8003f14:	4372      	muls	r2, r6
 8003f16:	f851 6910 	ldr.w	r6, [r1], #-16
 8003f1a:	437a      	muls	r2, r7
 8003f1c:	4372      	muls	r2, r6
 8003f1e:	4355      	muls	r5, r2
 8003f20:	1e40      	subs	r0, r0, #1
 8003f22:	d1f4      	bne.n	8003f0e <forward_tanh+0x6e>
 8003f24:	6998      	ldr	r0, [r3, #24]
 8003f26:	6886      	ldr	r6, [r0, #8]
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f2e:	1f07      	subs	r7, r0, #4
 8003f30:	6888      	ldr	r0, [r1, #8]
 8003f32:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f36:	1f14      	subs	r4, r2, #4
 8003f38:	42b7      	cmp	r7, r6
 8003f3a:	d309      	bcc.n	8003f50 <forward_tanh+0xb0>
 8003f3c:	ed97 0a00 	vldr	s0, [r7]
 8003f40:	f00b ff70 	bl	800fe24 <tanhf>
 8003f44:	ed84 0a00 	vstr	s0, [r4]
 8003f48:	1f3f      	subs	r7, r7, #4
 8003f4a:	1f24      	subs	r4, r4, #4
 8003f4c:	42b7      	cmp	r7, r6
 8003f4e:	d2f5      	bcs.n	8003f3c <forward_tanh+0x9c>
 8003f50:	b001      	add	sp, #4
 8003f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f54 <nl_func_relu_array_f32>:
 8003f54:	6889      	ldr	r1, [r1, #8]
 8003f56:	6880      	ldr	r0, [r0, #8]
 8003f58:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f60:	1f1b      	subs	r3, r3, #4
 8003f62:	1f10      	subs	r0, r2, #4
 8003f64:	428b      	cmp	r3, r1
 8003f66:	d30e      	bcc.n	8003f86 <nl_func_relu_array_f32+0x32>
 8003f68:	ed93 0a00 	vldr	s0, [r3]
 8003f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f74:	bf48      	it	mi
 8003f76:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 8004164 <.text_62>
 8003f7a:	ed80 0a00 	vstr	s0, [r0]
 8003f7e:	1f1b      	subs	r3, r3, #4
 8003f80:	1f00      	subs	r0, r0, #4
 8003f82:	428b      	cmp	r3, r1
 8003f84:	d2f0      	bcs.n	8003f68 <nl_func_relu_array_f32+0x14>
 8003f86:	4770      	bx	lr

08003f88 <nl_func_sm_channel_f32>:
 8003f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	688f      	ldr	r7, [r1, #8]
 8003f92:	6886      	ldr	r6, [r0, #8]
 8003f94:	ed97 8a00 	vldr	s16, [r7]
 8003f98:	4614      	mov	r4, r2
 8003f9a:	2c02      	cmp	r4, #2
 8003f9c:	eddf 8a71 	vldr	s17, [pc, #452]	; 8004164 <.text_62>
 8003fa0:	d33d      	bcc.n	800401e <nl_func_sm_channel_f32+0x96>
 8003fa2:	1e61      	subs	r1, r4, #1
 8003fa4:	1d3a      	adds	r2, r7, #4
 8003fa6:	f011 0003 	ands.w	r0, r1, #3
 8003faa:	d00c      	beq.n	8003fc6 <nl_func_sm_channel_f32+0x3e>
 8003fac:	ed92 0a00 	vldr	s0, [r2]
 8003fb0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb8:	bf58      	it	pl
 8003fba:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fbe:	1e40      	subs	r0, r0, #1
 8003fc0:	f102 0204 	add.w	r2, r2, #4
 8003fc4:	d1f2      	bne.n	8003fac <nl_func_sm_channel_f32+0x24>
 8003fc6:	0889      	lsrs	r1, r1, #2
 8003fc8:	f000 802b 	beq.w	8004022 <nl_func_sm_channel_f32+0x9a>
 8003fcc:	ed92 0a00 	vldr	s0, [r2]
 8003fd0:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	bf58      	it	pl
 8003fda:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fde:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fe2:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fea:	bf58      	it	pl
 8003fec:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003ff0:	ed92 0a02 	vldr	s0, [r2, #8]
 8003ff4:	eeb4 0a48 	vcmp.f32	s0, s16
 8003ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffc:	bf58      	it	pl
 8003ffe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004002:	ed92 0a03 	vldr	s0, [r2, #12]
 8004006:	eeb4 0a48 	vcmp.f32	s0, s16
 800400a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400e:	bf58      	it	pl
 8004010:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004014:	1e49      	subs	r1, r1, #1
 8004016:	f102 0210 	add.w	r2, r2, #16
 800401a:	d1d7      	bne.n	8003fcc <nl_func_sm_channel_f32+0x44>
 800401c:	e001      	b.n	8004022 <nl_func_sm_channel_f32+0x9a>
 800401e:	2c00      	cmp	r4, #0
 8004020:	d040      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 8004022:	46b0      	mov	r8, r6
 8004024:	ea4f 0504 	mov.w	r5, r4
 8004028:	ed97 0a00 	vldr	s0, [r7]
 800402c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004030:	f00c f91e 	bl	8010270 <expf>
 8004034:	1d3f      	adds	r7, r7, #4
 8004036:	ed88 0a00 	vstr	s0, [r8]
 800403a:	1e6d      	subs	r5, r5, #1
 800403c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004040:	f108 0804 	add.w	r8, r8, #4
 8004044:	d1f0      	bne.n	8004028 <nl_func_sm_channel_f32+0xa0>
 8004046:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800404a:	f014 0003 	ands.w	r0, r4, #3
 800404e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004052:	d009      	beq.n	8004068 <nl_func_sm_channel_f32+0xe0>
 8004054:	edd6 0a00 	vldr	s1, [r6]
 8004058:	ee60 0a80 	vmul.f32	s1, s1, s0
 800405c:	edc6 0a00 	vstr	s1, [r6]
 8004060:	1e40      	subs	r0, r0, #1
 8004062:	f106 0604 	add.w	r6, r6, #4
 8004066:	d1f5      	bne.n	8004054 <nl_func_sm_channel_f32+0xcc>
 8004068:	08a4      	lsrs	r4, r4, #2
 800406a:	d01b      	beq.n	80040a4 <nl_func_sm_channel_f32+0x11c>
 800406c:	edd6 0a00 	vldr	s1, [r6]
 8004070:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004074:	edc6 0a00 	vstr	s1, [r6]
 8004078:	1e64      	subs	r4, r4, #1
 800407a:	ed96 1a01 	vldr	s2, [r6, #4]
 800407e:	edd6 0a02 	vldr	s1, [r6, #8]
 8004082:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004086:	ed86 1a01 	vstr	s2, [r6, #4]
 800408a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800408e:	ed96 1a03 	vldr	s2, [r6, #12]
 8004092:	edc6 0a02 	vstr	s1, [r6, #8]
 8004096:	ee21 1a00 	vmul.f32	s2, s2, s0
 800409a:	ed86 1a03 	vstr	s2, [r6, #12]
 800409e:	f106 0610 	add.w	r6, r6, #16
 80040a2:	d1e3      	bne.n	800406c <nl_func_sm_channel_f32+0xe4>
 80040a4:	ecbd 8b02 	vpop	{d8}
 80040a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040ac <nl_func_sm_array_f32>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	460d      	mov	r5, r1
 80040b2:	4604      	mov	r4, r0
 80040b4:	9f08      	ldr	r7, [sp, #32]
 80040b6:	68a8      	ldr	r0, [r5, #8]
 80040b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80040ba:	00bf      	lsls	r7, r7, #2
 80040bc:	427f      	negs	r7, r7
 80040be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040c2:	68a0      	ldr	r0, [r4, #8]
 80040c4:	eb01 0a07 	add.w	sl, r1, r7
 80040c8:	00b6      	lsls	r6, r6, #2
 80040ca:	4276      	negs	r6, r6
 80040cc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040d0:	68ea      	ldr	r2, [r5, #12]
 80040d2:	4592      	cmp	sl, r2
 80040d4:	eb01 0906 	add.w	r9, r1, r6
 80040d8:	d30f      	bcc.n	80040fa <nl_func_sm_array_f32+0x4e>
 80040da:	4698      	mov	r8, r3
 80040dc:	f8c5 a008 	str.w	sl, [r5, #8]
 80040e0:	f8c4 9008 	str.w	r9, [r4, #8]
 80040e4:	2300      	movs	r3, #0
 80040e6:	4642      	mov	r2, r8
 80040e8:	4629      	mov	r1, r5
 80040ea:	4620      	mov	r0, r4
 80040ec:	f7ff ff4c 	bl	8003f88 <nl_func_sm_channel_f32>
 80040f0:	68e8      	ldr	r0, [r5, #12]
 80040f2:	44ba      	add	sl, r7
 80040f4:	4582      	cmp	sl, r0
 80040f6:	44b1      	add	r9, r6
 80040f8:	d2f0      	bcs.n	80040dc <nl_func_sm_array_f32+0x30>
 80040fa:	68e9      	ldr	r1, [r5, #12]
 80040fc:	60a9      	str	r1, [r5, #8]
 80040fe:	68e0      	ldr	r0, [r4, #12]
 8004100:	60a0      	str	r0, [r4, #8]
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08004108 <nl_func_hard_sigmoid_array_f32>:
 8004108:	6889      	ldr	r1, [r1, #8]
 800410a:	6880      	ldr	r0, [r0, #8]
 800410c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004110:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004114:	1f1b      	subs	r3, r3, #4
 8004116:	1f10      	subs	r0, r2, #4
 8004118:	428b      	cmp	r3, r1
 800411a:	d321      	bcc.n	8004160 <nl_func_hard_sigmoid_array_f32+0x58>
 800411c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004120:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8004404 <.text_68>
 8004124:	edd3 1a00 	vldr	s3, [r3]
 8004128:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 8004408 <.text_69>
 800412c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004130:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004134:	eeb4 1a60 	vcmp.f32	s2, s1
 8004138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413c:	da08      	bge.n	8004150 <nl_func_hard_sigmoid_array_f32+0x48>
 800413e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d505      	bpl.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004148:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004164 <.text_62>
 800414c:	e002      	b.n	8004154 <nl_func_hard_sigmoid_array_f32+0x4c>
 800414e:	bf00      	nop
 8004150:	eeb0 1a40 	vmov.f32	s2, s0
 8004154:	ed80 1a00 	vstr	s2, [r0]
 8004158:	1f1b      	subs	r3, r3, #4
 800415a:	1f00      	subs	r0, r0, #4
 800415c:	428b      	cmp	r3, r1
 800415e:	d2e1      	bcs.n	8004124 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004160:	4770      	bx	lr
	...

08004164 <.text_62>:
 8004164:	00000000 	.word	0x00000000

08004168 <nl_func_clip_array_f32>:
 8004168:	6889      	ldr	r1, [r1, #8]
 800416a:	6880      	ldr	r0, [r0, #8]
 800416c:	ed93 0a00 	vldr	s0, [r3]
 8004170:	edd3 0a01 	vldr	s1, [r3, #4]
 8004174:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004178:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800417c:	1f1b      	subs	r3, r3, #4
 800417e:	1f10      	subs	r0, r2, #4
 8004180:	428b      	cmp	r3, r1
 8004182:	d315      	bcc.n	80041b0 <nl_func_clip_array_f32+0x48>
 8004184:	ed93 1a00 	vldr	s2, [r3]
 8004188:	eeb4 0a41 	vcmp.f32	s0, s2
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	bf58      	it	pl
 8004192:	eeb0 1a40 	vmovpl.f32	s2, s0
 8004196:	eeb4 1a60 	vcmp.f32	s2, s1
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	bf58      	it	pl
 80041a0:	eeb0 1a60 	vmovpl.f32	s2, s1
 80041a4:	ed80 1a00 	vstr	s2, [r0]
 80041a8:	1f1b      	subs	r3, r3, #4
 80041aa:	1f00      	subs	r0, r0, #4
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d2e9      	bcs.n	8004184 <nl_func_clip_array_f32+0x1c>
 80041b0:	4770      	bx	lr
	...

080041b4 <nl_func_hardmax_array_f32>:
 80041b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b8:	6852      	ldr	r2, [r2, #4]
 80041ba:	6855      	ldr	r5, [r2, #4]
 80041bc:	68d4      	ldr	r4, [r2, #12]
 80041be:	688e      	ldr	r6, [r1, #8]
 80041c0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80041c4:	436c      	muls	r4, r5
 80041c6:	00a1      	lsls	r1, r4, #2
 80041c8:	4640      	mov	r0, r8
 80041ca:	f00b f85b 	bl	800f284 <__aeabi_memclr>
 80041ce:	2200      	movs	r2, #0
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	4633      	mov	r3, r6
 80041d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041d8:	f000 805b 	beq.w	8004292 <nl_func_hardmax_array_f32+0xde>
 80041dc:	f102 0c01 	add.w	ip, r2, #1
 80041e0:	eb05 0e02 	add.w	lr, r5, r2
 80041e4:	45f4      	cmp	ip, lr
 80041e6:	edd3 0a00 	vldr	s1, [r3]
 80041ea:	d249      	bcs.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 80041ec:	1e69      	subs	r1, r5, #1
 80041ee:	f011 0003 	ands.w	r0, r1, #3
 80041f2:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041f6:	d00f      	beq.n	8004218 <nl_func_hardmax_array_f32+0x64>
 80041f8:	ed97 1a00 	vldr	s2, [r7]
 80041fc:	eef4 0a41 	vcmp.f32	s1, s2
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	bf44      	itt	mi
 8004206:	eef0 0a41 	vmovmi.f32	s1, s2
 800420a:	4662      	movmi	r2, ip
 800420c:	1e40      	subs	r0, r0, #1
 800420e:	f10c 0c01 	add.w	ip, ip, #1
 8004212:	f107 0704 	add.w	r7, r7, #4
 8004216:	d1ef      	bne.n	80041f8 <nl_func_hardmax_array_f32+0x44>
 8004218:	0889      	lsrs	r1, r1, #2
 800421a:	d031      	beq.n	8004280 <nl_func_hardmax_array_f32+0xcc>
 800421c:	ed97 1a00 	vldr	s2, [r7]
 8004220:	eef4 0a41 	vcmp.f32	s1, s2
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	bf44      	itt	mi
 800422a:	eef0 0a41 	vmovmi.f32	s1, s2
 800422e:	4662      	movmi	r2, ip
 8004230:	ed97 1a01 	vldr	s2, [r7, #4]
 8004234:	eef4 0a41 	vcmp.f32	s1, s2
 8004238:	f10c 0001 	add.w	r0, ip, #1
 800423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004240:	bf44      	itt	mi
 8004242:	eef0 0a41 	vmovmi.f32	s1, s2
 8004246:	4602      	movmi	r2, r0
 8004248:	ed97 1a02 	vldr	s2, [r7, #8]
 800424c:	1c40      	adds	r0, r0, #1
 800424e:	eef4 0a41 	vcmp.f32	s1, s2
 8004252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004256:	bf44      	itt	mi
 8004258:	eef0 0a41 	vmovmi.f32	s1, s2
 800425c:	4602      	movmi	r2, r0
 800425e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004262:	1c40      	adds	r0, r0, #1
 8004264:	eef4 0a41 	vcmp.f32	s1, s2
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	bf44      	itt	mi
 800426e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004272:	4602      	movmi	r2, r0
 8004274:	1e49      	subs	r1, r1, #1
 8004276:	f100 0c01 	add.w	ip, r0, #1
 800427a:	f107 0710 	add.w	r7, r7, #16
 800427e:	d1cd      	bne.n	800421c <nl_func_hardmax_array_f32+0x68>
 8004280:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 8004284:	4672      	mov	r2, lr
 8004286:	42a2      	cmp	r2, r4
 8004288:	ed80 0a00 	vstr	s0, [r0]
 800428c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004290:	d3a4      	bcc.n	80041dc <nl_func_hardmax_array_f32+0x28>
 8004292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004298 <nl_func_relu_generic_array_f32>:
 8004298:	6880      	ldr	r0, [r0, #8]
 800429a:	ed93 0a00 	vldr	s0, [r3]
 800429e:	edd3 0a01 	vldr	s1, [r3, #4]
 80042a2:	ed93 1a02 	vldr	s2, [r3, #8]
 80042a6:	6889      	ldr	r1, [r1, #8]
 80042a8:	1f03      	subs	r3, r0, #4
 80042aa:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80042ae:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80042b2:	1f0b      	subs	r3, r1, #4
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80042bc:	d52a      	bpl.n	8004314 <nl_func_relu_generic_array_f32+0x7c>
 80042be:	eef5 0a40 	vcmp.f32	s1, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	d013      	beq.n	80042f0 <nl_func_relu_generic_array_f32+0x58>
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d310      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042cc:	ed92 1a00 	vldr	s2, [r2]
 80042d0:	eeb4 1a40 	vcmp.f32	s2, s0
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf44      	itt	mi
 80042da:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042de:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042e2:	ed80 1a00 	vstr	s2, [r0]
 80042e6:	1f12      	subs	r2, r2, #4
 80042e8:	1f00      	subs	r0, r0, #4
 80042ea:	428a      	cmp	r2, r1
 80042ec:	d2ee      	bcs.n	80042cc <nl_func_relu_generic_array_f32+0x34>
 80042ee:	4770      	bx	lr
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d3fc      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 80042f4:	edd2 0a00 	vldr	s1, [r2]
 80042f8:	eef4 0a40 	vcmp.f32	s1, s0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	bf48      	it	mi
 8004302:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 80045a0 <.text_73>
 8004306:	edc0 0a00 	vstr	s1, [r0]
 800430a:	1f12      	subs	r2, r2, #4
 800430c:	1f00      	subs	r0, r0, #4
 800430e:	428a      	cmp	r2, r1
 8004310:	d2f0      	bcs.n	80042f4 <nl_func_relu_generic_array_f32+0x5c>
 8004312:	4770      	bx	lr
 8004314:	428a      	cmp	r2, r1
 8004316:	d3ea      	bcc.n	80042ee <nl_func_relu_generic_array_f32+0x56>
 8004318:	edd2 1a00 	vldr	s3, [r2]
 800431c:	eef4 1a41 	vcmp.f32	s3, s2
 8004320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004324:	d50a      	bpl.n	800433c <nl_func_relu_generic_array_f32+0xa4>
 8004326:	eef4 1a40 	vcmp.f32	s3, s0
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d507      	bpl.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 8004330:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004334:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004338:	e002      	b.n	8004340 <nl_func_relu_generic_array_f32+0xa8>
 800433a:	bf00      	nop
 800433c:	eef0 1a41 	vmov.f32	s3, s2
 8004340:	edc0 1a00 	vstr	s3, [r0]
 8004344:	1f12      	subs	r2, r2, #4
 8004346:	1f00      	subs	r0, r0, #4
 8004348:	428a      	cmp	r2, r1
 800434a:	d2e5      	bcs.n	8004318 <nl_func_relu_generic_array_f32+0x80>
 800434c:	4770      	bx	lr
	...

08004350 <nl_func_relu_thresholded_array_f32>:
 8004350:	6889      	ldr	r1, [r1, #8]
 8004352:	6880      	ldr	r0, [r0, #8]
 8004354:	ed93 0a00 	vldr	s0, [r3]
 8004358:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800435c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004360:	1f1b      	subs	r3, r3, #4
 8004362:	1f10      	subs	r0, r2, #4
 8004364:	428b      	cmp	r3, r1
 8004366:	d30e      	bcc.n	8004386 <nl_func_relu_thresholded_array_f32+0x36>
 8004368:	edd3 0a00 	vldr	s1, [r3]
 800436c:	eef4 0a40 	vcmp.f32	s1, s0
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	bf48      	it	mi
 8004376:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 80045a0 <.text_73>
 800437a:	edc0 0a00 	vstr	s1, [r0]
 800437e:	1f1b      	subs	r3, r3, #4
 8004380:	1f00      	subs	r0, r0, #4
 8004382:	428b      	cmp	r3, r1
 8004384:	d2f0      	bcs.n	8004368 <nl_func_relu_thresholded_array_f32+0x18>
 8004386:	4770      	bx	lr

08004388 <nl_func_elu_array_f32>:
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	ed2d 8b04 	vpush	{d8-d9}
 800438e:	688c      	ldr	r4, [r1, #8]
 8004390:	6880      	ldr	r0, [r0, #8]
 8004392:	ed93 8a00 	vldr	s16, [r3]
 8004396:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800439a:	1f0d      	subs	r5, r1, #4
 800439c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80043a0:	1f0e      	subs	r6, r1, #4
 80043a2:	42a5      	cmp	r5, r4
 80043a4:	f0c0 802a 	bcc.w	80043fc <nl_func_elu_array_f32+0x74>
 80043a8:	edd5 8a00 	vldr	s17, [r5]
 80043ac:	eef5 8a40 	vcmp.f32	s17, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	bf4c      	ite	mi
 80043b6:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 80045a0 <.text_73>
 80043ba:	eeb0 9a68 	vmovpl.f32	s18, s17
 80043be:	eeb0 0a68 	vmov.f32	s0, s17
 80043c2:	f00b ff55 	bl	8010270 <expf>
 80043c6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043ca:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ce:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043da:	dc09      	bgt.n	80043f0 <nl_func_elu_array_f32+0x68>
 80043dc:	eeb0 0a68 	vmov.f32	s0, s17
 80043e0:	f00b ff46 	bl	8010270 <expf>
 80043e4:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043e8:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043ec:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043f0:	ed86 9a00 	vstr	s18, [r6]
 80043f4:	1f2d      	subs	r5, r5, #4
 80043f6:	1f36      	subs	r6, r6, #4
 80043f8:	42a5      	cmp	r5, r4
 80043fa:	d2d5      	bcs.n	80043a8 <nl_func_elu_array_f32+0x20>
 80043fc:	ecbd 8b04 	vpop	{d8-d9}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
	...

08004404 <.text_68>:
 8004404:	3f800001 	.word	0x3f800001

08004408 <.text_69>:
 8004408:	3e4ccccd 	.word	0x3e4ccccd

0800440c <nl_func_selu_array_f32>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	ed2d 8b04 	vpush	{d8-d9}
 8004412:	688c      	ldr	r4, [r1, #8]
 8004414:	6880      	ldr	r0, [r0, #8]
 8004416:	ed93 8a00 	vldr	s16, [r3]
 800441a:	edd3 8a01 	vldr	s17, [r3, #4]
 800441e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004422:	1f0d      	subs	r5, r1, #4
 8004424:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004428:	1f0e      	subs	r6, r1, #4
 800442a:	42a5      	cmp	r5, r4
 800442c:	f0c0 802c 	bcc.w	8004488 <nl_func_selu_array_f32+0x7c>
 8004430:	ed95 9a00 	vldr	s18, [r5]
 8004434:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	bf4c      	ite	mi
 800443e:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 80045a0 <.text_73>
 8004442:	eef0 9a49 	vmovpl.f32	s19, s18
 8004446:	eeb0 0a49 	vmov.f32	s0, s18
 800444a:	f00b ff11 	bl	8010270 <expf>
 800444e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004452:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004456:	ee20 0a08 	vmul.f32	s0, s0, s16
 800445a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	dc09      	bgt.n	8004478 <nl_func_selu_array_f32+0x6c>
 8004464:	eeb0 0a49 	vmov.f32	s0, s18
 8004468:	f00b ff02 	bl	8010270 <expf>
 800446c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004470:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004474:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004478:	ee28 0aa9 	vmul.f32	s0, s17, s19
 800447c:	ed86 0a00 	vstr	s0, [r6]
 8004480:	1f2d      	subs	r5, r5, #4
 8004482:	1f36      	subs	r6, r6, #4
 8004484:	42a5      	cmp	r5, r4
 8004486:	d2d3      	bcs.n	8004430 <nl_func_selu_array_f32+0x24>
 8004488:	ecbd 8b04 	vpop	{d8-d9}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004490 <nl_func_prelu_array_f32>:
 8004490:	6889      	ldr	r1, [r1, #8]
 8004492:	6880      	ldr	r0, [r0, #8]
 8004494:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004498:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800449c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80044a0:	1f1b      	subs	r3, r3, #4
 80044a2:	f1ac 0c04 	sub.w	ip, ip, #4
 80044a6:	1f10      	subs	r0, r2, #4
 80044a8:	458c      	cmp	ip, r1
 80044aa:	d320      	bcc.n	80044ee <nl_func_prelu_array_f32+0x5e>
 80044ac:	ed9c 0a00 	vldr	s0, [ip]
 80044b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	bf4c      	ite	mi
 80044ba:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 80045a0 <.text_73>
 80044be:	eef0 0a40 	vmovpl.f32	s1, s0
 80044c2:	461a      	mov	r2, r3
 80044c4:	eeb1 0a40 	vneg.f32	s0, s0
 80044c8:	1f13      	subs	r3, r2, #4
 80044ca:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d2:	bf48      	it	mi
 80044d4:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 80045a0 <.text_73>
 80044d8:	ed92 1a00 	vldr	s2, [r2]
 80044dc:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044e0:	edc0 0a00 	vstr	s1, [r0]
 80044e4:	f1ac 0c04 	sub.w	ip, ip, #4
 80044e8:	1f00      	subs	r0, r0, #4
 80044ea:	458c      	cmp	ip, r1
 80044ec:	d2de      	bcs.n	80044ac <nl_func_prelu_array_f32+0x1c>
 80044ee:	4770      	bx	lr

080044f0 <forward_relu>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	6962      	ldr	r2, [r4, #20]
 80044f6:	8811      	ldrh	r1, [r2, #0]
 80044f8:	2900      	cmp	r1, #0
 80044fa:	bf1a      	itte	ne
 80044fc:	6850      	ldrne	r0, [r2, #4]
 80044fe:	1d00      	addne	r0, r0, #4
 8004500:	2004      	moveq	r0, #4
 8004502:	6800      	ldr	r0, [r0, #0]
 8004504:	2800      	cmp	r0, #0
 8004506:	bf14      	ite	ne
 8004508:	6805      	ldrne	r5, [r0, #0]
 800450a:	2500      	moveq	r5, #0
 800450c:	2902      	cmp	r1, #2
 800450e:	bfa6      	itte	ge
 8004510:	6850      	ldrge	r0, [r2, #4]
 8004512:	3010      	addge	r0, #16
 8004514:	2004      	movlt	r0, #4
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	2800      	cmp	r0, #0
 800451a:	bf19      	ittee	ne
 800451c:	6800      	ldrne	r0, [r0, #0]
 800451e:	f100 0618 	addne.w	r6, r0, #24
 8004522:	2100      	moveq	r1, #0
 8004524:	f101 0618 	addeq.w	r6, r1, #24
 8004528:	69a0      	ldr	r0, [r4, #24]
 800452a:	b9f8      	cbnz	r0, 800456c <forward_relu+0x7c>
 800452c:	f105 0008 	add.w	r0, r5, #8
 8004530:	f7fe f80a 	bl	8002548 <ai_shape_get_size>
 8004534:	69a9      	ldr	r1, [r5, #24]
 8004536:	6833      	ldr	r3, [r6, #0]
 8004538:	6889      	ldr	r1, [r1, #8]
 800453a:	689c      	ldr	r4, [r3, #8]
 800453c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004540:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004544:	1f12      	subs	r2, r2, #4
 8004546:	1f00      	subs	r0, r0, #4
 8004548:	428a      	cmp	r2, r1
 800454a:	d328      	bcc.n	800459e <forward_relu+0xae>
 800454c:	ed92 0a00 	vldr	s0, [r2]
 8004550:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	bf48      	it	mi
 800455a:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 80045a0 <.text_73>
 800455e:	ed80 0a00 	vstr	s0, [r0]
 8004562:	1f12      	subs	r2, r2, #4
 8004564:	1f00      	subs	r0, r0, #4
 8004566:	428a      	cmp	r2, r1
 8004568:	d2f0      	bcs.n	800454c <forward_relu+0x5c>
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	6840      	ldr	r0, [r0, #4]
 800456e:	2801      	cmp	r0, #1
 8004570:	f105 0008 	add.w	r0, r5, #8
 8004574:	d109      	bne.n	800458a <forward_relu+0x9a>
 8004576:	f7fd ffe7 	bl	8002548 <ai_shape_get_size>
 800457a:	4602      	mov	r2, r0
 800457c:	69a0      	ldr	r0, [r4, #24]
 800457e:	6883      	ldr	r3, [r0, #8]
 8004580:	69a9      	ldr	r1, [r5, #24]
 8004582:	6830      	ldr	r0, [r6, #0]
 8004584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004588:	e6e2      	b.n	8004350 <nl_func_relu_thresholded_array_f32>
 800458a:	f7fd ffdd 	bl	8002548 <ai_shape_get_size>
 800458e:	69a1      	ldr	r1, [r4, #24]
 8004590:	688b      	ldr	r3, [r1, #8]
 8004592:	69a9      	ldr	r1, [r5, #24]
 8004594:	4602      	mov	r2, r0
 8004596:	6830      	ldr	r0, [r6, #0]
 8004598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800459c:	e67c      	b.n	8004298 <nl_func_relu_generic_array_f32>
 800459e:	bd70      	pop	{r4, r5, r6, pc}

080045a0 <.text_73>:
 80045a0:	00000000 	.word	0x00000000

080045a4 <forward_relu_thresholded>:
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	4602      	mov	r2, r0
 80045a8:	f04f 0601 	mov.w	r6, #1
 80045ac:	6953      	ldr	r3, [r2, #20]
 80045ae:	8819      	ldrh	r1, [r3, #0]
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bf1a      	itte	ne
 80045b4:	6858      	ldrne	r0, [r3, #4]
 80045b6:	1d00      	addne	r0, r0, #4
 80045b8:	2004      	moveq	r0, #4
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	2800      	cmp	r0, #0
 80045be:	bf14      	ite	ne
 80045c0:	6804      	ldrne	r4, [r0, #0]
 80045c2:	2400      	moveq	r4, #0
 80045c4:	2902      	cmp	r1, #2
 80045c6:	bfa6      	itte	ge
 80045c8:	6858      	ldrge	r0, [r3, #4]
 80045ca:	3010      	addge	r0, #16
 80045cc:	2004      	movlt	r0, #4
 80045ce:	6800      	ldr	r0, [r0, #0]
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bf19      	ittee	ne
 80045d4:	6800      	ldrne	r0, [r0, #0]
 80045d6:	f100 0518 	addne.w	r5, r0, #24
 80045da:	2100      	moveq	r1, #0
 80045dc:	f101 0518 	addeq.w	r5, r1, #24
 80045e0:	f104 0108 	add.w	r1, r4, #8
 80045e4:	680b      	ldr	r3, [r1, #0]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	d01f      	beq.n	800462a <forward_relu_thresholded+0x86>
 80045ea:	684f      	ldr	r7, [r1, #4]
 80045ec:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f1a1 0c04 	sub.w	ip, r1, #4
 80045f6:	f010 0103 	ands.w	r1, r0, #3
 80045fa:	d006      	beq.n	800460a <forward_relu_thresholded+0x66>
 80045fc:	1e5b      	subs	r3, r3, #1
 80045fe:	f85c e904 	ldr.w	lr, [ip], #-4
 8004602:	1e49      	subs	r1, r1, #1
 8004604:	fb0e f606 	mul.w	r6, lr, r6
 8004608:	d1f8      	bne.n	80045fc <forward_relu_thresholded+0x58>
 800460a:	0880      	lsrs	r0, r0, #2
 800460c:	d00d      	beq.n	800462a <forward_relu_thresholded+0x86>
 800460e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004612:	3910      	subs	r1, #16
 8004614:	68cb      	ldr	r3, [r1, #12]
 8004616:	688f      	ldr	r7, [r1, #8]
 8004618:	437b      	muls	r3, r7
 800461a:	684f      	ldr	r7, [r1, #4]
 800461c:	437b      	muls	r3, r7
 800461e:	f851 7910 	ldr.w	r7, [r1], #-16
 8004622:	437b      	muls	r3, r7
 8004624:	435e      	muls	r6, r3
 8004626:	1e40      	subs	r0, r0, #1
 8004628:	d1f4      	bne.n	8004614 <forward_relu_thresholded+0x70>
 800462a:	6990      	ldr	r0, [r2, #24]
 800462c:	6881      	ldr	r1, [r0, #8]
 800462e:	69a0      	ldr	r0, [r4, #24]
 8004630:	682a      	ldr	r2, [r5, #0]
 8004632:	6880      	ldr	r0, [r0, #8]
 8004634:	6893      	ldr	r3, [r2, #8]
 8004636:	ed91 0a00 	vldr	s0, [r1]
 800463a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 800463e:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004642:	1f09      	subs	r1, r1, #4
 8004644:	1f22      	subs	r2, r4, #4
 8004646:	4281      	cmp	r1, r0
 8004648:	f0c0 800f 	bcc.w	800466a <forward_relu_thresholded+0xc6>
 800464c:	edd1 0a00 	vldr	s1, [r1]
 8004650:	eef4 0a40 	vcmp.f32	s1, s0
 8004654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004658:	bf48      	it	mi
 800465a:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 8004964 <.text_80>
 800465e:	edc2 0a00 	vstr	s1, [r2]
 8004662:	1f09      	subs	r1, r1, #4
 8004664:	1f12      	subs	r2, r2, #4
 8004666:	4281      	cmp	r1, r0
 8004668:	d2f0      	bcs.n	800464c <forward_relu_thresholded+0xa8>
 800466a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800466c <forward_elu>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	6962      	ldr	r2, [r4, #20]
 8004672:	8811      	ldrh	r1, [r2, #0]
 8004674:	2900      	cmp	r1, #0
 8004676:	bf1a      	itte	ne
 8004678:	6850      	ldrne	r0, [r2, #4]
 800467a:	1d00      	addne	r0, r0, #4
 800467c:	2004      	moveq	r0, #4
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	2800      	cmp	r0, #0
 8004682:	bf14      	ite	ne
 8004684:	6805      	ldrne	r5, [r0, #0]
 8004686:	2500      	moveq	r5, #0
 8004688:	2902      	cmp	r1, #2
 800468a:	bfa6      	itte	ge
 800468c:	6850      	ldrge	r0, [r2, #4]
 800468e:	3010      	addge	r0, #16
 8004690:	2004      	movlt	r0, #4
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	2800      	cmp	r0, #0
 8004696:	bf19      	ittee	ne
 8004698:	6800      	ldrne	r0, [r0, #0]
 800469a:	f100 0618 	addne.w	r6, r0, #24
 800469e:	2100      	moveq	r1, #0
 80046a0:	f101 0618 	addeq.w	r6, r1, #24
 80046a4:	f105 0008 	add.w	r0, r5, #8
 80046a8:	f7fd ff4e 	bl	8002548 <ai_shape_get_size>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69a0      	ldr	r0, [r4, #24]
 80046b0:	6883      	ldr	r3, [r0, #8]
 80046b2:	69a9      	ldr	r1, [r5, #24]
 80046b4:	6830      	ldr	r0, [r6, #0]
 80046b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046ba:	e665      	b.n	8004388 <nl_func_elu_array_f32>

080046bc <forward_selu>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	4604      	mov	r4, r0
 80046c0:	6962      	ldr	r2, [r4, #20]
 80046c2:	8811      	ldrh	r1, [r2, #0]
 80046c4:	2900      	cmp	r1, #0
 80046c6:	bf1a      	itte	ne
 80046c8:	6850      	ldrne	r0, [r2, #4]
 80046ca:	1d00      	addne	r0, r0, #4
 80046cc:	2004      	moveq	r0, #4
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	2800      	cmp	r0, #0
 80046d2:	bf14      	ite	ne
 80046d4:	6805      	ldrne	r5, [r0, #0]
 80046d6:	2500      	moveq	r5, #0
 80046d8:	2902      	cmp	r1, #2
 80046da:	bfa6      	itte	ge
 80046dc:	6850      	ldrge	r0, [r2, #4]
 80046de:	3010      	addge	r0, #16
 80046e0:	2004      	movlt	r0, #4
 80046e2:	6800      	ldr	r0, [r0, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf19      	ittee	ne
 80046e8:	6800      	ldrne	r0, [r0, #0]
 80046ea:	f100 0618 	addne.w	r6, r0, #24
 80046ee:	2100      	moveq	r1, #0
 80046f0:	f101 0618 	addeq.w	r6, r1, #24
 80046f4:	f105 0008 	add.w	r0, r5, #8
 80046f8:	f7fd ff26 	bl	8002548 <ai_shape_get_size>
 80046fc:	4602      	mov	r2, r0
 80046fe:	69a0      	ldr	r0, [r4, #24]
 8004700:	6883      	ldr	r3, [r0, #8]
 8004702:	69a9      	ldr	r1, [r5, #24]
 8004704:	6830      	ldr	r0, [r6, #0]
 8004706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800470a:	e67f      	b.n	800440c <nl_func_selu_array_f32>

0800470c <forward_prelu>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	b083      	sub	sp, #12
 8004712:	6942      	ldr	r2, [r0, #20]
 8004714:	8810      	ldrh	r0, [r2, #0]
 8004716:	2800      	cmp	r0, #0
 8004718:	bf1a      	itte	ne
 800471a:	6851      	ldrne	r1, [r2, #4]
 800471c:	1d09      	addne	r1, r1, #4
 800471e:	2104      	moveq	r1, #4
 8004720:	6809      	ldr	r1, [r1, #0]
 8004722:	2900      	cmp	r1, #0
 8004724:	bf19      	ittee	ne
 8004726:	6809      	ldrne	r1, [r1, #0]
 8004728:	f101 0518 	addne.w	r5, r1, #24
 800472c:	2300      	moveq	r3, #0
 800472e:	f103 0518 	addeq.w	r5, r3, #24
 8004732:	2801      	cmp	r0, #1
 8004734:	bfc6      	itte	gt
 8004736:	6851      	ldrgt	r1, [r2, #4]
 8004738:	3110      	addgt	r1, #16
 800473a:	2104      	movle	r1, #4
 800473c:	6809      	ldr	r1, [r1, #0]
 800473e:	2900      	cmp	r1, #0
 8004740:	bf19      	ittee	ne
 8004742:	6809      	ldrne	r1, [r1, #0]
 8004744:	f101 0618 	addne.w	r6, r1, #24
 8004748:	2300      	moveq	r3, #0
 800474a:	f103 0618 	addeq.w	r6, r3, #24
 800474e:	2802      	cmp	r0, #2
 8004750:	bfc6      	itte	gt
 8004752:	6850      	ldrgt	r0, [r2, #4]
 8004754:	301c      	addgt	r0, #28
 8004756:	2004      	movle	r0, #4
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	2800      	cmp	r0, #0
 800475c:	bf14      	ite	ne
 800475e:	6804      	ldrne	r4, [r0, #0]
 8004760:	2400      	moveq	r4, #0
 8004762:	69a0      	ldr	r0, [r4, #24]
 8004764:	6887      	ldr	r7, [r0, #8]
 8004766:	b12c      	cbz	r4, 8004774 <forward_prelu+0x68>
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	f000 fc86 	bl	800507c <ai_array_get_byte_size>
 8004770:	4680      	mov	r8, r0
 8004772:	e001      	b.n	8004778 <forward_prelu+0x6c>
 8004774:	f04f 0801 	mov.w	r8, #1
 8004778:	6828      	ldr	r0, [r5, #0]
 800477a:	6841      	ldr	r1, [r0, #4]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f000 fc7d 	bl	800507c <ai_array_get_byte_size>
 8004782:	4601      	mov	r1, r0
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	6832      	ldr	r2, [r6, #0]
 8004788:	6880      	ldr	r0, [r0, #8]
 800478a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800478e:	4401      	add	r1, r0
 8004790:	f104 0308 	add.w	r3, r4, #8
 8004794:	4288      	cmp	r0, r1
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	d241      	bcs.n	800481e <forward_prelu+0x112>
 800479a:	9702      	str	r7, [sp, #8]
 800479c:	9101      	str	r1, [sp, #4]
 800479e:	4607      	mov	r7, r0
 80047a0:	6829      	ldr	r1, [r5, #0]
 80047a2:	608f      	str	r7, [r1, #8]
 80047a4:	f04f 0201 	mov.w	r2, #1
 80047a8:	6834      	ldr	r4, [r6, #0]
 80047aa:	f8c4 9008 	str.w	r9, [r4, #8]
 80047ae:	9b00      	ldr	r3, [sp, #0]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	0a00      	lsrs	r0, r0, #8
 80047b4:	d02a      	beq.n	800480c <forward_prelu+0x100>
 80047b6:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80047ba:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 80047be:	4684      	mov	ip, r0
 80047c0:	f1a3 0a04 	sub.w	sl, r3, #4
 80047c4:	f01c 0303 	ands.w	r3, ip, #3
 80047c8:	d006      	beq.n	80047d8 <forward_prelu+0xcc>
 80047ca:	1e40      	subs	r0, r0, #1
 80047cc:	f85a b904 	ldr.w	fp, [sl], #-4
 80047d0:	1e5b      	subs	r3, r3, #1
 80047d2:	fb0b f202 	mul.w	r2, fp, r2
 80047d6:	d1f8      	bne.n	80047ca <forward_prelu+0xbe>
 80047d8:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047dc:	4663      	mov	r3, ip
 80047de:	d015      	beq.n	800480c <forward_prelu+0x100>
 80047e0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047e4:	f1b0 0010 	subs.w	r0, r0, #16
 80047e8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047f0:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047f4:	f850 b910 	ldr.w	fp, [r0], #-16
 80047f8:	fb0e fc0c 	mul.w	ip, lr, ip
 80047fc:	fb0a fc0c 	mul.w	ip, sl, ip
 8004800:	fb0b fc0c 	mul.w	ip, fp, ip
 8004804:	1e5b      	subs	r3, r3, #1
 8004806:	fb0c f202 	mul.w	r2, ip, r2
 800480a:	d1ed      	bne.n	80047e8 <forward_prelu+0xdc>
 800480c:	9b02      	ldr	r3, [sp, #8]
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff fe3e 	bl	8004490 <nl_func_prelu_array_f32>
 8004814:	9801      	ldr	r0, [sp, #4]
 8004816:	4447      	add	r7, r8
 8004818:	4287      	cmp	r7, r0
 800481a:	44c1      	add	r9, r8
 800481c:	d3c0      	bcc.n	80047a0 <forward_prelu+0x94>
 800481e:	6828      	ldr	r0, [r5, #0]
 8004820:	68c1      	ldr	r1, [r0, #12]
 8004822:	6081      	str	r1, [r0, #8]
 8004824:	6830      	ldr	r0, [r6, #0]
 8004826:	68c1      	ldr	r1, [r0, #12]
 8004828:	6081      	str	r1, [r0, #8]
 800482a:	b003      	add	sp, #12
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004830 <forward_clip>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4604      	mov	r4, r0
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	8811      	ldrh	r1, [r2, #0]
 8004838:	2900      	cmp	r1, #0
 800483a:	bf1a      	itte	ne
 800483c:	6850      	ldrne	r0, [r2, #4]
 800483e:	1d00      	addne	r0, r0, #4
 8004840:	2004      	moveq	r0, #4
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	2800      	cmp	r0, #0
 8004846:	bf14      	ite	ne
 8004848:	6805      	ldrne	r5, [r0, #0]
 800484a:	2500      	moveq	r5, #0
 800484c:	2902      	cmp	r1, #2
 800484e:	bfa6      	itte	ge
 8004850:	6850      	ldrge	r0, [r2, #4]
 8004852:	3010      	addge	r0, #16
 8004854:	2004      	movlt	r0, #4
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	2800      	cmp	r0, #0
 800485a:	bf19      	ittee	ne
 800485c:	6800      	ldrne	r0, [r0, #0]
 800485e:	f100 0618 	addne.w	r6, r0, #24
 8004862:	2100      	moveq	r1, #0
 8004864:	f101 0618 	addeq.w	r6, r1, #24
 8004868:	f105 0008 	add.w	r0, r5, #8
 800486c:	f7fd fe6c 	bl	8002548 <ai_shape_get_size>
 8004870:	4602      	mov	r2, r0
 8004872:	69a0      	ldr	r0, [r4, #24]
 8004874:	6883      	ldr	r3, [r0, #8]
 8004876:	69a9      	ldr	r1, [r5, #24]
 8004878:	6830      	ldr	r0, [r6, #0]
 800487a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800487e:	e473      	b.n	8004168 <nl_func_clip_array_f32>

08004880 <forward_hard_sigmoid>:
 8004880:	b4f0      	push	{r4, r5, r6, r7}
 8004882:	6942      	ldr	r2, [r0, #20]
 8004884:	8811      	ldrh	r1, [r2, #0]
 8004886:	2900      	cmp	r1, #0
 8004888:	bf1a      	itte	ne
 800488a:	6850      	ldrne	r0, [r2, #4]
 800488c:	1d00      	addne	r0, r0, #4
 800488e:	2004      	moveq	r0, #4
 8004890:	f04f 0501 	mov.w	r5, #1
 8004894:	6800      	ldr	r0, [r0, #0]
 8004896:	2800      	cmp	r0, #0
 8004898:	bf14      	ite	ne
 800489a:	6803      	ldrne	r3, [r0, #0]
 800489c:	2300      	moveq	r3, #0
 800489e:	2902      	cmp	r1, #2
 80048a0:	bfa6      	itte	ge
 80048a2:	6850      	ldrge	r0, [r2, #4]
 80048a4:	3010      	addge	r0, #16
 80048a6:	2004      	movlt	r0, #4
 80048a8:	6800      	ldr	r0, [r0, #0]
 80048aa:	2800      	cmp	r0, #0
 80048ac:	bf19      	ittee	ne
 80048ae:	6800      	ldrne	r0, [r0, #0]
 80048b0:	f100 0418 	addne.w	r4, r0, #24
 80048b4:	2100      	moveq	r1, #0
 80048b6:	f101 0418 	addeq.w	r4, r1, #24
 80048ba:	f103 0108 	add.w	r1, r3, #8
 80048be:	680a      	ldr	r2, [r1, #0]
 80048c0:	0a12      	lsrs	r2, r2, #8
 80048c2:	d01e      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048c4:	684e      	ldr	r6, [r1, #4]
 80048c6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ca:	4610      	mov	r0, r2
 80048cc:	1f0f      	subs	r7, r1, #4
 80048ce:	f010 0103 	ands.w	r1, r0, #3
 80048d2:	d006      	beq.n	80048e2 <forward_hard_sigmoid+0x62>
 80048d4:	1e52      	subs	r2, r2, #1
 80048d6:	f857 c904 	ldr.w	ip, [r7], #-4
 80048da:	1e49      	subs	r1, r1, #1
 80048dc:	fb0c f505 	mul.w	r5, ip, r5
 80048e0:	d1f8      	bne.n	80048d4 <forward_hard_sigmoid+0x54>
 80048e2:	0880      	lsrs	r0, r0, #2
 80048e4:	d00d      	beq.n	8004902 <forward_hard_sigmoid+0x82>
 80048e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048ea:	3910      	subs	r1, #16
 80048ec:	68ca      	ldr	r2, [r1, #12]
 80048ee:	688e      	ldr	r6, [r1, #8]
 80048f0:	684f      	ldr	r7, [r1, #4]
 80048f2:	4372      	muls	r2, r6
 80048f4:	f851 6910 	ldr.w	r6, [r1], #-16
 80048f8:	437a      	muls	r2, r7
 80048fa:	4372      	muls	r2, r6
 80048fc:	4355      	muls	r5, r2
 80048fe:	1e40      	subs	r0, r0, #1
 8004900:	d1f4      	bne.n	80048ec <forward_hard_sigmoid+0x6c>
 8004902:	6998      	ldr	r0, [r3, #24]
 8004904:	6822      	ldr	r2, [r4, #0]
 8004906:	6880      	ldr	r0, [r0, #8]
 8004908:	6893      	ldr	r3, [r2, #8]
 800490a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800490e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004912:	1f09      	subs	r1, r1, #4
 8004914:	1f22      	subs	r2, r4, #4
 8004916:	4281      	cmp	r1, r0
 8004918:	f0c0 8022 	bcc.w	8004960 <forward_hard_sigmoid+0xe0>
 800491c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004920:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004968 <.text_81>
 8004924:	edd1 1a00 	vldr	s3, [r1]
 8004928:	ed9f 2a10 	vldr	s4, [pc, #64]	; 800496c <.text_82>
 800492c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004930:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004934:	eeb4 1a60 	vcmp.f32	s2, s1
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	da08      	bge.n	8004950 <forward_hard_sigmoid+0xd0>
 800493e:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d505      	bpl.n	8004954 <forward_hard_sigmoid+0xd4>
 8004948:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004964 <.text_80>
 800494c:	e002      	b.n	8004954 <forward_hard_sigmoid+0xd4>
 800494e:	bf00      	nop
 8004950:	eeb0 1a40 	vmov.f32	s2, s0
 8004954:	ed82 1a00 	vstr	s2, [r2]
 8004958:	1f09      	subs	r1, r1, #4
 800495a:	1f12      	subs	r2, r2, #4
 800495c:	4281      	cmp	r1, r0
 800495e:	d2e1      	bcs.n	8004924 <forward_hard_sigmoid+0xa4>
 8004960:	bcf0      	pop	{r4, r5, r6, r7}
 8004962:	4770      	bx	lr

08004964 <.text_80>:
 8004964:	00000000 	.word	0x00000000

08004968 <.text_81>:
 8004968:	3f800001 	.word	0x3f800001

0800496c <.text_82>:
 800496c:	3e4ccccd 	.word	0x3e4ccccd

08004970 <forward_sm>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b083      	sub	sp, #12
 8004974:	6942      	ldr	r2, [r0, #20]
 8004976:	8811      	ldrh	r1, [r2, #0]
 8004978:	2900      	cmp	r1, #0
 800497a:	bf1a      	itte	ne
 800497c:	6850      	ldrne	r0, [r2, #4]
 800497e:	1d00      	addne	r0, r0, #4
 8004980:	2004      	moveq	r0, #4
 8004982:	6800      	ldr	r0, [r0, #0]
 8004984:	2800      	cmp	r0, #0
 8004986:	bf14      	ite	ne
 8004988:	6804      	ldrne	r4, [r0, #0]
 800498a:	2400      	moveq	r4, #0
 800498c:	2902      	cmp	r1, #2
 800498e:	bfa6      	itte	ge
 8004990:	6850      	ldrge	r0, [r2, #4]
 8004992:	3010      	addge	r0, #16
 8004994:	2004      	movlt	r0, #4
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	2800      	cmp	r0, #0
 800499a:	bf14      	ite	ne
 800499c:	6805      	ldrne	r5, [r0, #0]
 800499e:	2500      	moveq	r5, #0
 80049a0:	68e0      	ldr	r0, [r4, #12]
 80049a2:	68e9      	ldr	r1, [r5, #12]
 80049a4:	6846      	ldr	r6, [r0, #4]
 80049a6:	684f      	ldr	r7, [r1, #4]
 80049a8:	f104 0008 	add.w	r0, r4, #8
 80049ac:	f7fd fdcc 	bl	8002548 <ai_shape_get_size>
 80049b0:	4602      	mov	r2, r0
 80049b2:	9701      	str	r7, [sp, #4]
 80049b4:	9600      	str	r6, [sp, #0]
 80049b6:	69a1      	ldr	r1, [r4, #24]
 80049b8:	69a8      	ldr	r0, [r5, #24]
 80049ba:	4633      	mov	r3, r6
 80049bc:	f7ff fb76 	bl	80040ac <nl_func_sm_array_f32>
 80049c0:	b003      	add	sp, #12
 80049c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049c4 <forward_hardmax>:
 80049c4:	b430      	push	{r4, r5}
 80049c6:	6943      	ldr	r3, [r0, #20]
 80049c8:	881a      	ldrh	r2, [r3, #0]
 80049ca:	6980      	ldr	r0, [r0, #24]
 80049cc:	2a00      	cmp	r2, #0
 80049ce:	bf1a      	itte	ne
 80049d0:	6859      	ldrne	r1, [r3, #4]
 80049d2:	1d09      	addne	r1, r1, #4
 80049d4:	2104      	moveq	r1, #4
 80049d6:	6809      	ldr	r1, [r1, #0]
 80049d8:	2900      	cmp	r1, #0
 80049da:	bf14      	ite	ne
 80049dc:	680c      	ldrne	r4, [r1, #0]
 80049de:	2400      	moveq	r4, #0
 80049e0:	2a02      	cmp	r2, #2
 80049e2:	bfa6      	itte	ge
 80049e4:	6859      	ldrge	r1, [r3, #4]
 80049e6:	3110      	addge	r1, #16
 80049e8:	2104      	movlt	r1, #4
 80049ea:	6809      	ldr	r1, [r1, #0]
 80049ec:	6883      	ldr	r3, [r0, #8]
 80049ee:	2900      	cmp	r1, #0
 80049f0:	bf19      	ittee	ne
 80049f2:	6809      	ldrne	r1, [r1, #0]
 80049f4:	f101 0518 	addne.w	r5, r1, #24
 80049f8:	2200      	moveq	r2, #0
 80049fa:	f102 0518 	addeq.w	r5, r2, #24
 80049fe:	69a1      	ldr	r1, [r4, #24]
 8004a00:	6828      	ldr	r0, [r5, #0]
 8004a02:	f104 0208 	add.w	r2, r4, #8
 8004a06:	bc30      	pop	{r4, r5}
 8004a08:	f7ff bbd4 	b.w	80041b4 <nl_func_hardmax_array_f32>

08004a0c <ai_array_fmt_name>:
 8004a0c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004a10:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004a14:	d062      	beq.n	8004adc <ai_array_fmt_name+0xd0>
 8004a16:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a1a:	1a89      	subs	r1, r1, r2
 8004a1c:	f000 8094 	beq.w	8004b48 <ai_array_fmt_name+0x13c>
 8004a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a24:	1a89      	subs	r1, r1, r2
 8004a26:	d071      	beq.n	8004b0c <ai_array_fmt_name+0x100>
 8004a28:	1a89      	subs	r1, r1, r2
 8004a2a:	d063      	beq.n	8004af4 <ai_array_fmt_name+0xe8>
 8004a2c:	1fc9      	subs	r1, r1, #7
 8004a2e:	f000 808e 	beq.w	8004b4e <ai_array_fmt_name+0x142>
 8004a32:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004a36:	1a89      	subs	r1, r1, r2
 8004a38:	d05f      	beq.n	8004afa <ai_array_fmt_name+0xee>
 8004a3a:	390f      	subs	r1, #15
 8004a3c:	f000 808a 	beq.w	8004b54 <ai_array_fmt_name+0x148>
 8004a40:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004a44:	1a89      	subs	r1, r1, r2
 8004a46:	d05b      	beq.n	8004b00 <ai_array_fmt_name+0xf4>
 8004a48:	391f      	subs	r1, #31
 8004a4a:	f000 8086 	beq.w	8004b5a <ai_array_fmt_name+0x14e>
 8004a4e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004a52:	1a89      	subs	r1, r1, r2
 8004a54:	d057      	beq.n	8004b06 <ai_array_fmt_name+0xfa>
 8004a56:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 800502c <.text_15>
 8004a5a:	1a89      	subs	r1, r1, r2
 8004a5c:	f000 808f 	beq.w	8004b7e <ai_array_fmt_name+0x172>
 8004a60:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004a64:	1a89      	subs	r1, r1, r2
 8004a66:	f000 8087 	beq.w	8004b78 <ai_array_fmt_name+0x16c>
 8004a6a:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8005030 <.text_16>
 8004a6e:	1a89      	subs	r1, r1, r2
 8004a70:	d05e      	beq.n	8004b30 <ai_array_fmt_name+0x124>
 8004a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a76:	1a89      	subs	r1, r1, r2
 8004a78:	d057      	beq.n	8004b2a <ai_array_fmt_name+0x11e>
 8004a7a:	1a89      	subs	r1, r1, r2
 8004a7c:	d049      	beq.n	8004b12 <ai_array_fmt_name+0x106>
 8004a7e:	1fc9      	subs	r1, r1, #7
 8004a80:	d059      	beq.n	8004b36 <ai_array_fmt_name+0x12a>
 8004a82:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004a86:	1a89      	subs	r1, r1, r2
 8004a88:	d046      	beq.n	8004b18 <ai_array_fmt_name+0x10c>
 8004a8a:	390f      	subs	r1, #15
 8004a8c:	d056      	beq.n	8004b3c <ai_array_fmt_name+0x130>
 8004a8e:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004a92:	1a89      	subs	r1, r1, r2
 8004a94:	d043      	beq.n	8004b1e <ai_array_fmt_name+0x112>
 8004a96:	391f      	subs	r1, #31
 8004a98:	d053      	beq.n	8004b42 <ai_array_fmt_name+0x136>
 8004a9a:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004a9e:	1a89      	subs	r1, r1, r2
 8004aa0:	d040      	beq.n	8004b24 <ai_array_fmt_name+0x118>
 8004aa2:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 800502c <.text_15>
 8004aa6:	1a89      	subs	r1, r1, r2
 8004aa8:	d063      	beq.n	8004b72 <ai_array_fmt_name+0x166>
 8004aaa:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004aae:	1a89      	subs	r1, r1, r2
 8004ab0:	d05c      	beq.n	8004b6c <ai_array_fmt_name+0x160>
 8004ab2:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8005034 <.text_17>
 8004ab6:	1a89      	subs	r1, r1, r2
 8004ab8:	d019      	beq.n	8004aee <ai_array_fmt_name+0xe2>
 8004aba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004abe:	1a89      	subs	r1, r1, r2
 8004ac0:	d00f      	beq.n	8004ae2 <ai_array_fmt_name+0xd6>
 8004ac2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ac6:	1a89      	subs	r1, r1, r2
 8004ac8:	d00e      	beq.n	8004ae8 <ai_array_fmt_name+0xdc>
 8004aca:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8005038 <.text_18>
 8004ace:	1a89      	subs	r1, r1, r2
 8004ad0:	d049      	beq.n	8004b66 <ai_array_fmt_name+0x15a>
 8004ad2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004ad6:	1a89      	subs	r1, r1, r2
 8004ad8:	d042      	beq.n	8004b60 <ai_array_fmt_name+0x154>
 8004ada:	e053      	b.n	8004b84 <ai_array_fmt_name+0x178>
 8004adc:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8004ae0:	4770      	bx	lr
 8004ae2:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8004ae6:	4770      	bx	lr
 8004ae8:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8004aec:	4770      	bx	lr
 8004aee:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8004af2:	4770      	bx	lr
 8004af4:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8004af8:	4770      	bx	lr
 8004afa:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8004afe:	4770      	bx	lr
 8004b00:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8004b04:	4770      	bx	lr
 8004b06:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8004b0a:	4770      	bx	lr
 8004b0c:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8004b10:	4770      	bx	lr
 8004b12:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8004b16:	4770      	bx	lr
 8004b18:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8004b1c:	4770      	bx	lr
 8004b1e:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8004b22:	4770      	bx	lr
 8004b24:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8004b28:	4770      	bx	lr
 8004b2a:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8004b2e:	4770      	bx	lr
 8004b30:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8004b34:	4770      	bx	lr
 8004b36:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8004b3a:	4770      	bx	lr
 8004b3c:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8004b40:	4770      	bx	lr
 8004b42:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8004b46:	4770      	bx	lr
 8004b48:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8004b4c:	4770      	bx	lr
 8004b4e:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8004b52:	4770      	bx	lr
 8004b54:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8004b58:	4770      	bx	lr
 8004b5a:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8004b5e:	4770      	bx	lr
 8004b60:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8004b64:	4770      	bx	lr
 8004b66:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8004b6a:	4770      	bx	lr
 8004b6c:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8004b70:	4770      	bx	lr
 8004b72:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8004b76:	4770      	bx	lr
 8004b78:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8004b7c:	4770      	bx	lr
 8004b7e:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8004b82:	4770      	bx	lr
 8004b84:	f36f 000d 	bfc	r0, #0, #14
 8004b88:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004b8c:	2840      	cmp	r0, #64	; 0x40
 8004b8e:	d009      	beq.n	8004ba4 <ai_array_fmt_name+0x198>
 8004b90:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 800503c <.text_19>
 8004b94:	4288      	cmp	r0, r1
 8004b96:	d00b      	beq.n	8004bb0 <ai_array_fmt_name+0x1a4>
 8004b98:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8005040 <.text_20>
 8004b9c:	4288      	cmp	r0, r1
 8004b9e:	d004      	beq.n	8004baa <ai_array_fmt_name+0x19e>
 8004ba0:	a07a      	add	r0, pc, #488	; (adr r0, 8004d8c <.text_8>)
 8004ba2:	4770      	bx	lr
 8004ba4:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8004ba8:	4770      	bx	lr
 8004baa:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 8004bae:	4770      	bx	lr
 8004bb0:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8004bb4:	4770      	bx	lr

08004bb6 <ai_array_fmt_exported>:
 8004bb6:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004bba:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004bbe:	d068      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004bc4:	1a89      	subs	r1, r1, r2
 8004bc6:	d064      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bcc:	1a89      	subs	r1, r1, r2
 8004bce:	d062      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bd0:	1a89      	subs	r1, r1, r2
 8004bd2:	d05e      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bd4:	1fc9      	subs	r1, r1, #7
 8004bd6:	d05c      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004bd8:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004bdc:	1a89      	subs	r1, r1, r2
 8004bde:	d058      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004be0:	390f      	subs	r1, #15
 8004be2:	d056      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004be4:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004be8:	1a89      	subs	r1, r1, r2
 8004bea:	d054      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bec:	391f      	subs	r1, #31
 8004bee:	d052      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bf0:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004bf4:	1a89      	subs	r1, r1, r2
 8004bf6:	d04e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004bf8:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 800502c <.text_15>
 8004bfc:	1a89      	subs	r1, r1, r2
 8004bfe:	d04a      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c00:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004c04:	1a89      	subs	r1, r1, r2
 8004c06:	d046      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c08:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8005030 <.text_16>
 8004c0c:	1a89      	subs	r1, r1, r2
 8004c0e:	d040      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c14:	1a89      	subs	r1, r1, r2
 8004c16:	d03e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c18:	1a89      	subs	r1, r1, r2
 8004c1a:	d03a      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c1c:	1fc9      	subs	r1, r1, #7
 8004c1e:	d038      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c20:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004c24:	1a89      	subs	r1, r1, r2
 8004c26:	d034      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c28:	390f      	subs	r1, #15
 8004c2a:	d032      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c2c:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004c30:	1a89      	subs	r1, r1, r2
 8004c32:	d030      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c34:	391f      	subs	r1, #31
 8004c36:	d02e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c38:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004c3c:	1a89      	subs	r1, r1, r2
 8004c3e:	d02a      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c40:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 800502c <.text_15>
 8004c44:	1a89      	subs	r1, r1, r2
 8004c46:	d026      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c48:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004c4c:	1a89      	subs	r1, r1, r2
 8004c4e:	d022      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c50:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8005034 <.text_17>
 8004c54:	1a89      	subs	r1, r1, r2
 8004c56:	d01e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5c:	1a89      	subs	r1, r1, r2
 8004c5e:	d018      	beq.n	8004c92 <ai_array_fmt_exported+0xdc>
 8004c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c64:	1a89      	subs	r1, r1, r2
 8004c66:	d016      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c68:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8005038 <.text_18>
 8004c6c:	1a89      	subs	r1, r1, r2
 8004c6e:	d012      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c70:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004c74:	1a89      	subs	r1, r1, r2
 8004c76:	d00e      	beq.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c78:	f36f 000d 	bfc	r0, #0, #14
 8004c7c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004c80:	2840      	cmp	r0, #64	; 0x40
 8004c82:	bf1f      	itttt	ne
 8004c84:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 800503c <.text_19>
 8004c88:	4298      	cmpne	r0, r3
 8004c8a:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8005040 <.text_20>
 8004c8e:	4298      	cmpne	r0, r3
 8004c90:	d101      	bne.n	8004c96 <ai_array_fmt_exported+0xe0>
 8004c92:	2001      	movs	r0, #1
 8004c94:	4770      	bx	lr
 8004c96:	2000      	movs	r0, #0
 8004c98:	4770      	bx	lr

08004c9a <ai_array_fmt_valid>:
 8004c9a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004c9e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004ca2:	d069      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004ca4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004ca8:	1a89      	subs	r1, r1, r2
 8004caa:	d065      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb0:	1a89      	subs	r1, r1, r2
 8004cb2:	d061      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cb4:	1a89      	subs	r1, r1, r2
 8004cb6:	d05f      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cb8:	1fc9      	subs	r1, r1, #7
 8004cba:	d05d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cbc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004cc0:	1a89      	subs	r1, r1, r2
 8004cc2:	d059      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cc4:	390f      	subs	r1, #15
 8004cc6:	d057      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cc8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004ccc:	1a89      	subs	r1, r1, r2
 8004cce:	d053      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cd0:	391f      	subs	r1, #31
 8004cd2:	d051      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cd4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004cd8:	1a89      	subs	r1, r1, r2
 8004cda:	d04d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cdc:	f8df 234c 	ldr.w	r2, [pc, #844]	; 800502c <.text_15>
 8004ce0:	1a89      	subs	r1, r1, r2
 8004ce2:	d049      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004ce4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004ce8:	1a89      	subs	r1, r1, r2
 8004cea:	d045      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cec:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8005030 <.text_16>
 8004cf0:	1a89      	subs	r1, r1, r2
 8004cf2:	d041      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf8:	1a89      	subs	r1, r1, r2
 8004cfa:	d03d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004cfc:	1a89      	subs	r1, r1, r2
 8004cfe:	d03b      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d00:	1fc9      	subs	r1, r1, #7
 8004d02:	d039      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d04:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004d08:	1a89      	subs	r1, r1, r2
 8004d0a:	d035      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d0c:	390f      	subs	r1, #15
 8004d0e:	d033      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d10:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8004d14:	1a89      	subs	r1, r1, r2
 8004d16:	d02f      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d18:	391f      	subs	r1, #31
 8004d1a:	d02d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d1c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8004d20:	1a89      	subs	r1, r1, r2
 8004d22:	d029      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d24:	f8df 2304 	ldr.w	r2, [pc, #772]	; 800502c <.text_15>
 8004d28:	1a89      	subs	r1, r1, r2
 8004d2a:	d025      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d2c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004d30:	1a89      	subs	r1, r1, r2
 8004d32:	d021      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d34:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8005034 <.text_17>
 8004d38:	1a89      	subs	r1, r1, r2
 8004d3a:	d01d      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d40:	1a89      	subs	r1, r1, r2
 8004d42:	d019      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d48:	1a89      	subs	r1, r1, r2
 8004d4a:	d015      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d4c:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8005038 <.text_18>
 8004d50:	1a89      	subs	r1, r1, r2
 8004d52:	d011      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d54:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8004d58:	1a89      	subs	r1, r1, r2
 8004d5a:	bf1e      	ittt	ne
 8004d5c:	f36f 000d 	bfcne	r0, #0, #14
 8004d60:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8004d64:	2840      	cmpne	r0, #64	; 0x40
 8004d66:	d007      	beq.n	8004d78 <ai_array_fmt_valid+0xde>
 8004d68:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 800503c <.text_19>
 8004d6c:	4298      	cmp	r0, r3
 8004d6e:	bf1c      	itt	ne
 8004d70:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8005040 <.text_20>
 8004d74:	4298      	cmpne	r0, r3
 8004d76:	d101      	bne.n	8004d7c <ai_array_fmt_valid+0xe2>
 8004d78:	2001      	movs	r0, #1
 8004d7a:	4770      	bx	lr
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	4770      	bx	lr

08004d80 <ai_array_fmt_get_formats>:
 8004d80:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8005044 <.text_21>
 8004d84:	6001      	str	r1, [r0, #0]
 8004d86:	201c      	movs	r0, #28
 8004d88:	4770      	bx	lr
	...

08004d8c <.text_8>:
 8004d8c:	00000000 	.word	0x00000000

08004d90 <ai_buffer_fmt_name>:
 8004d90:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004d94:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004d98:	d022      	beq.n	8004de0 <ai_buffer_fmt_name+0x50>
 8004d9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004d9e:	1a89      	subs	r1, r1, r2
 8004da0:	d039      	beq.n	8004e16 <ai_buffer_fmt_name+0x86>
 8004da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da6:	1a89      	subs	r1, r1, r2
 8004da8:	d020      	beq.n	8004dec <ai_buffer_fmt_name+0x5c>
 8004daa:	1fc9      	subs	r1, r1, #7
 8004dac:	d036      	beq.n	8004e1c <ai_buffer_fmt_name+0x8c>
 8004dae:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004db2:	1a89      	subs	r1, r1, r2
 8004db4:	d01d      	beq.n	8004df2 <ai_buffer_fmt_name+0x62>
 8004db6:	390f      	subs	r1, #15
 8004db8:	d033      	beq.n	8004e22 <ai_buffer_fmt_name+0x92>
 8004dba:	4aa3      	ldr	r2, [pc, #652]	; (8005048 <.text_22>)
 8004dbc:	1a89      	subs	r1, r1, r2
 8004dbe:	d021      	beq.n	8004e04 <ai_buffer_fmt_name+0x74>
 8004dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dc4:	1a89      	subs	r1, r1, r2
 8004dc6:	d017      	beq.n	8004df8 <ai_buffer_fmt_name+0x68>
 8004dc8:	1fc9      	subs	r1, r1, #7
 8004dca:	d01e      	beq.n	8004e0a <ai_buffer_fmt_name+0x7a>
 8004dcc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004dd0:	1a89      	subs	r1, r1, r2
 8004dd2:	d014      	beq.n	8004dfe <ai_buffer_fmt_name+0x6e>
 8004dd4:	390f      	subs	r1, #15
 8004dd6:	d01b      	beq.n	8004e10 <ai_buffer_fmt_name+0x80>
 8004dd8:	4a9c      	ldr	r2, [pc, #624]	; (800504c <.text_23>)
 8004dda:	1a89      	subs	r1, r1, r2
 8004ddc:	d003      	beq.n	8004de6 <ai_buffer_fmt_name+0x56>
 8004dde:	e023      	b.n	8004e28 <ai_buffer_fmt_name+0x98>
 8004de0:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8004de4:	4770      	bx	lr
 8004de6:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8004dea:	4770      	bx	lr
 8004dec:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8004df0:	4770      	bx	lr
 8004df2:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8004df6:	4770      	bx	lr
 8004df8:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8004dfc:	4770      	bx	lr
 8004dfe:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8004e02:	4770      	bx	lr
 8004e04:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8004e08:	4770      	bx	lr
 8004e0a:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8004e0e:	4770      	bx	lr
 8004e10:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8004e14:	4770      	bx	lr
 8004e16:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8004e1a:	4770      	bx	lr
 8004e1c:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8004e20:	4770      	bx	lr
 8004e22:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8004e26:	4770      	bx	lr
 8004e28:	0b80      	lsrs	r0, r0, #14
 8004e2a:	0380      	lsls	r0, r0, #14
 8004e2c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004e30:	2840      	cmp	r0, #64	; 0x40
 8004e32:	d007      	beq.n	8004e44 <ai_buffer_fmt_name+0xb4>
 8004e34:	4981      	ldr	r1, [pc, #516]	; (800503c <.text_19>)
 8004e36:	4288      	cmp	r0, r1
 8004e38:	d00a      	beq.n	8004e50 <ai_buffer_fmt_name+0xc0>
 8004e3a:	4981      	ldr	r1, [pc, #516]	; (8005040 <.text_20>)
 8004e3c:	4288      	cmp	r0, r1
 8004e3e:	d004      	beq.n	8004e4a <ai_buffer_fmt_name+0xba>
 8004e40:	a079      	add	r0, pc, #484	; (adr r0, 8005028 <.text_14>)
 8004e42:	4770      	bx	lr
 8004e44:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8004e48:	4770      	bx	lr
 8004e4a:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8004e4e:	4770      	bx	lr
 8004e50:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8004e54:	4770      	bx	lr

08004e56 <ai_buffer_fmt_valid>:
 8004e56:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8004e5a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8004e5e:	d02d      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004e64:	1a89      	subs	r1, r1, r2
 8004e66:	d029      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e6c:	1a89      	subs	r1, r1, r2
 8004e6e:	d025      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e70:	1fc9      	subs	r1, r1, #7
 8004e72:	d023      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e74:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004e78:	1a89      	subs	r1, r1, r2
 8004e7a:	d01f      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e7c:	390f      	subs	r1, #15
 8004e7e:	d01d      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e80:	4a71      	ldr	r2, [pc, #452]	; (8005048 <.text_22>)
 8004e82:	1a89      	subs	r1, r1, r2
 8004e84:	d01a      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e8a:	1a89      	subs	r1, r1, r2
 8004e8c:	d016      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e8e:	1fc9      	subs	r1, r1, #7
 8004e90:	d014      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e92:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8004e96:	1a89      	subs	r1, r1, r2
 8004e98:	d010      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e9a:	390f      	subs	r1, #15
 8004e9c:	d00e      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004e9e:	4a6b      	ldr	r2, [pc, #428]	; (800504c <.text_23>)
 8004ea0:	1a89      	subs	r1, r1, r2
 8004ea2:	bf1f      	itttt	ne
 8004ea4:	0b80      	lsrne	r0, r0, #14
 8004ea6:	0380      	lslne	r0, r0, #14
 8004ea8:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8004eac:	2840      	cmpne	r0, #64	; 0x40
 8004eae:	d005      	beq.n	8004ebc <ai_buffer_fmt_valid+0x66>
 8004eb0:	4b62      	ldr	r3, [pc, #392]	; (800503c <.text_19>)
 8004eb2:	4298      	cmp	r0, r3
 8004eb4:	bf1c      	itt	ne
 8004eb6:	4b62      	ldrne	r3, [pc, #392]	; (8005040 <.text_20>)
 8004eb8:	4298      	cmpne	r0, r3
 8004eba:	d101      	bne.n	8004ec0 <ai_buffer_fmt_valid+0x6a>
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	4770      	bx	lr
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4770      	bx	lr

08004ec4 <ai_buffer_fmt_get_formats>:
 8004ec4:	4962      	ldr	r1, [pc, #392]	; (8005050 <.text_24>)
 8004ec6:	6001      	str	r1, [r0, #0]
 8004ec8:	200c      	movs	r0, #12
 8004eca:	4770      	bx	lr

08004ecc <ai_array_to_buffer_fmt>:
 8004ecc:	4601      	mov	r1, r0
 8004ece:	2040      	movs	r0, #64	; 0x40
 8004ed0:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8004ed4:	2a02      	cmp	r2, #2
 8004ed6:	d104      	bne.n	8004ee2 <ai_array_to_buffer_fmt+0x16>
 8004ed8:	485e      	ldr	r0, [pc, #376]	; (8005054 <.text_25>)
 8004eda:	4008      	ands	r0, r1
 8004edc:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8004ee0:	e037      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004ee2:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8004ee6:	4b55      	ldr	r3, [pc, #340]	; (800503c <.text_19>)
 8004ee8:	1ad2      	subs	r2, r2, r3
 8004eea:	d02d      	beq.n	8004f48 <ai_array_to_buffer_fmt+0x7c>
 8004eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	d01b      	beq.n	8004f2c <ai_array_to_buffer_fmt+0x60>
 8004ef4:	1fd2      	subs	r2, r2, #7
 8004ef6:	d029      	beq.n	8004f4c <ai_array_to_buffer_fmt+0x80>
 8004ef8:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8004efc:	1ad2      	subs	r2, r2, r3
 8004efe:	d017      	beq.n	8004f30 <ai_array_to_buffer_fmt+0x64>
 8004f00:	3a0f      	subs	r2, #15
 8004f02:	d025      	beq.n	8004f50 <ai_array_to_buffer_fmt+0x84>
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <.text_22>)
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	d018      	beq.n	8004f3c <ai_array_to_buffer_fmt+0x70>
 8004f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	d010      	beq.n	8004f34 <ai_array_to_buffer_fmt+0x68>
 8004f12:	1fd2      	subs	r2, r2, #7
 8004f14:	d014      	beq.n	8004f40 <ai_array_to_buffer_fmt+0x74>
 8004f16:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	d00c      	beq.n	8004f38 <ai_array_to_buffer_fmt+0x6c>
 8004f1e:	3a0f      	subs	r2, #15
 8004f20:	d010      	beq.n	8004f44 <ai_array_to_buffer_fmt+0x78>
 8004f22:	4b4a      	ldr	r3, [pc, #296]	; (800504c <.text_23>)
 8004f24:	1ad2      	subs	r2, r2, r3
 8004f26:	d114      	bne.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f28:	484b      	ldr	r0, [pc, #300]	; (8005058 <.text_26>)
 8004f2a:	e012      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f2c:	484b      	ldr	r0, [pc, #300]	; (800505c <.text_27>)
 8004f2e:	e010      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f30:	484b      	ldr	r0, [pc, #300]	; (8005060 <.text_28>)
 8004f32:	e00e      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f34:	484b      	ldr	r0, [pc, #300]	; (8005064 <.text_29>)
 8004f36:	e00c      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f38:	484b      	ldr	r0, [pc, #300]	; (8005068 <.text_30>)
 8004f3a:	e00a      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f3c:	4840      	ldr	r0, [pc, #256]	; (8005040 <.text_20>)
 8004f3e:	e008      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f40:	484a      	ldr	r0, [pc, #296]	; (800506c <.text_31>)
 8004f42:	e006      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f44:	484a      	ldr	r0, [pc, #296]	; (8005070 <.text_32>)
 8004f46:	e004      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f48:	4618      	mov	r0, r3
 8004f4a:	e002      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f4c:	4849      	ldr	r0, [pc, #292]	; (8005074 <.text_33>)
 8004f4e:	e000      	b.n	8004f52 <ai_array_to_buffer_fmt+0x86>
 8004f50:	4849      	ldr	r0, [pc, #292]	; (8005078 <.text_34>)
 8004f52:	004a      	lsls	r2, r1, #1
 8004f54:	bf4c      	ite	mi
 8004f56:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8004f5a:	2200      	movpl	r2, #0
 8004f5c:	4310      	orrs	r0, r2
 8004f5e:	008a      	lsls	r2, r1, #2
 8004f60:	bf4c      	ite	mi
 8004f62:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8004f66:	2200      	movpl	r2, #0
 8004f68:	4310      	orrs	r0, r2
 8004f6a:	0109      	lsls	r1, r1, #4
 8004f6c:	bf4c      	ite	mi
 8004f6e:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8004f72:	2100      	movpl	r1, #0
 8004f74:	4308      	orrs	r0, r1
 8004f76:	4770      	bx	lr

08004f78 <ai_buffer_to_array_fmt>:
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8004f7e:	3840      	subs	r0, #64	; 0x40
 8004f80:	d022      	beq.n	8004fc8 <ai_buffer_to_array_fmt+0x50>
 8004f82:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8004f86:	1a40      	subs	r0, r0, r1
 8004f88:	d030      	beq.n	8004fec <ai_buffer_to_array_fmt+0x74>
 8004f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f8e:	1a40      	subs	r0, r0, r1
 8004f90:	d01e      	beq.n	8004fd0 <ai_buffer_to_array_fmt+0x58>
 8004f92:	1fc0      	subs	r0, r0, #7
 8004f94:	d02c      	beq.n	8004ff0 <ai_buffer_to_array_fmt+0x78>
 8004f96:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004f9a:	1a40      	subs	r0, r0, r1
 8004f9c:	d01a      	beq.n	8004fd4 <ai_buffer_to_array_fmt+0x5c>
 8004f9e:	380f      	subs	r0, #15
 8004fa0:	d028      	beq.n	8004ff4 <ai_buffer_to_array_fmt+0x7c>
 8004fa2:	4929      	ldr	r1, [pc, #164]	; (8005048 <.text_22>)
 8004fa4:	1a40      	subs	r0, r0, r1
 8004fa6:	d01b      	beq.n	8004fe0 <ai_buffer_to_array_fmt+0x68>
 8004fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004fac:	1a40      	subs	r0, r0, r1
 8004fae:	d013      	beq.n	8004fd8 <ai_buffer_to_array_fmt+0x60>
 8004fb0:	1fc0      	subs	r0, r0, #7
 8004fb2:	d017      	beq.n	8004fe4 <ai_buffer_to_array_fmt+0x6c>
 8004fb4:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8004fb8:	1a40      	subs	r0, r0, r1
 8004fba:	d00f      	beq.n	8004fdc <ai_buffer_to_array_fmt+0x64>
 8004fbc:	380f      	subs	r0, #15
 8004fbe:	d013      	beq.n	8004fe8 <ai_buffer_to_array_fmt+0x70>
 8004fc0:	4922      	ldr	r1, [pc, #136]	; (800504c <.text_23>)
 8004fc2:	1a40      	subs	r0, r0, r1
 8004fc4:	d002      	beq.n	8004fcc <ai_buffer_to_array_fmt+0x54>
 8004fc6:	e017      	b.n	8004ff8 <ai_buffer_to_array_fmt+0x80>
 8004fc8:	2040      	movs	r0, #64	; 0x40
 8004fca:	e01f      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fcc:	4822      	ldr	r0, [pc, #136]	; (8005058 <.text_26>)
 8004fce:	e01d      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fd0:	4822      	ldr	r0, [pc, #136]	; (800505c <.text_27>)
 8004fd2:	e01b      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fd4:	4822      	ldr	r0, [pc, #136]	; (8005060 <.text_28>)
 8004fd6:	e019      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fd8:	4822      	ldr	r0, [pc, #136]	; (8005064 <.text_29>)
 8004fda:	e017      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fdc:	4822      	ldr	r0, [pc, #136]	; (8005068 <.text_30>)
 8004fde:	e015      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fe0:	4817      	ldr	r0, [pc, #92]	; (8005040 <.text_20>)
 8004fe2:	e013      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fe4:	4821      	ldr	r0, [pc, #132]	; (800506c <.text_31>)
 8004fe6:	e011      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fe8:	4821      	ldr	r0, [pc, #132]	; (8005070 <.text_32>)
 8004fea:	e00f      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004fec:	4813      	ldr	r0, [pc, #76]	; (800503c <.text_19>)
 8004fee:	e00d      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004ff0:	4820      	ldr	r0, [pc, #128]	; (8005074 <.text_33>)
 8004ff2:	e00b      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004ff4:	4820      	ldr	r0, [pc, #128]	; (8005078 <.text_34>)
 8004ff6:	e009      	b.n	800500c <ai_buffer_to_array_fmt+0x94>
 8004ff8:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8004ffc:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8005000:	2900      	cmp	r1, #0
 8005002:	bf14      	ite	ne
 8005004:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8005008:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 800500c:	0051      	lsls	r1, r2, #1
 800500e:	bf48      	it	mi
 8005010:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8005014:	0091      	lsls	r1, r2, #2
 8005016:	bf48      	it	mi
 8005018:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 800501c:	0111      	lsls	r1, r2, #4
 800501e:	bf48      	it	mi
 8005020:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8005024:	4770      	bx	lr
	...

08005028 <.text_14>:
 8005028:	00000000 	.word	0x00000000

0800502c <.text_15>:
 800502c:	002be80f 	.word	0x002be80f

08005030 <.text_16>:
 8005030:	003bf7f1 	.word	0x003bf7f1

08005034 <.text_17>:
 8005034:	00b9fff1 	.word	0x00b9fff1

08005038 <.text_18>:
 8005038:	004df000 	.word	0x004df000

0800503c <.text_19>:
 800503c:	00040040 	.word	0x00040040

08005040 <.text_20>:
 8005040:	00840040 	.word	0x00840040

08005044 <.text_21>:
 8005044:	08012838 	.word	0x08012838

08005048 <.text_22>:
 8005048:	007ff7f1 	.word	0x007ff7f1

0800504c <.text_23>:
 800504c:	00fe07f1 	.word	0x00fe07f1

08005050 <.text_24>:
 8005050:	080128a8 	.word	0x080128a8

08005054 <.text_25>:
 8005054:	00803fff 	.word	0x00803fff

08005058 <.text_26>:
 8005058:	01821040 	.word	0x01821040

0800505c <.text_27>:
 800505c:	00040440 	.word	0x00040440

08005060 <.text_28>:
 8005060:	00040840 	.word	0x00040840

08005064 <.text_29>:
 8005064:	00840440 	.word	0x00840440

08005068 <.text_30>:
 8005068:	00840840 	.word	0x00840840

0800506c <.text_31>:
 800506c:	00840447 	.word	0x00840447

08005070 <.text_32>:
 8005070:	0084084f 	.word	0x0084084f

08005074 <.text_33>:
 8005074:	00040447 	.word	0x00040447

08005078 <.text_34>:
 8005078:	0004084f 	.word	0x0004084f

0800507c <ai_array_get_byte_size>:
 800507c:	b909      	cbnz	r1, 8005082 <ai_array_get_byte_size+0x6>
 800507e:	2000      	movs	r0, #0
 8005080:	4770      	bx	lr
 8005082:	11c2      	asrs	r2, r0, #7
 8005084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005088:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800508c:	189b      	adds	r3, r3, r2
 800508e:	4359      	muls	r1, r3
 8005090:	1dc9      	adds	r1, r1, #7
 8005092:	08c9      	lsrs	r1, r1, #3
 8005094:	1543      	asrs	r3, r0, #21
 8005096:	00c9      	lsls	r1, r1, #3
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	ea4f 4c60 	mov.w	ip, r0, asr #17
 80050a0:	40d9      	lsrs	r1, r3
 80050a2:	f00c 0c0f 	and.w	ip, ip, #15
 80050a6:	f1bc 0f04 	cmp.w	ip, #4
 80050aa:	d00a      	beq.n	80050c2 <ai_array_get_byte_size+0x46>
 80050ac:	f1bc 0f08 	cmp.w	ip, #8
 80050b0:	bf02      	ittt	eq
 80050b2:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 80050b6:	1882      	addeq	r2, r0, r2
 80050b8:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 80050bc:	1dc9      	adds	r1, r1, #7
 80050be:	08c8      	lsrs	r0, r1, #3
 80050c0:	4770      	bx	lr
 80050c2:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80050c6:	1882      	adds	r2, r0, r2
 80050c8:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80050cc:	1dc9      	adds	r1, r1, #7
 80050ce:	08c8      	lsrs	r0, r1, #3
 80050d0:	4770      	bx	lr

080050d2 <ai_array_get_data_byte_size>:
 80050d2:	b909      	cbnz	r1, 80050d8 <ai_array_get_data_byte_size+0x6>
 80050d4:	2000      	movs	r0, #0
 80050d6:	4770      	bx	lr
 80050d8:	11c2      	asrs	r2, r0, #7
 80050da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80050de:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80050e2:	189a      	adds	r2, r3, r2
 80050e4:	4351      	muls	r1, r2
 80050e6:	1dc9      	adds	r1, r1, #7
 80050e8:	08c9      	lsrs	r1, r1, #3
 80050ea:	1540      	asrs	r0, r0, #21
 80050ec:	00c9      	lsls	r1, r1, #3
 80050ee:	f000 0003 	and.w	r0, r0, #3
 80050f2:	40c1      	lsrs	r1, r0
 80050f4:	1dc9      	adds	r1, r1, #7
 80050f6:	08c8      	lsrs	r0, r1, #3
 80050f8:	4770      	bx	lr

080050fa <ai_array_get_elems_from_size>:
 80050fa:	b909      	cbnz	r1, 8005100 <ai_array_get_elems_from_size+0x6>
 80050fc:	2000      	movs	r0, #0
 80050fe:	4770      	bx	lr
 8005100:	1442      	asrs	r2, r0, #17
 8005102:	00c9      	lsls	r1, r1, #3
 8005104:	f002 020f 	and.w	r2, r2, #15
 8005108:	2a04      	cmp	r2, #4
 800510a:	d002      	beq.n	8005112 <ai_array_get_elems_from_size+0x18>
 800510c:	2a08      	cmp	r2, #8
 800510e:	d009      	beq.n	8005124 <ai_array_get_elems_from_size+0x2a>
 8005110:	e010      	b.n	8005134 <ai_array_get_elems_from_size+0x3a>
 8005112:	11c3      	asrs	r3, r0, #7
 8005114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005118:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800511c:	18d2      	adds	r2, r2, r3
 800511e:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8005122:	e007      	b.n	8005134 <ai_array_get_elems_from_size+0x3a>
 8005124:	11c2      	asrs	r2, r0, #7
 8005126:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800512a:	f3c0 3382 	ubfx	r3, r0, #14, #3
 800512e:	189a      	adds	r2, r3, r2
 8005130:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8005134:	1542      	asrs	r2, r0, #21
 8005136:	f002 0203 	and.w	r2, r2, #3
 800513a:	4091      	lsls	r1, r2
 800513c:	1dc9      	adds	r1, r1, #7
 800513e:	11c2      	asrs	r2, r0, #7
 8005140:	08c9      	lsrs	r1, r1, #3
 8005142:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005146:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800514a:	00c9      	lsls	r1, r1, #3
 800514c:	1880      	adds	r0, r0, r2
 800514e:	fbb1 f0f0 	udiv	r0, r1, r0
 8005152:	4770      	bx	lr

08005154 <.text_38>:
 8005154:	5f544d46 	.word	0x5f544d46
 8005158:	454e4f4e 	.word	0x454e4f4e
 800515c:	00          	.byte	0x00
 800515d:	00          	.byte	0x00
	...

08005160 <.text_39>:
 8005160:	5f544d46 	.word	0x5f544d46
 8005164:	414f4c46 	.word	0x414f4c46
 8005168:	0054      	.short	0x0054
	...

0800516c <.text_40>:
 800516c:	5f544d46 	.word	0x5f544d46
 8005170:	414f4c46 	.word	0x414f4c46
 8005174:	00343654 	.word	0x00343654

08005178 <.text_41>:
 8005178:	5f544d46 	.word	0x5f544d46
 800517c:	414f4c46 	.word	0x414f4c46
 8005180:	00363154 	.word	0x00363154

08005184 <.text_42>:
 8005184:	5f544d46 	.word	0x5f544d46
 8005188:	00003855 	.word	0x00003855

0800518c <.text_43>:
 800518c:	5f544d46 	.word	0x5f544d46
 8005190:	00363155 	.word	0x00363155

08005194 <.text_44>:
 8005194:	5f544d46 	.word	0x5f544d46
 8005198:	00323355 	.word	0x00323355

0800519c <.text_45>:
 800519c:	5f544d46 	.word	0x5f544d46
 80051a0:	00343655 	.word	0x00343655

080051a4 <.text_46>:
 80051a4:	5f544d46 	.word	0x5f544d46
 80051a8:	00003455 	.word	0x00003455

080051ac <.text_47>:
 80051ac:	5f544d46 	.word	0x5f544d46
 80051b0:	00003853 	.word	0x00003853

080051b4 <.text_48>:
 80051b4:	5f544d46 	.word	0x5f544d46
 80051b8:	00363153 	.word	0x00363153

080051bc <.text_49>:
 80051bc:	5f544d46 	.word	0x5f544d46
 80051c0:	00323353 	.word	0x00323353

080051c4 <.text_50>:
 80051c4:	5f544d46 	.word	0x5f544d46
 80051c8:	00343653 	.word	0x00343653

080051cc <.text_51>:
 80051cc:	5f544d46 	.word	0x5f544d46
 80051d0:	00003453 	.word	0x00003453

080051d4 <.text_52>:
 80051d4:	5f544d46 	.word	0x5f544d46
 80051d8:	0051      	.short	0x0051
	...

080051dc <.text_53>:
 80051dc:	5f544d46 	.word	0x5f544d46
 80051e0:	00003751 	.word	0x00003751

080051e4 <.text_54>:
 80051e4:	5f544d46 	.word	0x5f544d46
 80051e8:	00353151 	.word	0x00353151

080051ec <.text_55>:
 80051ec:	5f544d46 	.word	0x5f544d46
 80051f0:	00313351 	.word	0x00313351

080051f4 <.text_56>:
 80051f4:	5f544d46 	.word	0x5f544d46
 80051f8:	00005155 	.word	0x00005155

080051fc <.text_57>:
 80051fc:	5f544d46 	.word	0x5f544d46
 8005200:	00375155 	.word	0x00375155

08005204 <.text_58>:
 8005204:	5f544d46 	.word	0x5f544d46
 8005208:	35315155 	.word	0x35315155
 800520c:	00          	.byte	0x00
 800520d:	00          	.byte	0x00
	...

08005210 <.text_59>:
 8005210:	5f544d46 	.word	0x5f544d46
 8005214:	31335155 	.word	0x31335155
 8005218:	00          	.byte	0x00
 8005219:	00          	.byte	0x00
	...

0800521c <.text_60>:
 800521c:	5f544d46 	.word	0x5f544d46
 8005220:	3454554c 	.word	0x3454554c
 8005224:	4f4c465f 	.word	0x4f4c465f
 8005228:	00005441 	.word	0x00005441

0800522c <.text_61>:
 800522c:	5f544d46 	.word	0x5f544d46
 8005230:	3854554c 	.word	0x3854554c
 8005234:	4f4c465f 	.word	0x4f4c465f
 8005238:	00005441 	.word	0x00005441

0800523c <.text_62>:
 800523c:	5f544d46 	.word	0x5f544d46
 8005240:	3454554c 	.word	0x3454554c
 8005244:	3531515f 	.word	0x3531515f
 8005248:	00          	.byte	0x00
 8005249:	00          	.byte	0x00
	...

0800524c <.text_63>:
 800524c:	5f544d46 	.word	0x5f544d46
 8005250:	3854554c 	.word	0x3854554c
 8005254:	3531515f 	.word	0x3531515f
 8005258:	00          	.byte	0x00
 8005259:	00          	.byte	0x00
	...

0800525c <.text_64>:
 800525c:	5f544d46 	.word	0x5f544d46
 8005260:	3454554c 	.word	0x3454554c
 8005264:	3151555f 	.word	0x3151555f
 8005268:	0035      	.short	0x0035
	...

0800526c <.text_65>:
 800526c:	5f544d46 	.word	0x5f544d46
 8005270:	3854554c 	.word	0x3854554c
 8005274:	3151555f 	.word	0x3151555f
 8005278:	0035      	.short	0x0035
	...

0800527c <.text_66>:
 800527c:	415f4941 	.word	0x415f4941
 8005280:	59415252 	.word	0x59415252
 8005284:	524f465f 	.word	0x524f465f
 8005288:	5f54414d 	.word	0x5f54414d
 800528c:	454e4f4e 	.word	0x454e4f4e
 8005290:	00          	.byte	0x00
 8005291:	00          	.byte	0x00
	...

08005294 <.text_67>:
 8005294:	415f4941 	.word	0x415f4941
 8005298:	59415252 	.word	0x59415252
 800529c:	524f465f 	.word	0x524f465f
 80052a0:	5f54414d 	.word	0x5f54414d
 80052a4:	0051      	.short	0x0051
	...

080052a8 <.text_68>:
 80052a8:	415f4941 	.word	0x415f4941
 80052ac:	59415252 	.word	0x59415252
 80052b0:	524f465f 	.word	0x524f465f
 80052b4:	5f54414d 	.word	0x5f54414d
 80052b8:	00005155 	.word	0x00005155

080052bc <.text_69>:
 80052bc:	425f4941 	.word	0x425f4941
 80052c0:	45464655 	.word	0x45464655
 80052c4:	4f465f52 	.word	0x4f465f52
 80052c8:	54414d52 	.word	0x54414d52
 80052cc:	4e4f4e5f 	.word	0x4e4f4e5f
 80052d0:	0045      	.short	0x0045
	...

080052d4 <.text_70>:
 80052d4:	425f4941 	.word	0x425f4941
 80052d8:	45464655 	.word	0x45464655
 80052dc:	4f465f52 	.word	0x4f465f52
 80052e0:	54414d52 	.word	0x54414d52
 80052e4:	0000515f 	.word	0x0000515f

080052e8 <.text_71>:
 80052e8:	425f4941 	.word	0x425f4941
 80052ec:	45464655 	.word	0x45464655
 80052f0:	4f465f52 	.word	0x4f465f52
 80052f4:	54414d52 	.word	0x54414d52
 80052f8:	0051555f 	.word	0x0051555f

080052fc <ai_math_sqrt>:
 80052fc:	eef0 0a40 	vmov.f32	s1, s0
 8005300:	eef5 0a40 	vcmp.f32	s1, #0.0
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80053b0 <.text_12>
 800530c:	db01      	blt.n	8005312 <ai_math_sqrt+0x16>
 800530e:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8005312:	4770      	bx	lr

08005314 <ai_math_exp>:
 8005314:	f00a bfac 	b.w	8010270 <expf>

08005318 <ai_math_pow>:
 8005318:	f00b b8f6 	b.w	8010508 <powf>

0800531c <ai_math_tanh>:
 800531c:	f00a bd82 	b.w	800fe24 <tanhf>

08005320 <ai_math_cosh>:
 8005320:	f00a bf46 	b.w	80101b0 <coshf>

08005324 <ai_math_relu>:
 8005324:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800532c:	bf48      	it	mi
 800532e:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80053b0 <.text_12>
 8005332:	4770      	bx	lr

08005334 <ai_math_prelu>:
 8005334:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	bf48      	it	mi
 800533e:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8005342:	4770      	bx	lr

08005344 <ai_math_sigmoid>:
 8005344:	b500      	push	{lr}
 8005346:	b081      	sub	sp, #4
 8005348:	eeb1 0a40 	vneg.f32	s0, s0
 800534c:	f00a ff90 	bl	8010270 <expf>
 8005350:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005354:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005358:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800535c:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8005360:	b001      	add	sp, #4
 8005362:	bd00      	pop	{pc}

08005364 <ai_math_hard_sigmoid>:
 8005364:	eef0 0a40 	vmov.f32	s1, s0
 8005368:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80053b4 <.text_13>
 800536c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005370:	ee00 0a81 	vmla.f32	s0, s1, s2
 8005374:	eddf 0a10 	vldr	s1, [pc, #64]	; 80053b8 <.text_14>
 8005378:	eeb4 0a60 	vcmp.f32	s0, s1
 800537c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005380:	da07      	bge.n	8005392 <ai_math_hard_sigmoid+0x2e>
 8005382:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800538a:	d504      	bpl.n	8005396 <ai_math_hard_sigmoid+0x32>
 800538c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80053b0 <.text_12>
 8005390:	4770      	bx	lr
 8005392:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005396:	4770      	bx	lr

08005398 <ai_math_sign>:
 8005398:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	bfcc      	ite	gt
 80053a2:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80053bc <.text_15>
 80053a6:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80053c0 <.text_16>
 80053aa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80053ae:	4770      	bx	lr

080053b0 <.text_12>:
 80053b0:	00000000 	.word	0x00000000

080053b4 <.text_13>:
 80053b4:	3e4ccccd 	.word	0x3e4ccccd

080053b8 <.text_14>:
 80053b8:	3f800001 	.word	0x3f800001

080053bc <.text_15>:
 80053bc:	00000001 	.word	0x00000001

080053c0 <.text_16>:
 80053c0:	ffffffff 	.word	0xffffffff

080053c4 <ai_div>:
 80053c4:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80053c8:	4770      	bx	lr

080053ca <ai_floor_div>:
 80053ca:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80053ce:	f00a bb4f 	b.w	800fa70 <floorf>

080053d2 <ai_floor_mod>:
 80053d2:	f00a bfc7 	b.w	8010364 <fmodf>

080053d6 <ai_max>:
 80053d6:	eef4 0a40 	vcmp.f32	s1, s0
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	bf58      	it	pl
 80053e0:	eeb0 0a60 	vmovpl.f32	s0, s1
 80053e4:	4770      	bx	lr

080053e6 <ai_min>:
 80053e6:	eeb4 0a60 	vcmp.f32	s0, s1
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ee:	bf58      	it	pl
 80053f0:	eeb0 0a60 	vmovpl.f32	s0, s1
 80053f4:	4770      	bx	lr

080053f6 <ai_mul>:
 80053f6:	ee20 0a20 	vmul.f32	s0, s0, s1
 80053fa:	4770      	bx	lr

080053fc <ai_sub>:
 80053fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005400:	4770      	bx	lr

08005402 <ai_sum>:
 8005402:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005406:	4770      	bx	lr

08005408 <arm_mat_init_f32>:
 8005408:	8001      	strh	r1, [r0, #0]
 800540a:	8042      	strh	r2, [r0, #2]
 800540c:	6043      	str	r3, [r0, #4]
 800540e:	4770      	bx	lr

08005410 <__aeabi_memset>:
 8005410:	b470      	push	{r4, r5, r6}
 8005412:	0784      	lsls	r4, r0, #30
 8005414:	d046      	beq.n	80054a4 <__aeabi_memset+0x94>
 8005416:	1e4c      	subs	r4, r1, #1
 8005418:	2900      	cmp	r1, #0
 800541a:	d041      	beq.n	80054a0 <__aeabi_memset+0x90>
 800541c:	b2d5      	uxtb	r5, r2
 800541e:	4603      	mov	r3, r0
 8005420:	e002      	b.n	8005428 <__aeabi_memset+0x18>
 8005422:	1e61      	subs	r1, r4, #1
 8005424:	b3e4      	cbz	r4, 80054a0 <__aeabi_memset+0x90>
 8005426:	460c      	mov	r4, r1
 8005428:	f803 5b01 	strb.w	r5, [r3], #1
 800542c:	0799      	lsls	r1, r3, #30
 800542e:	d1f8      	bne.n	8005422 <__aeabi_memset+0x12>
 8005430:	2c03      	cmp	r4, #3
 8005432:	d92e      	bls.n	8005492 <__aeabi_memset+0x82>
 8005434:	b2d5      	uxtb	r5, r2
 8005436:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800543a:	2c0f      	cmp	r4, #15
 800543c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005440:	d919      	bls.n	8005476 <__aeabi_memset+0x66>
 8005442:	4626      	mov	r6, r4
 8005444:	f103 0110 	add.w	r1, r3, #16
 8005448:	3e10      	subs	r6, #16
 800544a:	2e0f      	cmp	r6, #15
 800544c:	f841 5c10 	str.w	r5, [r1, #-16]
 8005450:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005454:	f841 5c08 	str.w	r5, [r1, #-8]
 8005458:	f841 5c04 	str.w	r5, [r1, #-4]
 800545c:	f101 0110 	add.w	r1, r1, #16
 8005460:	d8f2      	bhi.n	8005448 <__aeabi_memset+0x38>
 8005462:	f1a4 0110 	sub.w	r1, r4, #16
 8005466:	f021 010f 	bic.w	r1, r1, #15
 800546a:	f004 040f 	and.w	r4, r4, #15
 800546e:	3110      	adds	r1, #16
 8005470:	2c03      	cmp	r4, #3
 8005472:	440b      	add	r3, r1
 8005474:	d90d      	bls.n	8005492 <__aeabi_memset+0x82>
 8005476:	461e      	mov	r6, r3
 8005478:	4621      	mov	r1, r4
 800547a:	3904      	subs	r1, #4
 800547c:	2903      	cmp	r1, #3
 800547e:	f846 5b04 	str.w	r5, [r6], #4
 8005482:	d8fa      	bhi.n	800547a <__aeabi_memset+0x6a>
 8005484:	1f21      	subs	r1, r4, #4
 8005486:	f021 0103 	bic.w	r1, r1, #3
 800548a:	3104      	adds	r1, #4
 800548c:	440b      	add	r3, r1
 800548e:	f004 0403 	and.w	r4, r4, #3
 8005492:	b12c      	cbz	r4, 80054a0 <__aeabi_memset+0x90>
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	441c      	add	r4, r3
 8005498:	f803 2b01 	strb.w	r2, [r3], #1
 800549c:	42a3      	cmp	r3, r4
 800549e:	d1fb      	bne.n	8005498 <__aeabi_memset+0x88>
 80054a0:	bc70      	pop	{r4, r5, r6}
 80054a2:	4770      	bx	lr
 80054a4:	460c      	mov	r4, r1
 80054a6:	4603      	mov	r3, r0
 80054a8:	e7c2      	b.n	8005430 <__aeabi_memset+0x20>
	...

080054ac <__aeabi_drsub>:
 80054ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80054b0:	e002      	b.n	80054b8 <__adddf3>
 80054b2:	bf00      	nop

080054b4 <__aeabi_dsub>:
 80054b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080054b8 <__adddf3>:
 80054b8:	b530      	push	{r4, r5, lr}
 80054ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80054be:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80054c2:	ea94 0f05 	teq	r4, r5
 80054c6:	bf08      	it	eq
 80054c8:	ea90 0f02 	teqeq	r0, r2
 80054cc:	bf1f      	itttt	ne
 80054ce:	ea54 0c00 	orrsne.w	ip, r4, r0
 80054d2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80054d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80054da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80054de:	f000 80e2 	beq.w	80056a6 <__adddf3+0x1ee>
 80054e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80054e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80054ea:	bfb8      	it	lt
 80054ec:	426d      	neglt	r5, r5
 80054ee:	dd0c      	ble.n	800550a <__adddf3+0x52>
 80054f0:	442c      	add	r4, r5
 80054f2:	ea80 0202 	eor.w	r2, r0, r2
 80054f6:	ea81 0303 	eor.w	r3, r1, r3
 80054fa:	ea82 0000 	eor.w	r0, r2, r0
 80054fe:	ea83 0101 	eor.w	r1, r3, r1
 8005502:	ea80 0202 	eor.w	r2, r0, r2
 8005506:	ea81 0303 	eor.w	r3, r1, r3
 800550a:	2d36      	cmp	r5, #54	; 0x36
 800550c:	bf88      	it	hi
 800550e:	bd30      	pophi	{r4, r5, pc}
 8005510:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005514:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005518:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800551c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005520:	d002      	beq.n	8005528 <__adddf3+0x70>
 8005522:	4240      	negs	r0, r0
 8005524:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005528:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800552c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005530:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005534:	d002      	beq.n	800553c <__adddf3+0x84>
 8005536:	4252      	negs	r2, r2
 8005538:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800553c:	ea94 0f05 	teq	r4, r5
 8005540:	f000 80a7 	beq.w	8005692 <__adddf3+0x1da>
 8005544:	f1a4 0401 	sub.w	r4, r4, #1
 8005548:	f1d5 0e20 	rsbs	lr, r5, #32
 800554c:	db0d      	blt.n	800556a <__adddf3+0xb2>
 800554e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005552:	fa22 f205 	lsr.w	r2, r2, r5
 8005556:	1880      	adds	r0, r0, r2
 8005558:	f141 0100 	adc.w	r1, r1, #0
 800555c:	fa03 f20e 	lsl.w	r2, r3, lr
 8005560:	1880      	adds	r0, r0, r2
 8005562:	fa43 f305 	asr.w	r3, r3, r5
 8005566:	4159      	adcs	r1, r3
 8005568:	e00e      	b.n	8005588 <__adddf3+0xd0>
 800556a:	f1a5 0520 	sub.w	r5, r5, #32
 800556e:	f10e 0e20 	add.w	lr, lr, #32
 8005572:	2a01      	cmp	r2, #1
 8005574:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005578:	bf28      	it	cs
 800557a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800557e:	fa43 f305 	asr.w	r3, r3, r5
 8005582:	18c0      	adds	r0, r0, r3
 8005584:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800558c:	d507      	bpl.n	800559e <__adddf3+0xe6>
 800558e:	f04f 0e00 	mov.w	lr, #0
 8005592:	f1dc 0c00 	rsbs	ip, ip, #0
 8005596:	eb7e 0000 	sbcs.w	r0, lr, r0
 800559a:	eb6e 0101 	sbc.w	r1, lr, r1
 800559e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80055a2:	d31b      	bcc.n	80055dc <__adddf3+0x124>
 80055a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80055a8:	d30c      	bcc.n	80055c4 <__adddf3+0x10c>
 80055aa:	0849      	lsrs	r1, r1, #1
 80055ac:	ea5f 0030 	movs.w	r0, r0, rrx
 80055b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80055b4:	f104 0401 	add.w	r4, r4, #1
 80055b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80055bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80055c0:	f080 809a 	bcs.w	80056f8 <__adddf3+0x240>
 80055c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80055c8:	bf08      	it	eq
 80055ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80055ce:	f150 0000 	adcs.w	r0, r0, #0
 80055d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80055d6:	ea41 0105 	orr.w	r1, r1, r5
 80055da:	bd30      	pop	{r4, r5, pc}
 80055dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80055e0:	4140      	adcs	r0, r0
 80055e2:	eb41 0101 	adc.w	r1, r1, r1
 80055e6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80055ea:	f1a4 0401 	sub.w	r4, r4, #1
 80055ee:	d1e9      	bne.n	80055c4 <__adddf3+0x10c>
 80055f0:	f091 0f00 	teq	r1, #0
 80055f4:	bf04      	itt	eq
 80055f6:	4601      	moveq	r1, r0
 80055f8:	2000      	moveq	r0, #0
 80055fa:	fab1 f381 	clz	r3, r1
 80055fe:	bf08      	it	eq
 8005600:	3320      	addeq	r3, #32
 8005602:	f1a3 030b 	sub.w	r3, r3, #11
 8005606:	f1b3 0220 	subs.w	r2, r3, #32
 800560a:	da0c      	bge.n	8005626 <__adddf3+0x16e>
 800560c:	320c      	adds	r2, #12
 800560e:	dd08      	ble.n	8005622 <__adddf3+0x16a>
 8005610:	f102 0c14 	add.w	ip, r2, #20
 8005614:	f1c2 020c 	rsb	r2, r2, #12
 8005618:	fa01 f00c 	lsl.w	r0, r1, ip
 800561c:	fa21 f102 	lsr.w	r1, r1, r2
 8005620:	e00c      	b.n	800563c <__adddf3+0x184>
 8005622:	f102 0214 	add.w	r2, r2, #20
 8005626:	bfd8      	it	le
 8005628:	f1c2 0c20 	rsble	ip, r2, #32
 800562c:	fa01 f102 	lsl.w	r1, r1, r2
 8005630:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005634:	bfdc      	itt	le
 8005636:	ea41 010c 	orrle.w	r1, r1, ip
 800563a:	4090      	lslle	r0, r2
 800563c:	1ae4      	subs	r4, r4, r3
 800563e:	bfa2      	ittt	ge
 8005640:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005644:	4329      	orrge	r1, r5
 8005646:	bd30      	popge	{r4, r5, pc}
 8005648:	ea6f 0404 	mvn.w	r4, r4
 800564c:	3c1f      	subs	r4, #31
 800564e:	da1c      	bge.n	800568a <__adddf3+0x1d2>
 8005650:	340c      	adds	r4, #12
 8005652:	dc0e      	bgt.n	8005672 <__adddf3+0x1ba>
 8005654:	f104 0414 	add.w	r4, r4, #20
 8005658:	f1c4 0220 	rsb	r2, r4, #32
 800565c:	fa20 f004 	lsr.w	r0, r0, r4
 8005660:	fa01 f302 	lsl.w	r3, r1, r2
 8005664:	ea40 0003 	orr.w	r0, r0, r3
 8005668:	fa21 f304 	lsr.w	r3, r1, r4
 800566c:	ea45 0103 	orr.w	r1, r5, r3
 8005670:	bd30      	pop	{r4, r5, pc}
 8005672:	f1c4 040c 	rsb	r4, r4, #12
 8005676:	f1c4 0220 	rsb	r2, r4, #32
 800567a:	fa20 f002 	lsr.w	r0, r0, r2
 800567e:	fa01 f304 	lsl.w	r3, r1, r4
 8005682:	ea40 0003 	orr.w	r0, r0, r3
 8005686:	4629      	mov	r1, r5
 8005688:	bd30      	pop	{r4, r5, pc}
 800568a:	fa21 f004 	lsr.w	r0, r1, r4
 800568e:	4629      	mov	r1, r5
 8005690:	bd30      	pop	{r4, r5, pc}
 8005692:	f094 0f00 	teq	r4, #0
 8005696:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800569a:	bf06      	itte	eq
 800569c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80056a0:	3401      	addeq	r4, #1
 80056a2:	3d01      	subne	r5, #1
 80056a4:	e74e      	b.n	8005544 <__adddf3+0x8c>
 80056a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80056aa:	bf18      	it	ne
 80056ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80056b0:	d029      	beq.n	8005706 <__adddf3+0x24e>
 80056b2:	ea94 0f05 	teq	r4, r5
 80056b6:	bf08      	it	eq
 80056b8:	ea90 0f02 	teqeq	r0, r2
 80056bc:	d005      	beq.n	80056ca <__adddf3+0x212>
 80056be:	ea54 0c00 	orrs.w	ip, r4, r0
 80056c2:	bf04      	itt	eq
 80056c4:	4619      	moveq	r1, r3
 80056c6:	4610      	moveq	r0, r2
 80056c8:	bd30      	pop	{r4, r5, pc}
 80056ca:	ea91 0f03 	teq	r1, r3
 80056ce:	bf1e      	ittt	ne
 80056d0:	2100      	movne	r1, #0
 80056d2:	2000      	movne	r0, #0
 80056d4:	bd30      	popne	{r4, r5, pc}
 80056d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80056da:	d105      	bne.n	80056e8 <__adddf3+0x230>
 80056dc:	0040      	lsls	r0, r0, #1
 80056de:	4149      	adcs	r1, r1
 80056e0:	bf28      	it	cs
 80056e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80056e6:	bd30      	pop	{r4, r5, pc}
 80056e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80056ec:	bf3c      	itt	cc
 80056ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80056f2:	bd30      	popcc	{r4, r5, pc}
 80056f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80056f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80056fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005700:	f04f 0000 	mov.w	r0, #0
 8005704:	bd30      	pop	{r4, r5, pc}
 8005706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800570a:	bf1a      	itte	ne
 800570c:	4619      	movne	r1, r3
 800570e:	4610      	movne	r0, r2
 8005710:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005714:	bf1c      	itt	ne
 8005716:	460b      	movne	r3, r1
 8005718:	4602      	movne	r2, r0
 800571a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800571e:	bf06      	itte	eq
 8005720:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005724:	ea91 0f03 	teqeq	r1, r3
 8005728:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800572c:	bd30      	pop	{r4, r5, pc}
 800572e:	bf00      	nop

08005730 <__aeabi_ui2d>:
 8005730:	f090 0f00 	teq	r0, #0
 8005734:	bf04      	itt	eq
 8005736:	2100      	moveq	r1, #0
 8005738:	4770      	bxeq	lr
 800573a:	b530      	push	{r4, r5, lr}
 800573c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005740:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005744:	f04f 0500 	mov.w	r5, #0
 8005748:	f04f 0100 	mov.w	r1, #0
 800574c:	e750      	b.n	80055f0 <__adddf3+0x138>
 800574e:	bf00      	nop

08005750 <__aeabi_i2d>:
 8005750:	f090 0f00 	teq	r0, #0
 8005754:	bf04      	itt	eq
 8005756:	2100      	moveq	r1, #0
 8005758:	4770      	bxeq	lr
 800575a:	b530      	push	{r4, r5, lr}
 800575c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005760:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005764:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005768:	bf48      	it	mi
 800576a:	4240      	negmi	r0, r0
 800576c:	f04f 0100 	mov.w	r1, #0
 8005770:	e73e      	b.n	80055f0 <__adddf3+0x138>
 8005772:	bf00      	nop

08005774 <__aeabi_f2d>:
 8005774:	0042      	lsls	r2, r0, #1
 8005776:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800577a:	ea4f 0131 	mov.w	r1, r1, rrx
 800577e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005782:	bf1f      	itttt	ne
 8005784:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005788:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800578c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005790:	4770      	bxne	lr
 8005792:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8005796:	bf08      	it	eq
 8005798:	4770      	bxeq	lr
 800579a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800579e:	bf04      	itt	eq
 80057a0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80057a4:	4770      	bxeq	lr
 80057a6:	b530      	push	{r4, r5, lr}
 80057a8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80057ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80057b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80057b4:	e71c      	b.n	80055f0 <__adddf3+0x138>
 80057b6:	bf00      	nop

080057b8 <__aeabi_ul2d>:
 80057b8:	ea50 0201 	orrs.w	r2, r0, r1
 80057bc:	bf08      	it	eq
 80057be:	4770      	bxeq	lr
 80057c0:	b530      	push	{r4, r5, lr}
 80057c2:	f04f 0500 	mov.w	r5, #0
 80057c6:	e00a      	b.n	80057de <__aeabi_l2d+0x16>

080057c8 <__aeabi_l2d>:
 80057c8:	ea50 0201 	orrs.w	r2, r0, r1
 80057cc:	bf08      	it	eq
 80057ce:	4770      	bxeq	lr
 80057d0:	b530      	push	{r4, r5, lr}
 80057d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80057d6:	d502      	bpl.n	80057de <__aeabi_l2d+0x16>
 80057d8:	4240      	negs	r0, r0
 80057da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80057de:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80057e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80057e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80057ea:	f43f aed8 	beq.w	800559e <__adddf3+0xe6>
 80057ee:	f04f 0203 	mov.w	r2, #3
 80057f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80057f6:	bf18      	it	ne
 80057f8:	3203      	addne	r2, #3
 80057fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80057fe:	bf18      	it	ne
 8005800:	3203      	addne	r2, #3
 8005802:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005806:	f1c2 0320 	rsb	r3, r2, #32
 800580a:	fa00 fc03 	lsl.w	ip, r0, r3
 800580e:	fa20 f002 	lsr.w	r0, r0, r2
 8005812:	fa01 fe03 	lsl.w	lr, r1, r3
 8005816:	ea40 000e 	orr.w	r0, r0, lr
 800581a:	fa21 f102 	lsr.w	r1, r1, r2
 800581e:	4414      	add	r4, r2
 8005820:	e6bd      	b.n	800559e <__adddf3+0xe6>
 8005822:	bf00      	nop

08005824 <__aeabi_dmul>:
 8005824:	b570      	push	{r4, r5, r6, lr}
 8005826:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800582a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800582e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005832:	bf1d      	ittte	ne
 8005834:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005838:	ea94 0f0c 	teqne	r4, ip
 800583c:	ea95 0f0c 	teqne	r5, ip
 8005840:	f000 f8de 	bleq	8005a00 <__aeabi_dmul+0x1dc>
 8005844:	442c      	add	r4, r5
 8005846:	ea81 0603 	eor.w	r6, r1, r3
 800584a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800584e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8005852:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005856:	bf18      	it	ne
 8005858:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800585c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005864:	d038      	beq.n	80058d8 <__aeabi_dmul+0xb4>
 8005866:	fba0 ce02 	umull	ip, lr, r0, r2
 800586a:	f04f 0500 	mov.w	r5, #0
 800586e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8005872:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8005876:	fbe0 e503 	umlal	lr, r5, r0, r3
 800587a:	f04f 0600 	mov.w	r6, #0
 800587e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8005882:	f09c 0f00 	teq	ip, #0
 8005886:	bf18      	it	ne
 8005888:	f04e 0e01 	orrne.w	lr, lr, #1
 800588c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8005890:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8005894:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8005898:	d204      	bcs.n	80058a4 <__aeabi_dmul+0x80>
 800589a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800589e:	416d      	adcs	r5, r5
 80058a0:	eb46 0606 	adc.w	r6, r6, r6
 80058a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80058a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80058ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80058b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80058b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80058b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80058bc:	bf88      	it	hi
 80058be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80058c2:	d81e      	bhi.n	8005902 <__aeabi_dmul+0xde>
 80058c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80058c8:	bf08      	it	eq
 80058ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80058ce:	f150 0000 	adcs.w	r0, r0, #0
 80058d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80058dc:	ea46 0101 	orr.w	r1, r6, r1
 80058e0:	ea40 0002 	orr.w	r0, r0, r2
 80058e4:	ea81 0103 	eor.w	r1, r1, r3
 80058e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80058ec:	bfc2      	ittt	gt
 80058ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80058f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80058f6:	bd70      	popgt	{r4, r5, r6, pc}
 80058f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80058fc:	f04f 0e00 	mov.w	lr, #0
 8005900:	3c01      	subs	r4, #1
 8005902:	f300 80ab 	bgt.w	8005a5c <__aeabi_dmul+0x238>
 8005906:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800590a:	bfde      	ittt	le
 800590c:	2000      	movle	r0, #0
 800590e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8005912:	bd70      	pople	{r4, r5, r6, pc}
 8005914:	f1c4 0400 	rsb	r4, r4, #0
 8005918:	3c20      	subs	r4, #32
 800591a:	da35      	bge.n	8005988 <__aeabi_dmul+0x164>
 800591c:	340c      	adds	r4, #12
 800591e:	dc1b      	bgt.n	8005958 <__aeabi_dmul+0x134>
 8005920:	f104 0414 	add.w	r4, r4, #20
 8005924:	f1c4 0520 	rsb	r5, r4, #32
 8005928:	fa00 f305 	lsl.w	r3, r0, r5
 800592c:	fa20 f004 	lsr.w	r0, r0, r4
 8005930:	fa01 f205 	lsl.w	r2, r1, r5
 8005934:	ea40 0002 	orr.w	r0, r0, r2
 8005938:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800593c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005940:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005944:	fa21 f604 	lsr.w	r6, r1, r4
 8005948:	eb42 0106 	adc.w	r1, r2, r6
 800594c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005950:	bf08      	it	eq
 8005952:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f1c4 040c 	rsb	r4, r4, #12
 800595c:	f1c4 0520 	rsb	r5, r4, #32
 8005960:	fa00 f304 	lsl.w	r3, r0, r4
 8005964:	fa20 f005 	lsr.w	r0, r0, r5
 8005968:	fa01 f204 	lsl.w	r2, r1, r4
 800596c:	ea40 0002 	orr.w	r0, r0, r2
 8005970:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005974:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005978:	f141 0100 	adc.w	r1, r1, #0
 800597c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005980:	bf08      	it	eq
 8005982:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	f1c4 0520 	rsb	r5, r4, #32
 800598c:	fa00 f205 	lsl.w	r2, r0, r5
 8005990:	ea4e 0e02 	orr.w	lr, lr, r2
 8005994:	fa20 f304 	lsr.w	r3, r0, r4
 8005998:	fa01 f205 	lsl.w	r2, r1, r5
 800599c:	ea43 0302 	orr.w	r3, r3, r2
 80059a0:	fa21 f004 	lsr.w	r0, r1, r4
 80059a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80059a8:	fa21 f204 	lsr.w	r2, r1, r4
 80059ac:	ea20 0002 	bic.w	r0, r0, r2
 80059b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80059b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80059b8:	bf08      	it	eq
 80059ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	f094 0f00 	teq	r4, #0
 80059c4:	d10f      	bne.n	80059e6 <__aeabi_dmul+0x1c2>
 80059c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80059ca:	0040      	lsls	r0, r0, #1
 80059cc:	eb41 0101 	adc.w	r1, r1, r1
 80059d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80059d4:	bf08      	it	eq
 80059d6:	3c01      	subeq	r4, #1
 80059d8:	d0f7      	beq.n	80059ca <__aeabi_dmul+0x1a6>
 80059da:	ea41 0106 	orr.w	r1, r1, r6
 80059de:	f095 0f00 	teq	r5, #0
 80059e2:	bf18      	it	ne
 80059e4:	4770      	bxne	lr
 80059e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80059ea:	0052      	lsls	r2, r2, #1
 80059ec:	eb43 0303 	adc.w	r3, r3, r3
 80059f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80059f4:	bf08      	it	eq
 80059f6:	3d01      	subeq	r5, #1
 80059f8:	d0f7      	beq.n	80059ea <__aeabi_dmul+0x1c6>
 80059fa:	ea43 0306 	orr.w	r3, r3, r6
 80059fe:	4770      	bx	lr
 8005a00:	ea94 0f0c 	teq	r4, ip
 8005a04:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005a08:	bf18      	it	ne
 8005a0a:	ea95 0f0c 	teqne	r5, ip
 8005a0e:	d00c      	beq.n	8005a2a <__aeabi_dmul+0x206>
 8005a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005a14:	bf18      	it	ne
 8005a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005a1a:	d1d1      	bne.n	80059c0 <__aeabi_dmul+0x19c>
 8005a1c:	ea81 0103 	eor.w	r1, r1, r3
 8005a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005a2e:	bf06      	itte	eq
 8005a30:	4610      	moveq	r0, r2
 8005a32:	4619      	moveq	r1, r3
 8005a34:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005a38:	d019      	beq.n	8005a6e <__aeabi_dmul+0x24a>
 8005a3a:	ea94 0f0c 	teq	r4, ip
 8005a3e:	d102      	bne.n	8005a46 <__aeabi_dmul+0x222>
 8005a40:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005a44:	d113      	bne.n	8005a6e <__aeabi_dmul+0x24a>
 8005a46:	ea95 0f0c 	teq	r5, ip
 8005a4a:	d105      	bne.n	8005a58 <__aeabi_dmul+0x234>
 8005a4c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005a50:	bf1c      	itt	ne
 8005a52:	4610      	movne	r0, r2
 8005a54:	4619      	movne	r1, r3
 8005a56:	d10a      	bne.n	8005a6e <__aeabi_dmul+0x24a>
 8005a58:	ea81 0103 	eor.w	r1, r1, r3
 8005a5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8005a60:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005a64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a68:	f04f 0000 	mov.w	r0, #0
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
 8005a6e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8005a72:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8005a76:	bd70      	pop	{r4, r5, r6, pc}

08005a78 <__aeabi_ddiv>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005a7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8005a82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005a86:	bf1d      	ittte	ne
 8005a88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005a8c:	ea94 0f0c 	teqne	r4, ip
 8005a90:	ea95 0f0c 	teqne	r5, ip
 8005a94:	f000 f8a7 	bleq	8005be6 <__aeabi_ddiv+0x16e>
 8005a98:	eba4 0405 	sub.w	r4, r4, r5
 8005a9c:	ea81 0e03 	eor.w	lr, r1, r3
 8005aa0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005aa4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005aa8:	f000 8088 	beq.w	8005bbc <__aeabi_ddiv+0x144>
 8005aac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005ab0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005ab4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005ab8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005abc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005ac0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005ac4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005ac8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005acc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8005ad0:	429d      	cmp	r5, r3
 8005ad2:	bf08      	it	eq
 8005ad4:	4296      	cmpeq	r6, r2
 8005ad6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8005ada:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8005ade:	d202      	bcs.n	8005ae6 <__aeabi_ddiv+0x6e>
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	ea4f 0232 	mov.w	r2, r2, rrx
 8005ae6:	1ab6      	subs	r6, r6, r2
 8005ae8:	eb65 0503 	sbc.w	r5, r5, r3
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	ea4f 0232 	mov.w	r2, r2, rrx
 8005af2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005af6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8005afa:	ebb6 0e02 	subs.w	lr, r6, r2
 8005afe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005b02:	bf22      	ittt	cs
 8005b04:	1ab6      	subcs	r6, r6, r2
 8005b06:	4675      	movcs	r5, lr
 8005b08:	ea40 000c 	orrcs.w	r0, r0, ip
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b12:	ebb6 0e02 	subs.w	lr, r6, r2
 8005b16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005b1a:	bf22      	ittt	cs
 8005b1c:	1ab6      	subcs	r6, r6, r2
 8005b1e:	4675      	movcs	r5, lr
 8005b20:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b2a:	ebb6 0e02 	subs.w	lr, r6, r2
 8005b2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005b32:	bf22      	ittt	cs
 8005b34:	1ab6      	subcs	r6, r6, r2
 8005b36:	4675      	movcs	r5, lr
 8005b38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005b3c:	085b      	lsrs	r3, r3, #1
 8005b3e:	ea4f 0232 	mov.w	r2, r2, rrx
 8005b42:	ebb6 0e02 	subs.w	lr, r6, r2
 8005b46:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005b4a:	bf22      	ittt	cs
 8005b4c:	1ab6      	subcs	r6, r6, r2
 8005b4e:	4675      	movcs	r5, lr
 8005b50:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005b54:	ea55 0e06 	orrs.w	lr, r5, r6
 8005b58:	d018      	beq.n	8005b8c <__aeabi_ddiv+0x114>
 8005b5a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005b5e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005b62:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005b66:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005b6a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005b6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005b72:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005b76:	d1c0      	bne.n	8005afa <__aeabi_ddiv+0x82>
 8005b78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005b7c:	d10b      	bne.n	8005b96 <__aeabi_ddiv+0x11e>
 8005b7e:	ea41 0100 	orr.w	r1, r1, r0
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8005b8a:	e7b6      	b.n	8005afa <__aeabi_ddiv+0x82>
 8005b8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005b90:	bf04      	itt	eq
 8005b92:	4301      	orreq	r1, r0
 8005b94:	2000      	moveq	r0, #0
 8005b96:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8005b9a:	bf88      	it	hi
 8005b9c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8005ba0:	f63f aeaf 	bhi.w	8005902 <__aeabi_dmul+0xde>
 8005ba4:	ebb5 0c03 	subs.w	ip, r5, r3
 8005ba8:	bf04      	itt	eq
 8005baa:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005bae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005bb2:	f150 0000 	adcs.w	r0, r0, #0
 8005bb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8005bc0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005bc4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005bc8:	bfc2      	ittt	gt
 8005bca:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005bce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005bd2:	bd70      	popgt	{r4, r5, r6, pc}
 8005bd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005bd8:	f04f 0e00 	mov.w	lr, #0
 8005bdc:	3c01      	subs	r4, #1
 8005bde:	e690      	b.n	8005902 <__aeabi_dmul+0xde>
 8005be0:	ea45 0e06 	orr.w	lr, r5, r6
 8005be4:	e68d      	b.n	8005902 <__aeabi_dmul+0xde>
 8005be6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005bea:	ea94 0f0c 	teq	r4, ip
 8005bee:	bf08      	it	eq
 8005bf0:	ea95 0f0c 	teqeq	r5, ip
 8005bf4:	f43f af3b 	beq.w	8005a6e <__aeabi_dmul+0x24a>
 8005bf8:	ea94 0f0c 	teq	r4, ip
 8005bfc:	d10a      	bne.n	8005c14 <__aeabi_ddiv+0x19c>
 8005bfe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005c02:	f47f af34 	bne.w	8005a6e <__aeabi_dmul+0x24a>
 8005c06:	ea95 0f0c 	teq	r5, ip
 8005c0a:	f47f af25 	bne.w	8005a58 <__aeabi_dmul+0x234>
 8005c0e:	4610      	mov	r0, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	e72c      	b.n	8005a6e <__aeabi_dmul+0x24a>
 8005c14:	ea95 0f0c 	teq	r5, ip
 8005c18:	d106      	bne.n	8005c28 <__aeabi_ddiv+0x1b0>
 8005c1a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005c1e:	f43f aefd 	beq.w	8005a1c <__aeabi_dmul+0x1f8>
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	e722      	b.n	8005a6e <__aeabi_dmul+0x24a>
 8005c28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005c2c:	bf18      	it	ne
 8005c2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005c32:	f47f aec5 	bne.w	80059c0 <__aeabi_dmul+0x19c>
 8005c36:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005c3a:	f47f af0d 	bne.w	8005a58 <__aeabi_dmul+0x234>
 8005c3e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005c42:	f47f aeeb 	bne.w	8005a1c <__aeabi_dmul+0x1f8>
 8005c46:	e712      	b.n	8005a6e <__aeabi_dmul+0x24a>

08005c48 <__aeabi_d2f>:
 8005c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8005c50:	bf24      	itt	cs
 8005c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8005c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8005c5a:	d90d      	bls.n	8005c78 <__aeabi_d2f+0x30>
 8005c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8005c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8005c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8005c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8005c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8005c70:	bf08      	it	eq
 8005c72:	f020 0001 	biceq.w	r0, r0, #1
 8005c76:	4770      	bx	lr
 8005c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8005c7c:	d121      	bne.n	8005cc2 <__aeabi_d2f+0x7a>
 8005c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8005c82:	bfbc      	itt	lt
 8005c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8005c88:	4770      	bxlt	lr
 8005c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8005c92:	f1c2 0218 	rsb	r2, r2, #24
 8005c96:	f1c2 0c20 	rsb	ip, r2, #32
 8005c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8005c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8005ca2:	bf18      	it	ne
 8005ca4:	f040 0001 	orrne.w	r0, r0, #1
 8005ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005cb4:	ea40 000c 	orr.w	r0, r0, ip
 8005cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8005cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005cc0:	e7cc      	b.n	8005c5c <__aeabi_d2f+0x14>
 8005cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8005cc6:	d107      	bne.n	8005cd8 <__aeabi_d2f+0x90>
 8005cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8005ccc:	bf1e      	ittt	ne
 8005cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8005cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8005cd6:	4770      	bxne	lr
 8005cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8005cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8005ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop

08005ce8 <__aeabi_uldivmod>:
 8005ce8:	b953      	cbnz	r3, 8005d00 <__aeabi_uldivmod+0x18>
 8005cea:	b94a      	cbnz	r2, 8005d00 <__aeabi_uldivmod+0x18>
 8005cec:	2900      	cmp	r1, #0
 8005cee:	bf08      	it	eq
 8005cf0:	2800      	cmpeq	r0, #0
 8005cf2:	bf1c      	itt	ne
 8005cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8005cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8005cfc:	f000 b972 	b.w	8005fe4 <__aeabi_idiv0>
 8005d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8005d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005d08:	f000 f806 	bl	8005d18 <__udivmoddi4>
 8005d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d14:	b004      	add	sp, #16
 8005d16:	4770      	bx	lr

08005d18 <__udivmoddi4>:
 8005d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d1c:	9e08      	ldr	r6, [sp, #32]
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4688      	mov	r8, r1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d14b      	bne.n	8005dbe <__udivmoddi4+0xa6>
 8005d26:	428a      	cmp	r2, r1
 8005d28:	4615      	mov	r5, r2
 8005d2a:	d967      	bls.n	8005dfc <__udivmoddi4+0xe4>
 8005d2c:	fab2 f282 	clz	r2, r2
 8005d30:	b14a      	cbz	r2, 8005d46 <__udivmoddi4+0x2e>
 8005d32:	f1c2 0720 	rsb	r7, r2, #32
 8005d36:	fa01 f302 	lsl.w	r3, r1, r2
 8005d3a:	fa20 f707 	lsr.w	r7, r0, r7
 8005d3e:	4095      	lsls	r5, r2
 8005d40:	ea47 0803 	orr.w	r8, r7, r3
 8005d44:	4094      	lsls	r4, r2
 8005d46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005d4a:	0c23      	lsrs	r3, r4, #16
 8005d4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8005d50:	fa1f fc85 	uxth.w	ip, r5
 8005d54:	fb0e 8817 	mls	r8, lr, r7, r8
 8005d58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005d5c:	fb07 f10c 	mul.w	r1, r7, ip
 8005d60:	4299      	cmp	r1, r3
 8005d62:	d909      	bls.n	8005d78 <__udivmoddi4+0x60>
 8005d64:	18eb      	adds	r3, r5, r3
 8005d66:	f107 30ff 	add.w	r0, r7, #4294967295
 8005d6a:	f080 811b 	bcs.w	8005fa4 <__udivmoddi4+0x28c>
 8005d6e:	4299      	cmp	r1, r3
 8005d70:	f240 8118 	bls.w	8005fa4 <__udivmoddi4+0x28c>
 8005d74:	3f02      	subs	r7, #2
 8005d76:	442b      	add	r3, r5
 8005d78:	1a5b      	subs	r3, r3, r1
 8005d7a:	b2a4      	uxth	r4, r4
 8005d7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8005d80:	fb0e 3310 	mls	r3, lr, r0, r3
 8005d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005d88:	fb00 fc0c 	mul.w	ip, r0, ip
 8005d8c:	45a4      	cmp	ip, r4
 8005d8e:	d909      	bls.n	8005da4 <__udivmoddi4+0x8c>
 8005d90:	192c      	adds	r4, r5, r4
 8005d92:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d96:	f080 8107 	bcs.w	8005fa8 <__udivmoddi4+0x290>
 8005d9a:	45a4      	cmp	ip, r4
 8005d9c:	f240 8104 	bls.w	8005fa8 <__udivmoddi4+0x290>
 8005da0:	3802      	subs	r0, #2
 8005da2:	442c      	add	r4, r5
 8005da4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005da8:	eba4 040c 	sub.w	r4, r4, ip
 8005dac:	2700      	movs	r7, #0
 8005dae:	b11e      	cbz	r6, 8005db8 <__udivmoddi4+0xa0>
 8005db0:	40d4      	lsrs	r4, r2
 8005db2:	2300      	movs	r3, #0
 8005db4:	e9c6 4300 	strd	r4, r3, [r6]
 8005db8:	4639      	mov	r1, r7
 8005dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbe:	428b      	cmp	r3, r1
 8005dc0:	d909      	bls.n	8005dd6 <__udivmoddi4+0xbe>
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	f000 80eb 	beq.w	8005f9e <__udivmoddi4+0x286>
 8005dc8:	2700      	movs	r7, #0
 8005dca:	e9c6 0100 	strd	r0, r1, [r6]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd6:	fab3 f783 	clz	r7, r3
 8005dda:	2f00      	cmp	r7, #0
 8005ddc:	d147      	bne.n	8005e6e <__udivmoddi4+0x156>
 8005dde:	428b      	cmp	r3, r1
 8005de0:	d302      	bcc.n	8005de8 <__udivmoddi4+0xd0>
 8005de2:	4282      	cmp	r2, r0
 8005de4:	f200 80fa 	bhi.w	8005fdc <__udivmoddi4+0x2c4>
 8005de8:	1a84      	subs	r4, r0, r2
 8005dea:	eb61 0303 	sbc.w	r3, r1, r3
 8005dee:	2001      	movs	r0, #1
 8005df0:	4698      	mov	r8, r3
 8005df2:	2e00      	cmp	r6, #0
 8005df4:	d0e0      	beq.n	8005db8 <__udivmoddi4+0xa0>
 8005df6:	e9c6 4800 	strd	r4, r8, [r6]
 8005dfa:	e7dd      	b.n	8005db8 <__udivmoddi4+0xa0>
 8005dfc:	b902      	cbnz	r2, 8005e00 <__udivmoddi4+0xe8>
 8005dfe:	deff      	udf	#255	; 0xff
 8005e00:	fab2 f282 	clz	r2, r2
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	f040 808f 	bne.w	8005f28 <__udivmoddi4+0x210>
 8005e0a:	1b49      	subs	r1, r1, r5
 8005e0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005e10:	fa1f f885 	uxth.w	r8, r5
 8005e14:	2701      	movs	r7, #1
 8005e16:	fbb1 fcfe 	udiv	ip, r1, lr
 8005e1a:	0c23      	lsrs	r3, r4, #16
 8005e1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8005e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005e24:	fb08 f10c 	mul.w	r1, r8, ip
 8005e28:	4299      	cmp	r1, r3
 8005e2a:	d907      	bls.n	8005e3c <__udivmoddi4+0x124>
 8005e2c:	18eb      	adds	r3, r5, r3
 8005e2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8005e32:	d202      	bcs.n	8005e3a <__udivmoddi4+0x122>
 8005e34:	4299      	cmp	r1, r3
 8005e36:	f200 80cd 	bhi.w	8005fd4 <__udivmoddi4+0x2bc>
 8005e3a:	4684      	mov	ip, r0
 8005e3c:	1a59      	subs	r1, r3, r1
 8005e3e:	b2a3      	uxth	r3, r4
 8005e40:	fbb1 f0fe 	udiv	r0, r1, lr
 8005e44:	fb0e 1410 	mls	r4, lr, r0, r1
 8005e48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005e4c:	fb08 f800 	mul.w	r8, r8, r0
 8005e50:	45a0      	cmp	r8, r4
 8005e52:	d907      	bls.n	8005e64 <__udivmoddi4+0x14c>
 8005e54:	192c      	adds	r4, r5, r4
 8005e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e5a:	d202      	bcs.n	8005e62 <__udivmoddi4+0x14a>
 8005e5c:	45a0      	cmp	r8, r4
 8005e5e:	f200 80b6 	bhi.w	8005fce <__udivmoddi4+0x2b6>
 8005e62:	4618      	mov	r0, r3
 8005e64:	eba4 0408 	sub.w	r4, r4, r8
 8005e68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8005e6c:	e79f      	b.n	8005dae <__udivmoddi4+0x96>
 8005e6e:	f1c7 0c20 	rsb	ip, r7, #32
 8005e72:	40bb      	lsls	r3, r7
 8005e74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8005e78:	ea4e 0e03 	orr.w	lr, lr, r3
 8005e7c:	fa01 f407 	lsl.w	r4, r1, r7
 8005e80:	fa20 f50c 	lsr.w	r5, r0, ip
 8005e84:	fa21 f30c 	lsr.w	r3, r1, ip
 8005e88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8005e8c:	4325      	orrs	r5, r4
 8005e8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8005e92:	0c2c      	lsrs	r4, r5, #16
 8005e94:	fb08 3319 	mls	r3, r8, r9, r3
 8005e98:	fa1f fa8e 	uxth.w	sl, lr
 8005e9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8005ea0:	fb09 f40a 	mul.w	r4, r9, sl
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	fa02 f207 	lsl.w	r2, r2, r7
 8005eaa:	fa00 f107 	lsl.w	r1, r0, r7
 8005eae:	d90b      	bls.n	8005ec8 <__udivmoddi4+0x1b0>
 8005eb0:	eb1e 0303 	adds.w	r3, lr, r3
 8005eb4:	f109 30ff 	add.w	r0, r9, #4294967295
 8005eb8:	f080 8087 	bcs.w	8005fca <__udivmoddi4+0x2b2>
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	f240 8084 	bls.w	8005fca <__udivmoddi4+0x2b2>
 8005ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8005ec6:	4473      	add	r3, lr
 8005ec8:	1b1b      	subs	r3, r3, r4
 8005eca:	b2ad      	uxth	r5, r5
 8005ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8005ed0:	fb08 3310 	mls	r3, r8, r0, r3
 8005ed4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8005ed8:	fb00 fa0a 	mul.w	sl, r0, sl
 8005edc:	45a2      	cmp	sl, r4
 8005ede:	d908      	bls.n	8005ef2 <__udivmoddi4+0x1da>
 8005ee0:	eb1e 0404 	adds.w	r4, lr, r4
 8005ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ee8:	d26b      	bcs.n	8005fc2 <__udivmoddi4+0x2aa>
 8005eea:	45a2      	cmp	sl, r4
 8005eec:	d969      	bls.n	8005fc2 <__udivmoddi4+0x2aa>
 8005eee:	3802      	subs	r0, #2
 8005ef0:	4474      	add	r4, lr
 8005ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8005ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8005efa:	eba4 040a 	sub.w	r4, r4, sl
 8005efe:	454c      	cmp	r4, r9
 8005f00:	46c2      	mov	sl, r8
 8005f02:	464b      	mov	r3, r9
 8005f04:	d354      	bcc.n	8005fb0 <__udivmoddi4+0x298>
 8005f06:	d051      	beq.n	8005fac <__udivmoddi4+0x294>
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	d069      	beq.n	8005fe0 <__udivmoddi4+0x2c8>
 8005f0c:	ebb1 050a 	subs.w	r5, r1, sl
 8005f10:	eb64 0403 	sbc.w	r4, r4, r3
 8005f14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8005f18:	40fd      	lsrs	r5, r7
 8005f1a:	40fc      	lsrs	r4, r7
 8005f1c:	ea4c 0505 	orr.w	r5, ip, r5
 8005f20:	e9c6 5400 	strd	r5, r4, [r6]
 8005f24:	2700      	movs	r7, #0
 8005f26:	e747      	b.n	8005db8 <__udivmoddi4+0xa0>
 8005f28:	f1c2 0320 	rsb	r3, r2, #32
 8005f2c:	fa20 f703 	lsr.w	r7, r0, r3
 8005f30:	4095      	lsls	r5, r2
 8005f32:	fa01 f002 	lsl.w	r0, r1, r2
 8005f36:	fa21 f303 	lsr.w	r3, r1, r3
 8005f3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8005f3e:	4338      	orrs	r0, r7
 8005f40:	0c01      	lsrs	r1, r0, #16
 8005f42:	fbb3 f7fe 	udiv	r7, r3, lr
 8005f46:	fa1f f885 	uxth.w	r8, r5
 8005f4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8005f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005f52:	fb07 f308 	mul.w	r3, r7, r8
 8005f56:	428b      	cmp	r3, r1
 8005f58:	fa04 f402 	lsl.w	r4, r4, r2
 8005f5c:	d907      	bls.n	8005f6e <__udivmoddi4+0x256>
 8005f5e:	1869      	adds	r1, r5, r1
 8005f60:	f107 3cff 	add.w	ip, r7, #4294967295
 8005f64:	d22f      	bcs.n	8005fc6 <__udivmoddi4+0x2ae>
 8005f66:	428b      	cmp	r3, r1
 8005f68:	d92d      	bls.n	8005fc6 <__udivmoddi4+0x2ae>
 8005f6a:	3f02      	subs	r7, #2
 8005f6c:	4429      	add	r1, r5
 8005f6e:	1acb      	subs	r3, r1, r3
 8005f70:	b281      	uxth	r1, r0
 8005f72:	fbb3 f0fe 	udiv	r0, r3, lr
 8005f76:	fb0e 3310 	mls	r3, lr, r0, r3
 8005f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005f7e:	fb00 f308 	mul.w	r3, r0, r8
 8005f82:	428b      	cmp	r3, r1
 8005f84:	d907      	bls.n	8005f96 <__udivmoddi4+0x27e>
 8005f86:	1869      	adds	r1, r5, r1
 8005f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8005f8c:	d217      	bcs.n	8005fbe <__udivmoddi4+0x2a6>
 8005f8e:	428b      	cmp	r3, r1
 8005f90:	d915      	bls.n	8005fbe <__udivmoddi4+0x2a6>
 8005f92:	3802      	subs	r0, #2
 8005f94:	4429      	add	r1, r5
 8005f96:	1ac9      	subs	r1, r1, r3
 8005f98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8005f9c:	e73b      	b.n	8005e16 <__udivmoddi4+0xfe>
 8005f9e:	4637      	mov	r7, r6
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	e709      	b.n	8005db8 <__udivmoddi4+0xa0>
 8005fa4:	4607      	mov	r7, r0
 8005fa6:	e6e7      	b.n	8005d78 <__udivmoddi4+0x60>
 8005fa8:	4618      	mov	r0, r3
 8005faa:	e6fb      	b.n	8005da4 <__udivmoddi4+0x8c>
 8005fac:	4541      	cmp	r1, r8
 8005fae:	d2ab      	bcs.n	8005f08 <__udivmoddi4+0x1f0>
 8005fb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8005fb4:	eb69 020e 	sbc.w	r2, r9, lr
 8005fb8:	3801      	subs	r0, #1
 8005fba:	4613      	mov	r3, r2
 8005fbc:	e7a4      	b.n	8005f08 <__udivmoddi4+0x1f0>
 8005fbe:	4660      	mov	r0, ip
 8005fc0:	e7e9      	b.n	8005f96 <__udivmoddi4+0x27e>
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	e795      	b.n	8005ef2 <__udivmoddi4+0x1da>
 8005fc6:	4667      	mov	r7, ip
 8005fc8:	e7d1      	b.n	8005f6e <__udivmoddi4+0x256>
 8005fca:	4681      	mov	r9, r0
 8005fcc:	e77c      	b.n	8005ec8 <__udivmoddi4+0x1b0>
 8005fce:	3802      	subs	r0, #2
 8005fd0:	442c      	add	r4, r5
 8005fd2:	e747      	b.n	8005e64 <__udivmoddi4+0x14c>
 8005fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8005fd8:	442b      	add	r3, r5
 8005fda:	e72f      	b.n	8005e3c <__udivmoddi4+0x124>
 8005fdc:	4638      	mov	r0, r7
 8005fde:	e708      	b.n	8005df2 <__udivmoddi4+0xda>
 8005fe0:	4637      	mov	r7, r6
 8005fe2:	e6e9      	b.n	8005db8 <__udivmoddi4+0xa0>

08005fe4 <__aeabi_idiv0>:
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <MX_CRC_Init+0x20>)
 8005fee:	4a07      	ldr	r2, [pc, #28]	; (800600c <MX_CRC_Init+0x24>)
 8005ff0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005ff2:	4805      	ldr	r0, [pc, #20]	; (8006008 <MX_CRC_Init+0x20>)
 8005ff4:	f002 fd06 	bl	8008a04 <HAL_CRC_Init>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8005ffe:	f000 fca5 	bl	800694c <Error_Handler>
  }

}
 8006002:	bf00      	nop
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	200009a0 	.word	0x200009a0
 800600c:	40023000 	.word	0x40023000

08006010 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a0b      	ldr	r2, [pc, #44]	; (800604c <HAL_CRC_MspInit+0x3c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d10d      	bne.n	800603e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_CRC_MspInit+0x40>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <HAL_CRC_MspInit+0x40>)
 800602c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006030:	6313      	str	r3, [r2, #48]	; 0x30
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <HAL_CRC_MspInit+0x40>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800603e:	bf00      	nop
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40023000 	.word	0x40023000
 8006050:	40023800 	.word	0x40023800

08006054 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0e      	ldr	r2, [pc, #56]	; (800609c <HAL_DMA2D_MspInit+0x48>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d115      	bne.n	8006092 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <HAL_DMA2D_MspInit+0x4c>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <HAL_DMA2D_MspInit+0x4c>)
 8006070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006074:	6313      	str	r3, [r2, #48]	; 0x30
 8006076:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <HAL_DMA2D_MspInit+0x4c>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8006082:	2200      	movs	r2, #0
 8006084:	2105      	movs	r1, #5
 8006086:	205a      	movs	r0, #90	; 0x5a
 8006088:	f002 fc92 	bl	80089b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800608c:	205a      	movs	r0, #90	; 0x5a
 800608e:	f002 fcab 	bl	80089e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	4002b000 	.word	0x4002b000
 80060a0:	40023800 	.word	0x40023800

080060a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060aa:	1d3b      	adds	r3, r7, #4
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	609a      	str	r2, [r3, #8]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80060b8:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <HAL_FMC_MspInit+0x104>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d16f      	bne.n	80061a0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80060c0:	4b39      	ldr	r3, [pc, #228]	; (80061a8 <HAL_FMC_MspInit+0x104>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80060c6:	2300      	movs	r3, #0
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	4b38      	ldr	r3, [pc, #224]	; (80061ac <HAL_FMC_MspInit+0x108>)
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	4a37      	ldr	r2, [pc, #220]	; (80061ac <HAL_FMC_MspInit+0x108>)
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	6393      	str	r3, [r2, #56]	; 0x38
 80060d6:	4b35      	ldr	r3, [pc, #212]	; (80061ac <HAL_FMC_MspInit+0x108>)
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80060e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80060e6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	2302      	movs	r3, #2
 80060ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f0:	2303      	movs	r3, #3
 80060f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80060f4:	230c      	movs	r3, #12
 80060f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80060f8:	1d3b      	adds	r3, r7, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	482c      	ldr	r0, [pc, #176]	; (80061b0 <HAL_FMC_MspInit+0x10c>)
 80060fe:	f003 f9f5 	bl	80094ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006102:	2301      	movs	r3, #1
 8006104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006106:	2302      	movs	r3, #2
 8006108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800610e:	2303      	movs	r3, #3
 8006110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006112:	230c      	movs	r3, #12
 8006114:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006116:	1d3b      	adds	r3, r7, #4
 8006118:	4619      	mov	r1, r3
 800611a:	4826      	ldr	r0, [pc, #152]	; (80061b4 <HAL_FMC_MspInit+0x110>)
 800611c:	f003 f9e6 	bl	80094ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8006120:	f248 1333 	movw	r3, #33075	; 0x8133
 8006124:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006126:	2302      	movs	r3, #2
 8006128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800612e:	2303      	movs	r3, #3
 8006130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006132:	230c      	movs	r3, #12
 8006134:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	4619      	mov	r1, r3
 800613a:	481f      	ldr	r0, [pc, #124]	; (80061b8 <HAL_FMC_MspInit+0x114>)
 800613c:	f003 f9d6 	bl	80094ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8006140:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006144:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006146:	2302      	movs	r3, #2
 8006148:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800614e:	2303      	movs	r3, #3
 8006150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006152:	230c      	movs	r3, #12
 8006154:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4818      	ldr	r0, [pc, #96]	; (80061bc <HAL_FMC_MspInit+0x118>)
 800615c:	f003 f9c6 	bl	80094ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006160:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006164:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006166:	2302      	movs	r3, #2
 8006168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800616e:	2303      	movs	r3, #3
 8006170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006172:	230c      	movs	r3, #12
 8006174:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4811      	ldr	r0, [pc, #68]	; (80061c0 <HAL_FMC_MspInit+0x11c>)
 800617c:	f003 f9b6 	bl	80094ec <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006180:	2360      	movs	r3, #96	; 0x60
 8006182:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006184:	2302      	movs	r3, #2
 8006186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800618c:	2303      	movs	r3, #3
 800618e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006190:	230c      	movs	r3, #12
 8006192:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	4619      	mov	r1, r3
 8006198:	480a      	ldr	r0, [pc, #40]	; (80061c4 <HAL_FMC_MspInit+0x120>)
 800619a:	f003 f9a7 	bl	80094ec <HAL_GPIO_Init>
 800619e:	e000      	b.n	80061a2 <HAL_FMC_MspInit+0xfe>
    return;
 80061a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	200006e0 	.word	0x200006e0
 80061ac:	40023800 	.word	0x40023800
 80061b0:	40021400 	.word	0x40021400
 80061b4:	40020800 	.word	0x40020800
 80061b8:	40021800 	.word	0x40021800
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40020c00 	.word	0x40020c00
 80061c4:	40020400 	.word	0x40020400

080061c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80061d0:	f7ff ff68 	bl	80060a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08e      	sub	sp, #56	; 0x38
 80061e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	609a      	str	r2, [r3, #8]
 80061ee:	60da      	str	r2, [r3, #12]
 80061f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f2:	2300      	movs	r3, #0
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	4b7a      	ldr	r3, [pc, #488]	; (80063e0 <MX_GPIO_Init+0x204>)
 80061f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fa:	4a79      	ldr	r2, [pc, #484]	; (80063e0 <MX_GPIO_Init+0x204>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	6313      	str	r3, [r2, #48]	; 0x30
 8006202:	4b77      	ldr	r3, [pc, #476]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	623b      	str	r3, [r7, #32]
 800620c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	4b73      	ldr	r3, [pc, #460]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	4a72      	ldr	r2, [pc, #456]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006218:	f043 0320 	orr.w	r3, r3, #32
 800621c:	6313      	str	r3, [r2, #48]	; 0x30
 800621e:	4b70      	ldr	r3, [pc, #448]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	4b6c      	ldr	r3, [pc, #432]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	4a6b      	ldr	r2, [pc, #428]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006238:	6313      	str	r3, [r2, #48]	; 0x30
 800623a:	4b69      	ldr	r3, [pc, #420]	; (80063e0 <MX_GPIO_Init+0x204>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	4b65      	ldr	r3, [pc, #404]	; (80063e0 <MX_GPIO_Init+0x204>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	4a64      	ldr	r2, [pc, #400]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	6313      	str	r3, [r2, #48]	; 0x30
 8006256:	4b62      	ldr	r3, [pc, #392]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	4b5e      	ldr	r3, [pc, #376]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	4a5d      	ldr	r2, [pc, #372]	; (80063e0 <MX_GPIO_Init+0x204>)
 800626c:	f043 0302 	orr.w	r3, r3, #2
 8006270:	6313      	str	r3, [r2, #48]	; 0x30
 8006272:	4b5b      	ldr	r3, [pc, #364]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	4b57      	ldr	r3, [pc, #348]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	4a56      	ldr	r2, [pc, #344]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800628c:	6313      	str	r3, [r2, #48]	; 0x30
 800628e:	4b54      	ldr	r3, [pc, #336]	; (80063e0 <MX_GPIO_Init+0x204>)
 8006290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	4b50      	ldr	r3, [pc, #320]	; (80063e0 <MX_GPIO_Init+0x204>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	4a4f      	ldr	r2, [pc, #316]	; (80063e0 <MX_GPIO_Init+0x204>)
 80062a4:	f043 0310 	orr.w	r3, r3, #16
 80062a8:	6313      	str	r3, [r2, #48]	; 0x30
 80062aa:	4b4d      	ldr	r3, [pc, #308]	; (80063e0 <MX_GPIO_Init+0x204>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	60bb      	str	r3, [r7, #8]
 80062b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <MX_GPIO_Init+0x204>)
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	4a48      	ldr	r2, [pc, #288]	; (80063e0 <MX_GPIO_Init+0x204>)
 80062c0:	f043 0308 	orr.w	r3, r3, #8
 80062c4:	6313      	str	r3, [r2, #48]	; 0x30
 80062c6:	4b46      	ldr	r3, [pc, #280]	; (80063e0 <MX_GPIO_Init+0x204>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	607b      	str	r3, [r7, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80062d2:	2200      	movs	r2, #0
 80062d4:	2116      	movs	r1, #22
 80062d6:	4843      	ldr	r0, [pc, #268]	; (80063e4 <MX_GPIO_Init+0x208>)
 80062d8:	f003 fbbc 	bl	8009a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80062dc:	2200      	movs	r2, #0
 80062de:	2180      	movs	r1, #128	; 0x80
 80062e0:	4841      	ldr	r0, [pc, #260]	; (80063e8 <MX_GPIO_Init+0x20c>)
 80062e2:	f003 fbb7 	bl	8009a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80062e6:	2200      	movs	r2, #0
 80062e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80062ec:	483f      	ldr	r0, [pc, #252]	; (80063ec <MX_GPIO_Init+0x210>)
 80062ee:	f003 fbb1 	bl	8009a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80062f2:	2200      	movs	r2, #0
 80062f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80062f8:	483d      	ldr	r0, [pc, #244]	; (80063f0 <MX_GPIO_Init+0x214>)
 80062fa:	f003 fbab 	bl	8009a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80062fe:	2316      	movs	r3, #22
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006302:	2301      	movs	r3, #1
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006306:	2300      	movs	r3, #0
 8006308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800630a:	2300      	movs	r3, #0
 800630c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800630e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006312:	4619      	mov	r1, r3
 8006314:	4833      	ldr	r0, [pc, #204]	; (80063e4 <MX_GPIO_Init+0x208>)
 8006316:	f003 f8e9 	bl	80094ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800631a:	f248 0307 	movw	r3, #32775	; 0x8007
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006320:	4b34      	ldr	r3, [pc, #208]	; (80063f4 <MX_GPIO_Init+0x218>)
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006324:	2300      	movs	r3, #0
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800632c:	4619      	mov	r1, r3
 800632e:	482e      	ldr	r0, [pc, #184]	; (80063e8 <MX_GPIO_Init+0x20c>)
 8006330:	f003 f8dc 	bl	80094ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006338:	2301      	movs	r3, #1
 800633a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633c:	2300      	movs	r3, #0
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006340:	2300      	movs	r3, #0
 8006342:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8006344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006348:	4619      	mov	r1, r3
 800634a:	4827      	ldr	r0, [pc, #156]	; (80063e8 <MX_GPIO_Init+0x20c>)
 800634c:	f003 f8ce 	bl	80094ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8006350:	2320      	movs	r3, #32
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8006354:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <MX_GPIO_Init+0x218>)
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006358:	2300      	movs	r3, #0
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800635c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006360:	4619      	mov	r1, r3
 8006362:	4820      	ldr	r0, [pc, #128]	; (80063e4 <MX_GPIO_Init+0x208>)
 8006364:	f003 f8c2 	bl	80094ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006368:	2304      	movs	r3, #4
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800636c:	2300      	movs	r3, #0
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006370:	2300      	movs	r3, #0
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006378:	4619      	mov	r1, r3
 800637a:	481f      	ldr	r0, [pc, #124]	; (80063f8 <MX_GPIO_Init+0x21c>)
 800637c:	f003 f8b6 	bl	80094ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006386:	2300      	movs	r3, #0
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800638a:	2300      	movs	r3, #0
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800638e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006392:	4619      	mov	r1, r3
 8006394:	4815      	ldr	r0, [pc, #84]	; (80063ec <MX_GPIO_Init+0x210>)
 8006396:	f003 f8a9 	bl	80094ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800639a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063a0:	2301      	movs	r3, #1
 80063a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a4:	2300      	movs	r3, #0
 80063a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063a8:	2300      	movs	r3, #0
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063b0:	4619      	mov	r1, r3
 80063b2:	480e      	ldr	r0, [pc, #56]	; (80063ec <MX_GPIO_Init+0x210>)
 80063b4:	f003 f89a 	bl	80094ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80063b8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063be:	2301      	movs	r3, #1
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c6:	2300      	movs	r3, #0
 80063c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80063ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ce:	4619      	mov	r1, r3
 80063d0:	4807      	ldr	r0, [pc, #28]	; (80063f0 <MX_GPIO_Init+0x214>)
 80063d2:	f003 f88b 	bl	80094ec <HAL_GPIO_Init>

}
 80063d6:	bf00      	nop
 80063d8:	3738      	adds	r7, #56	; 0x38
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40020800 	.word	0x40020800
 80063e8:	40020000 	.word	0x40020000
 80063ec:	40020c00 	.word	0x40020c00
 80063f0:	40021800 	.word	0x40021800
 80063f4:	10120000 	.word	0x10120000
 80063f8:	40020400 	.word	0x40020400

080063fc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8006400:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <MX_I2C3_Init+0x74>)
 8006402:	4a1c      	ldr	r2, [pc, #112]	; (8006474 <MX_I2C3_Init+0x78>)
 8006404:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <MX_I2C3_Init+0x74>)
 8006408:	4a1b      	ldr	r2, [pc, #108]	; (8006478 <MX_I2C3_Init+0x7c>)
 800640a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800640c:	4b18      	ldr	r3, [pc, #96]	; (8006470 <MX_I2C3_Init+0x74>)
 800640e:	2200      	movs	r2, #0
 8006410:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8006412:	4b17      	ldr	r3, [pc, #92]	; (8006470 <MX_I2C3_Init+0x74>)
 8006414:	2200      	movs	r2, #0
 8006416:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <MX_I2C3_Init+0x74>)
 800641a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800641e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <MX_I2C3_Init+0x74>)
 8006422:	2200      	movs	r2, #0
 8006424:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8006426:	4b12      	ldr	r3, [pc, #72]	; (8006470 <MX_I2C3_Init+0x74>)
 8006428:	2200      	movs	r2, #0
 800642a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800642c:	4b10      	ldr	r3, [pc, #64]	; (8006470 <MX_I2C3_Init+0x74>)
 800642e:	2200      	movs	r2, #0
 8006430:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006432:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <MX_I2C3_Init+0x74>)
 8006434:	2200      	movs	r2, #0
 8006436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8006438:	480d      	ldr	r0, [pc, #52]	; (8006470 <MX_I2C3_Init+0x74>)
 800643a:	f004 fd95 	bl	800af68 <HAL_I2C_Init>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8006444:	f000 fa82 	bl	800694c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006448:	2100      	movs	r1, #0
 800644a:	4809      	ldr	r0, [pc, #36]	; (8006470 <MX_I2C3_Init+0x74>)
 800644c:	f004 fec4 	bl	800b1d8 <HAL_I2CEx_ConfigAnalogFilter>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8006456:	f000 fa79 	bl	800694c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800645a:	2100      	movs	r1, #0
 800645c:	4804      	ldr	r0, [pc, #16]	; (8006470 <MX_I2C3_Init+0x74>)
 800645e:	f004 fef7 	bl	800b250 <HAL_I2CEx_ConfigDigitalFilter>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8006468:	f000 fa70 	bl	800694c <Error_Handler>
  }

}
 800646c:	bf00      	nop
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200009e8 	.word	0x200009e8
 8006474:	40005c00 	.word	0x40005c00
 8006478:	000186a0 	.word	0x000186a0

0800647c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	; 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006484:	f107 0314 	add.w	r3, r7, #20
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	609a      	str	r2, [r3, #8]
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a29      	ldr	r2, [pc, #164]	; (8006540 <HAL_I2C_MspInit+0xc4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d14b      	bne.n	8006536 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	4b28      	ldr	r3, [pc, #160]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	4a27      	ldr	r2, [pc, #156]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 80064a8:	f043 0304 	orr.w	r3, r3, #4
 80064ac:	6313      	str	r3, [r2, #48]	; 0x30
 80064ae:	4b25      	ldr	r3, [pc, #148]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	f003 0304 	and.w	r3, r3, #4
 80064b6:	613b      	str	r3, [r7, #16]
 80064b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	4b21      	ldr	r3, [pc, #132]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	4a20      	ldr	r2, [pc, #128]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	60fb      	str	r3, [r7, #12]
 80064d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80064d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064dc:	2312      	movs	r3, #18
 80064de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064e0:	2301      	movs	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064e4:	2300      	movs	r3, #0
 80064e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80064e8:	2304      	movs	r3, #4
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80064ec:	f107 0314 	add.w	r3, r7, #20
 80064f0:	4619      	mov	r1, r3
 80064f2:	4815      	ldr	r0, [pc, #84]	; (8006548 <HAL_I2C_MspInit+0xcc>)
 80064f4:	f002 fffa 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80064f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064fe:	2312      	movs	r3, #18
 8006500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006502:	2301      	movs	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006506:	2300      	movs	r3, #0
 8006508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800650a:	2304      	movs	r3, #4
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800650e:	f107 0314 	add.w	r3, r7, #20
 8006512:	4619      	mov	r1, r3
 8006514:	480d      	ldr	r0, [pc, #52]	; (800654c <HAL_I2C_MspInit+0xd0>)
 8006516:	f002 ffe9 	bl	80094ec <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	4b09      	ldr	r3, [pc, #36]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	4a08      	ldr	r2, [pc, #32]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 8006524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006528:	6413      	str	r3, [r2, #64]	; 0x40
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <HAL_I2C_MspInit+0xc8>)
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006532:	60bb      	str	r3, [r7, #8]
 8006534:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8006536:	bf00      	nop
 8006538:	3728      	adds	r7, #40	; 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40005c00 	.word	0x40005c00
 8006544:	40023800 	.word	0x40023800
 8006548:	40020800 	.word	0x40020800
 800654c:	40020000 	.word	0x40020000

08006550 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	; 0x38
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	609a      	str	r2, [r3, #8]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a7b      	ldr	r2, [pc, #492]	; (800675c <HAL_LTDC_MspInit+0x20c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	f040 80f0 	bne.w	8006754 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006574:	2300      	movs	r3, #0
 8006576:	623b      	str	r3, [r7, #32]
 8006578:	4b79      	ldr	r3, [pc, #484]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 800657a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657c:	4a78      	ldr	r2, [pc, #480]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 800657e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006582:	6453      	str	r3, [r2, #68]	; 0x44
 8006584:	4b76      	ldr	r3, [pc, #472]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	4b72      	ldr	r3, [pc, #456]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	4a71      	ldr	r2, [pc, #452]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 800659a:	f043 0320 	orr.w	r3, r3, #32
 800659e:	6313      	str	r3, [r2, #48]	; 0x30
 80065a0:	4b6f      	ldr	r3, [pc, #444]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	f003 0320 	and.w	r3, r3, #32
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ac:	2300      	movs	r3, #0
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	4b6b      	ldr	r3, [pc, #428]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	4a6a      	ldr	r2, [pc, #424]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065b6:	f043 0301 	orr.w	r3, r3, #1
 80065ba:	6313      	str	r3, [r2, #48]	; 0x30
 80065bc:	4b68      	ldr	r3, [pc, #416]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	4b64      	ldr	r3, [pc, #400]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	4a63      	ldr	r2, [pc, #396]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065d2:	f043 0302 	orr.w	r3, r3, #2
 80065d6:	6313      	str	r3, [r2, #48]	; 0x30
 80065d8:	4b61      	ldr	r3, [pc, #388]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	4b5d      	ldr	r3, [pc, #372]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	4a5c      	ldr	r2, [pc, #368]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f2:	6313      	str	r3, [r2, #48]	; 0x30
 80065f4:	4b5a      	ldr	r3, [pc, #360]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	4b56      	ldr	r3, [pc, #344]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	4a55      	ldr	r2, [pc, #340]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 800660a:	f043 0304 	orr.w	r3, r3, #4
 800660e:	6313      	str	r3, [r2, #48]	; 0x30
 8006610:	4b53      	ldr	r3, [pc, #332]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 8006612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800661c:	2300      	movs	r3, #0
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	4b4f      	ldr	r3, [pc, #316]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	4a4e      	ldr	r2, [pc, #312]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 8006626:	f043 0308 	orr.w	r3, r3, #8
 800662a:	6313      	str	r3, [r2, #48]	; 0x30
 800662c:	4b4c      	ldr	r3, [pc, #304]	; (8006760 <HAL_LTDC_MspInit+0x210>)
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8006638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800663e:	2302      	movs	r3, #2
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006642:	2300      	movs	r3, #0
 8006644:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006646:	2300      	movs	r3, #0
 8006648:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800664a:	230e      	movs	r3, #14
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800664e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006652:	4619      	mov	r1, r3
 8006654:	4843      	ldr	r0, [pc, #268]	; (8006764 <HAL_LTDC_MspInit+0x214>)
 8006656:	f002 ff49 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800665a:	f641 0358 	movw	r3, #6232	; 0x1858
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006660:	2302      	movs	r3, #2
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006664:	2300      	movs	r3, #0
 8006666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006668:	2300      	movs	r3, #0
 800666a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800666c:	230e      	movs	r3, #14
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006674:	4619      	mov	r1, r3
 8006676:	483c      	ldr	r0, [pc, #240]	; (8006768 <HAL_LTDC_MspInit+0x218>)
 8006678:	f002 ff38 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800667c:	2303      	movs	r3, #3
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006680:	2302      	movs	r3, #2
 8006682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006684:	2300      	movs	r3, #0
 8006686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006688:	2300      	movs	r3, #0
 800668a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800668c:	2309      	movs	r3, #9
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006694:	4619      	mov	r1, r3
 8006696:	4835      	ldr	r0, [pc, #212]	; (800676c <HAL_LTDC_MspInit+0x21c>)
 8006698:	f002 ff28 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800669c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a2:	2302      	movs	r3, #2
 80066a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066aa:	2300      	movs	r3, #0
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80066ae:	230e      	movs	r3, #14
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b6:	4619      	mov	r1, r3
 80066b8:	482c      	ldr	r0, [pc, #176]	; (800676c <HAL_LTDC_MspInit+0x21c>)
 80066ba:	f002 ff17 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80066be:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c4:	2302      	movs	r3, #2
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066cc:	2300      	movs	r3, #0
 80066ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80066d0:	230e      	movs	r3, #14
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80066d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d8:	4619      	mov	r1, r3
 80066da:	4825      	ldr	r0, [pc, #148]	; (8006770 <HAL_LTDC_MspInit+0x220>)
 80066dc:	f002 ff06 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80066e0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e6:	2302      	movs	r3, #2
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ea:	2300      	movs	r3, #0
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ee:	2300      	movs	r3, #0
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80066f2:	230e      	movs	r3, #14
 80066f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066fa:	4619      	mov	r1, r3
 80066fc:	481d      	ldr	r0, [pc, #116]	; (8006774 <HAL_LTDC_MspInit+0x224>)
 80066fe:	f002 fef5 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8006702:	2348      	movs	r3, #72	; 0x48
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006706:	2302      	movs	r3, #2
 8006708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670a:	2300      	movs	r3, #0
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800670e:	2300      	movs	r3, #0
 8006710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006712:	230e      	movs	r3, #14
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671a:	4619      	mov	r1, r3
 800671c:	4816      	ldr	r0, [pc, #88]	; (8006778 <HAL_LTDC_MspInit+0x228>)
 800671e:	f002 fee5 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8006722:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006728:	2302      	movs	r3, #2
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672c:	2300      	movs	r3, #0
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006730:	2300      	movs	r3, #0
 8006732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006734:	2309      	movs	r3, #9
 8006736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673c:	4619      	mov	r1, r3
 800673e:	480c      	ldr	r0, [pc, #48]	; (8006770 <HAL_LTDC_MspInit+0x220>)
 8006740:	f002 fed4 	bl	80094ec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8006744:	2200      	movs	r2, #0
 8006746:	2105      	movs	r1, #5
 8006748:	2058      	movs	r0, #88	; 0x58
 800674a:	f002 f931 	bl	80089b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800674e:	2058      	movs	r0, #88	; 0x58
 8006750:	f002 f94a 	bl	80089e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8006754:	bf00      	nop
 8006756:	3738      	adds	r7, #56	; 0x38
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40016800 	.word	0x40016800
 8006760:	40023800 	.word	0x40023800
 8006764:	40021400 	.word	0x40021400
 8006768:	40020000 	.word	0x40020000
 800676c:	40020400 	.word	0x40020400
 8006770:	40021800 	.word	0x40021800
 8006774:	40020800 	.word	0x40020800
 8006778:	40020c00 	.word	0x40020c00

0800677c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006780:	f001 fffa 	bl	8008778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006784:	f000 f828 	bl	80067d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006788:	f7ff fd28 	bl	80061dc <MX_GPIO_Init>
  MX_CRC_Init();
 800678c:	f7ff fc2c 	bl	8005fe8 <MX_CRC_Init>
  //MX_DMA2D_Init();
  //MX_FMC_Init();
  MX_I2C3_Init();
 8006790:	f7ff fe34 	bl	80063fc <MX_I2C3_Init>
  //MX_LTDC_Init();
  MX_SPI5_Init();
 8006794:	f000 f8e2 	bl	800695c <MX_SPI5_Init>
  MX_TIM1_Init();
 8006798:	f000 fa64 	bl	8006c64 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800679c:	f000 fad4 	bl	8006d48 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80067a0:	f000 fb44 	bl	8006e2c <MX_USB_OTG_HS_HCD_Init>
  MX_X_CUBE_AI_Init();
 80067a4:	f008 fb02 	bl	800edac <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  LCD_Config();
 80067a8:	f000 f898 	bl	80068dc <LCD_Config>
  BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"STM32 AI Hello World");
 80067ac:	4907      	ldr	r1, [pc, #28]	; (80067cc <main+0x50>)
 80067ae:	2001      	movs	r0, #1
 80067b0:	f001 f9da 	bl	8007b68 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(17,(uint8_t*)"Blogna Kang U-2 Man");
 80067b4:	4906      	ldr	r1, [pc, #24]	; (80067d0 <main+0x54>)
 80067b6:	2011      	movs	r0, #17
 80067b8:	f001 f9d6 	bl	8007b68 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(18,(uint8_t*)"www.karedox.com");
 80067bc:	4905      	ldr	r1, [pc, #20]	; (80067d4 <main+0x58>)
 80067be:	2012      	movs	r0, #18
 80067c0:	f001 f9d2 	bl	8007b68 <BSP_LCD_DisplayStringAtLine>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80067c4:	f008 fafc 	bl	800edc0 <MX_X_CUBE_AI_Process>
 80067c8:	e7fc      	b.n	80067c4 <main+0x48>
 80067ca:	bf00      	nop
 80067cc:	080127fc 	.word	0x080127fc
 80067d0:	08012814 	.word	0x08012814
 80067d4:	08012828 	.word	0x08012828

080067d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b0a0      	sub	sp, #128	; 0x80
 80067dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80067e2:	2230      	movs	r2, #48	; 0x30
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f008 fd96 	bl	800f318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	605a      	str	r2, [r3, #4]
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80067fc:	f107 030c 	add.w	r3, r7, #12
 8006800:	2230      	movs	r2, #48	; 0x30
 8006802:	2100      	movs	r1, #0
 8006804:	4618      	mov	r0, r3
 8006806:	f008 fd87 	bl	800f318 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	4b31      	ldr	r3, [pc, #196]	; (80068d4 <SystemClock_Config+0xfc>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	4a30      	ldr	r2, [pc, #192]	; (80068d4 <SystemClock_Config+0xfc>)
 8006814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006818:	6413      	str	r3, [r2, #64]	; 0x40
 800681a:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <SystemClock_Config+0xfc>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006822:	60bb      	str	r3, [r7, #8]
 8006824:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006826:	2300      	movs	r3, #0
 8006828:	607b      	str	r3, [r7, #4]
 800682a:	4b2b      	ldr	r3, [pc, #172]	; (80068d8 <SystemClock_Config+0x100>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <SystemClock_Config+0x100>)
 8006830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4b28      	ldr	r3, [pc, #160]	; (80068d8 <SystemClock_Config+0x100>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800683e:	607b      	str	r3, [r7, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006842:	2301      	movs	r3, #1
 8006844:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800684a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800684c:	2302      	movs	r3, #2
 800684e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006850:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006854:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006856:	2304      	movs	r3, #4
 8006858:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 800685a:	23a8      	movs	r3, #168	; 0xa8
 800685c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800685e:	2302      	movs	r3, #2
 8006860:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006862:	2307      	movs	r3, #7
 8006864:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006866:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800686a:	4618      	mov	r0, r3
 800686c:	f005 f8f8 	bl	800ba60 <HAL_RCC_OscConfig>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8006876:	f000 f869 	bl	800694c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800687a:	230f      	movs	r3, #15
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800687e:	2302      	movs	r3, #2
 8006880:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006882:	2300      	movs	r3, #0
 8006884:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800688a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800688c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006890:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006892:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006896:	2105      	movs	r1, #5
 8006898:	4618      	mov	r0, r3
 800689a:	f005 fb51 	bl	800bf40 <HAL_RCC_ClockConfig>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80068a4:	f000 f852 	bl	800694c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80068a8:	2308      	movs	r3, #8
 80068aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80068ac:	2332      	movs	r3, #50	; 0x32
 80068ae:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80068b0:	2302      	movs	r3, #2
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80068b4:	2300      	movs	r3, #0
 80068b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068b8:	f107 030c 	add.w	r3, r7, #12
 80068bc:	4618      	mov	r0, r3
 80068be:	f005 fd63 	bl	800c388 <HAL_RCCEx_PeriphCLKConfig>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80068c8:	f000 f840 	bl	800694c <Error_Handler>
  }
}
 80068cc:	bf00      	nop
 80068ce:	3780      	adds	r7, #128	; 0x80
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	40023800 	.word	0x40023800
 80068d8:	40007000 	.word	0x40007000

080068dc <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* Initialize the LCD */
  BSP_LCD_Init();
 80068e0:	f000 feb2 	bl	8007648 <BSP_LCD_Init>

  /* Background Layer Initialization */
  BSP_LCD_LayerDefaultInit(0, LCD_BUFFER);
 80068e4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80068e8:	2000      	movs	r0, #0
 80068ea:	f000 ff2f 	bl	800774c <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 80068ee:	2000      	movs	r0, #0
 80068f0:	f000 ff90 	bl	8007814 <BSP_LCD_SelectLayer>

  /* Enable the LCD */
  BSP_LCD_DisplayOn();
 80068f4:	f001 fb78 	bl	8007fe8 <BSP_LCD_DisplayOn>

  /* Set the layer window */
  //BSP_LCD_SetLayerWindow(0, 0, 0, IMAGE_WIDTH, IMAGE_HEIGHT);

  /* Clear the LCD Background layer */
  BSP_LCD_SetTransparency(0,255);
 80068f8:	21ff      	movs	r1, #255	; 0xff
 80068fa:	2000      	movs	r0, #0
 80068fc:	f000 ff9a 	bl	8007834 <BSP_LCD_SetTransparency>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8006900:	4807      	ldr	r0, [pc, #28]	; (8006920 <LCD_Config+0x44>)
 8006902:	f001 f80b 	bl	800791c <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8006906:	4807      	ldr	r0, [pc, #28]	; (8006924 <LCD_Config+0x48>)
 8006908:	f000 ffd8 	bl	80078bc <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800690c:	f04f 30ff 	mov.w	r0, #4294967295
 8006910:	f000 ffa2 	bl	8007858 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8006914:	4802      	ldr	r0, [pc, #8]	; (8006920 <LCD_Config+0x44>)
 8006916:	f000 ffb7 	bl	8007888 <BSP_LCD_SetBackColor>


}
 800691a:	bf00      	nop
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	ff0000ff 	.word	0xff0000ff
 8006924:	2000004c 	.word	0x2000004c

08006928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d101      	bne.n	800693e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800693a:	f001 ff3f 	bl	80087bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	40001000 	.word	0x40001000

0800694c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006950:	bf00      	nop
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8006960:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006962:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <MX_SPI5_Init+0x68>)
 8006964:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8006966:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006968:	f44f 7282 	mov.w	r2, #260	; 0x104
 800696c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800696e:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006970:	2200      	movs	r2, #0
 8006972:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8006974:	4b12      	ldr	r3, [pc, #72]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006976:	2200      	movs	r2, #0
 8006978:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800697a:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <MX_SPI5_Init+0x64>)
 800697c:	2200      	movs	r2, #0
 800697e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006980:	4b0f      	ldr	r3, [pc, #60]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006982:	2200      	movs	r2, #0
 8006984:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8006986:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006990:	2218      	movs	r2, #24
 8006992:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006994:	4b0a      	ldr	r3, [pc, #40]	; (80069c0 <MX_SPI5_Init+0x64>)
 8006996:	2200      	movs	r2, #0
 8006998:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <MX_SPI5_Init+0x64>)
 800699c:	2200      	movs	r2, #0
 800699e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069a0:	4b07      	ldr	r3, [pc, #28]	; (80069c0 <MX_SPI5_Init+0x64>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80069a6:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <MX_SPI5_Init+0x64>)
 80069a8:	220a      	movs	r2, #10
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80069ac:	4804      	ldr	r0, [pc, #16]	; (80069c0 <MX_SPI5_Init+0x64>)
 80069ae:	f005 ff28 	bl	800c802 <HAL_SPI_Init>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80069b8:	f7ff ffc8 	bl	800694c <Error_Handler>
  }

}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20000ae4 	.word	0x20000ae4
 80069c4:	40015000 	.word	0x40015000

080069c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069d0:	f107 0314 	add.w	r3, r7, #20
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	605a      	str	r2, [r3, #4]
 80069da:	609a      	str	r2, [r3, #8]
 80069dc:	60da      	str	r2, [r3, #12]
 80069de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a19      	ldr	r2, [pc, #100]	; (8006a4c <HAL_SPI_MspInit+0x84>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d12c      	bne.n	8006a44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	4b18      	ldr	r3, [pc, #96]	; (8006a50 <HAL_SPI_MspInit+0x88>)
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <HAL_SPI_MspInit+0x88>)
 80069f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f8:	6453      	str	r3, [r2, #68]	; 0x44
 80069fa:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <HAL_SPI_MspInit+0x88>)
 80069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <HAL_SPI_MspInit+0x88>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	4a10      	ldr	r2, [pc, #64]	; (8006a50 <HAL_SPI_MspInit+0x88>)
 8006a10:	f043 0320 	orr.w	r3, r3, #32
 8006a14:	6313      	str	r3, [r2, #48]	; 0x30
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <HAL_SPI_MspInit+0x88>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8006a22:	f44f 7360 	mov.w	r3, #896	; 0x380
 8006a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a30:	2300      	movs	r3, #0
 8006a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006a34:	2305      	movs	r3, #5
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a38:	f107 0314 	add.w	r3, r7, #20
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4805      	ldr	r0, [pc, #20]	; (8006a54 <HAL_SPI_MspInit+0x8c>)
 8006a40:	f002 fd54 	bl	80094ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8006a44:	bf00      	nop
 8006a46:	3728      	adds	r7, #40	; 0x28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40015000 	.word	0x40015000
 8006a50:	40023800 	.word	0x40023800
 8006a54:	40021400 	.word	0x40021400

08006a58 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <HAL_SPI_MspDeInit+0x30>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d10a      	bne.n	8006a80 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8006a6a:	4b08      	ldr	r3, [pc, #32]	; (8006a8c <HAL_SPI_MspDeInit+0x34>)
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	4a07      	ldr	r2, [pc, #28]	; (8006a8c <HAL_SPI_MspDeInit+0x34>)
 8006a70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a74:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8006a76:	f44f 7160 	mov.w	r1, #896	; 0x380
 8006a7a:	4805      	ldr	r0, [pc, #20]	; (8006a90 <HAL_SPI_MspDeInit+0x38>)
 8006a7c:	f002 fee0 	bl	8009840 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40015000 	.word	0x40015000
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	40021400 	.word	0x40021400

08006a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	607b      	str	r3, [r7, #4]
 8006a9e:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <HAL_MspInit+0x4c>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	4a0f      	ldr	r2, [pc, #60]	; (8006ae0 <HAL_MspInit+0x4c>)
 8006aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <HAL_MspInit+0x4c>)
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <HAL_MspInit+0x4c>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <HAL_MspInit+0x4c>)
 8006ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <HAL_MspInit+0x4c>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40023800 	.word	0x40023800

08006ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08c      	sub	sp, #48	; 0x30
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8006af4:	2200      	movs	r2, #0
 8006af6:	6879      	ldr	r1, [r7, #4]
 8006af8:	2036      	movs	r0, #54	; 0x36
 8006afa:	f001 ff59 	bl	80089b0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8006afe:	2036      	movs	r0, #54	; 0x36
 8006b00:	f001 ff72 	bl	80089e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	4b1f      	ldr	r3, [pc, #124]	; (8006b88 <HAL_InitTick+0xa4>)
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <HAL_InitTick+0xa4>)
 8006b0e:	f043 0310 	orr.w	r3, r3, #16
 8006b12:	6413      	str	r3, [r2, #64]	; 0x40
 8006b14:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <HAL_InitTick+0xa4>)
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	f003 0310 	and.w	r3, r3, #16
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006b20:	f107 0210 	add.w	r2, r7, #16
 8006b24:	f107 0314 	add.w	r3, r7, #20
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f005 fbfa 	bl	800c324 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006b30:	f005 fbd0 	bl	800c2d4 <HAL_RCC_GetPCLK1Freq>
 8006b34:	4603      	mov	r3, r0
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	4a13      	ldr	r2, [pc, #76]	; (8006b8c <HAL_InitTick+0xa8>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	0c9b      	lsrs	r3, r3, #18
 8006b44:	3b01      	subs	r3, #1
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006b48:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_InitTick+0xac>)
 8006b4a:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <HAL_InitTick+0xb0>)
 8006b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8006b4e:	4b10      	ldr	r3, [pc, #64]	; (8006b90 <HAL_InitTick+0xac>)
 8006b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006b54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006b56:	4a0e      	ldr	r2, [pc, #56]	; (8006b90 <HAL_InitTick+0xac>)
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <HAL_InitTick+0xac>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b62:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <HAL_InitTick+0xac>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006b68:	4809      	ldr	r0, [pc, #36]	; (8006b90 <HAL_InitTick+0xac>)
 8006b6a:	f006 fbd5 	bl	800d318 <HAL_TIM_Base_Init>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d104      	bne.n	8006b7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006b74:	4806      	ldr	r0, [pc, #24]	; (8006b90 <HAL_InitTick+0xac>)
 8006b76:	f006 fbfa 	bl	800d36e <HAL_TIM_Base_Start_IT>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	e000      	b.n	8006b80 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3730      	adds	r7, #48	; 0x30
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	431bde83 	.word	0x431bde83
 8006b90:	20000b3c 	.word	0x20000b3c
 8006b94:	40001000 	.word	0x40001000

08006b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006baa:	e7fe      	b.n	8006baa <HardFault_Handler+0x4>

08006bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bb0:	e7fe      	b.n	8006bb0 <MemManage_Handler+0x4>

08006bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bb6:	e7fe      	b.n	8006bb6 <BusFault_Handler+0x4>

08006bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006bbc:	e7fe      	b.n	8006bbc <UsageFault_Handler+0x4>

08006bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006bc2:	bf00      	nop
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006bd0:	bf00      	nop
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006bec:	4802      	ldr	r0, [pc, #8]	; (8006bf8 <TIM6_DAC_IRQHandler+0x10>)
 8006bee:	f006 fbe2 	bl	800d3b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006bf2:	bf00      	nop
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000b3c 	.word	0x20000b3c

08006bfc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8006c00:	4802      	ldr	r0, [pc, #8]	; (8006c0c <OTG_HS_IRQHandler+0x10>)
 8006c02:	f002 ffa2 	bl	8009b4a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8006c06:	bf00      	nop
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000bfc 	.word	0x20000bfc

08006c10 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006c14:	4802      	ldr	r0, [pc, #8]	; (8006c20 <LTDC_IRQHandler+0x10>)
 8006c16:	f004 fc2b 	bl	800b470 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006c1a:	bf00      	nop
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000a3c 	.word	0x20000a3c

08006c24 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8006c28:	4802      	ldr	r0, [pc, #8]	; (8006c34 <DMA2D_IRQHandler+0x10>)
 8006c2a:	f002 fa20 	bl	800906e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	200009a8 	.word	0x200009a8

08006c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <SystemInit+0x28>)
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c42:	4a07      	ldr	r2, [pc, #28]	; (8006c60 <SystemInit+0x28>)
 8006c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006c4c:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <SystemInit+0x28>)
 8006c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006c52:	609a      	str	r2, [r3, #8]
#endif
}
 8006c54:	bf00      	nop
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	e000ed00 	.word	0xe000ed00

08006c64 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c6a:	f107 0308 	add.w	r3, r7, #8
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	609a      	str	r2, [r3, #8]
 8006c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c78:	463b      	mov	r3, r7
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8006c80:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006c82:	4a1f      	ldr	r2, [pc, #124]	; (8006d00 <MX_TIM1_Init+0x9c>)
 8006c84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006c86:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c98:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006c9e:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ca4:	4b15      	ldr	r3, [pc, #84]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006caa:	4814      	ldr	r0, [pc, #80]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006cac:	f006 fb34 	bl	800d318 <HAL_TIM_Base_Init>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8006cb6:	f7ff fe49 	bl	800694c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006cc0:	f107 0308 	add.w	r3, r7, #8
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	480d      	ldr	r0, [pc, #52]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006cc8:	f006 fc7d 	bl	800d5c6 <HAL_TIM_ConfigClockSource>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8006cd2:	f7ff fe3b 	bl	800694c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006cde:	463b      	mov	r3, r7
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4806      	ldr	r0, [pc, #24]	; (8006cfc <MX_TIM1_Init+0x98>)
 8006ce4:	f006 fe88 	bl	800d9f8 <HAL_TIMEx_MasterConfigSynchronization>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8006cee:	f7ff fe2d 	bl	800694c <Error_Handler>
  }

}
 8006cf2:	bf00      	nop
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000b7c 	.word	0x20000b7c
 8006d00:	40010000 	.word	0x40010000

08006d04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a0b      	ldr	r2, [pc, #44]	; (8006d40 <HAL_TIM_Base_MspInit+0x3c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d10d      	bne.n	8006d32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <HAL_TIM_Base_MspInit+0x40>)
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	4a09      	ldr	r2, [pc, #36]	; (8006d44 <HAL_TIM_Base_MspInit+0x40>)
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	6453      	str	r3, [r2, #68]	; 0x44
 8006d26:	4b07      	ldr	r3, [pc, #28]	; (8006d44 <HAL_TIM_Base_MspInit+0x40>)
 8006d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006d32:	bf00      	nop
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40023800 	.word	0x40023800

08006d48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <MX_USART1_UART_Init+0x50>)
 8006d50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006d52:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d5a:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006d60:	4b0c      	ldr	r3, [pc, #48]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006d66:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d6e:	220c      	movs	r2, #12
 8006d70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d72:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006d7e:	4805      	ldr	r0, [pc, #20]	; (8006d94 <MX_USART1_UART_Init+0x4c>)
 8006d80:	f006 feca 	bl	800db18 <HAL_UART_Init>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006d8a:	f7ff fddf 	bl	800694c <Error_Handler>
  }

}
 8006d8e:	bf00      	nop
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000bbc 	.word	0x20000bbc
 8006d98:	40011000 	.word	0x40011000

08006d9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	605a      	str	r2, [r3, #4]
 8006dae:	609a      	str	r2, [r3, #8]
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a19      	ldr	r2, [pc, #100]	; (8006e20 <HAL_UART_MspInit+0x84>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d12c      	bne.n	8006e18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	4b18      	ldr	r3, [pc, #96]	; (8006e24 <HAL_UART_MspInit+0x88>)
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <HAL_UART_MspInit+0x88>)
 8006dc8:	f043 0310 	orr.w	r3, r3, #16
 8006dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8006dce:	4b15      	ldr	r3, [pc, #84]	; (8006e24 <HAL_UART_MspInit+0x88>)
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	4b11      	ldr	r3, [pc, #68]	; (8006e24 <HAL_UART_MspInit+0x88>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	4a10      	ldr	r2, [pc, #64]	; (8006e24 <HAL_UART_MspInit+0x88>)
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dea:	4b0e      	ldr	r3, [pc, #56]	; (8006e24 <HAL_UART_MspInit+0x88>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006df6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e04:	2303      	movs	r3, #3
 8006e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006e08:	2307      	movs	r3, #7
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e0c:	f107 0314 	add.w	r3, r7, #20
 8006e10:	4619      	mov	r1, r3
 8006e12:	4805      	ldr	r0, [pc, #20]	; (8006e28 <HAL_UART_MspInit+0x8c>)
 8006e14:	f002 fb6a 	bl	80094ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006e18:	bf00      	nop
 8006e1a:	3728      	adds	r7, #40	; 0x28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40011000 	.word	0x40011000
 8006e24:	40023800 	.word	0x40023800
 8006e28:	40020000 	.word	0x40020000

08006e2c <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e32:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8006e34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8006e36:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e38:	220c      	movs	r2, #12
 8006e3a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8006e42:	4b0e      	ldr	r3, [pc, #56]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8006e48:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8006e4e:	4b0b      	ldr	r3, [pc, #44]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8006e66:	4805      	ldr	r0, [pc, #20]	; (8006e7c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8006e68:	f002 fe0d 	bl	8009a86 <HAL_HCD_Init>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8006e72:	f7ff fd6b 	bl	800694c <Error_Handler>
  }

}
 8006e76:	bf00      	nop
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000bfc 	.word	0x20000bfc
 8006e80:	40040000 	.word	0x40040000

08006e84 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e8c:	f107 0314 	add.w	r3, r7, #20
 8006e90:	2200      	movs	r2, #0
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	605a      	str	r2, [r3, #4]
 8006e96:	609a      	str	r2, [r3, #8]
 8006e98:	60da      	str	r2, [r3, #12]
 8006e9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a24      	ldr	r2, [pc, #144]	; (8006f34 <HAL_HCD_MspInit+0xb0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d141      	bne.n	8006f2a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	4b23      	ldr	r3, [pc, #140]	; (8006f38 <HAL_HCD_MspInit+0xb4>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <HAL_HCD_MspInit+0xb4>)
 8006eb0:	f043 0302 	orr.w	r3, r3, #2
 8006eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb6:	4b20      	ldr	r3, [pc, #128]	; (8006f38 <HAL_HCD_MspInit+0xb4>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8006ec2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8006ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8006ed4:	230c      	movs	r3, #12
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed8:	f107 0314 	add.w	r3, r7, #20
 8006edc:	4619      	mov	r1, r3
 8006ede:	4817      	ldr	r0, [pc, #92]	; (8006f3c <HAL_HCD_MspInit+0xb8>)
 8006ee0:	f002 fb04 	bl	80094ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8006ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4810      	ldr	r0, [pc, #64]	; (8006f3c <HAL_HCD_MspInit+0xb8>)
 8006efa:	f002 faf7 	bl	80094ec <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <HAL_HCD_MspInit+0xb4>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <HAL_HCD_MspInit+0xb4>)
 8006f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <HAL_HCD_MspInit+0xb4>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	204d      	movs	r0, #77	; 0x4d
 8006f20:	f001 fd46 	bl	80089b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8006f24:	204d      	movs	r0, #77	; 0x4d
 8006f26:	f001 fd5f 	bl	80089e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8006f2a:	bf00      	nop
 8006f2c:	3728      	adds	r7, #40	; 0x28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	40040000 	.word	0x40040000
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	40020400 	.word	0x40020400

08006f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f78 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006f44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006f46:	e003      	b.n	8006f50 <LoopCopyDataInit>

08006f48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006f48:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006f4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006f4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006f4e:	3104      	adds	r1, #4

08006f50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006f50:	480b      	ldr	r0, [pc, #44]	; (8006f80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006f52:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006f54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006f56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006f58:	d3f6      	bcc.n	8006f48 <CopyDataInit>
  ldr  r2, =_sbss
 8006f5a:	4a0b      	ldr	r2, [pc, #44]	; (8006f88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006f5c:	e002      	b.n	8006f64 <LoopFillZerobss>

08006f5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006f5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006f60:	f842 3b04 	str.w	r3, [r2], #4

08006f64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006f64:	4b09      	ldr	r3, [pc, #36]	; (8006f8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006f66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006f68:	d3f9      	bcc.n	8006f5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006f6a:	f7ff fe65 	bl	8006c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f6e:	f008 f995 	bl	800f29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f72:	f7ff fc03 	bl	800677c <main>
  bx  lr    
 8006f76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006f78:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006f7c:	08015934 	.word	0x08015934
  ldr  r0, =_sdata
 8006f80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006f84:	200006c4 	.word	0x200006c4
  ldr  r2, =_sbss
 8006f88:	200006c4 	.word	0x200006c4
  ldr  r3, = _ebss
 8006f8c:	20000f70 	.word	0x20000f70

08006f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006f90:	e7fe      	b.n	8006f90 <ADC_IRQHandler>

08006f92 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8006f96:	f000 fa5d 	bl	8007454 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8006f9a:	20ca      	movs	r0, #202	; 0xca
 8006f9c:	f000 f95d 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8006fa0:	20c3      	movs	r0, #195	; 0xc3
 8006fa2:	f000 f967 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8006fa6:	2008      	movs	r0, #8
 8006fa8:	f000 f964 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8006fac:	2050      	movs	r0, #80	; 0x50
 8006fae:	f000 f961 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8006fb2:	20cf      	movs	r0, #207	; 0xcf
 8006fb4:	f000 f951 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f000 f95b 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8006fbe:	20c1      	movs	r0, #193	; 0xc1
 8006fc0:	f000 f958 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8006fc4:	2030      	movs	r0, #48	; 0x30
 8006fc6:	f000 f955 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8006fca:	20ed      	movs	r0, #237	; 0xed
 8006fcc:	f000 f945 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8006fd0:	2064      	movs	r0, #100	; 0x64
 8006fd2:	f000 f94f 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8006fd6:	2003      	movs	r0, #3
 8006fd8:	f000 f94c 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8006fdc:	2012      	movs	r0, #18
 8006fde:	f000 f949 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8006fe2:	2081      	movs	r0, #129	; 0x81
 8006fe4:	f000 f946 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8006fe8:	20e8      	movs	r0, #232	; 0xe8
 8006fea:	f000 f936 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8006fee:	2085      	movs	r0, #133	; 0x85
 8006ff0:	f000 f940 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f000 f93d 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8006ffa:	2078      	movs	r0, #120	; 0x78
 8006ffc:	f000 f93a 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8007000:	20cb      	movs	r0, #203	; 0xcb
 8007002:	f000 f92a 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8007006:	2039      	movs	r0, #57	; 0x39
 8007008:	f000 f934 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800700c:	202c      	movs	r0, #44	; 0x2c
 800700e:	f000 f931 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007012:	2000      	movs	r0, #0
 8007014:	f000 f92e 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8007018:	2034      	movs	r0, #52	; 0x34
 800701a:	f000 f92b 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800701e:	2002      	movs	r0, #2
 8007020:	f000 f928 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8007024:	20f7      	movs	r0, #247	; 0xf7
 8007026:	f000 f918 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800702a:	2020      	movs	r0, #32
 800702c:	f000 f922 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8007030:	20ea      	movs	r0, #234	; 0xea
 8007032:	f000 f912 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007036:	2000      	movs	r0, #0
 8007038:	f000 f91c 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800703c:	2000      	movs	r0, #0
 800703e:	f000 f919 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8007042:	20b1      	movs	r0, #177	; 0xb1
 8007044:	f000 f909 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007048:	2000      	movs	r0, #0
 800704a:	f000 f913 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800704e:	201b      	movs	r0, #27
 8007050:	f000 f910 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8007054:	20b6      	movs	r0, #182	; 0xb6
 8007056:	f000 f900 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800705a:	200a      	movs	r0, #10
 800705c:	f000 f90a 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8007060:	20a2      	movs	r0, #162	; 0xa2
 8007062:	f000 f907 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8007066:	20c0      	movs	r0, #192	; 0xc0
 8007068:	f000 f8f7 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800706c:	2010      	movs	r0, #16
 800706e:	f000 f901 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8007072:	20c1      	movs	r0, #193	; 0xc1
 8007074:	f000 f8f1 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8007078:	2010      	movs	r0, #16
 800707a:	f000 f8fb 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800707e:	20c5      	movs	r0, #197	; 0xc5
 8007080:	f000 f8eb 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8007084:	2045      	movs	r0, #69	; 0x45
 8007086:	f000 f8f5 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800708a:	2015      	movs	r0, #21
 800708c:	f000 f8f2 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8007090:	20c7      	movs	r0, #199	; 0xc7
 8007092:	f000 f8e2 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8007096:	2090      	movs	r0, #144	; 0x90
 8007098:	f000 f8ec 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800709c:	2036      	movs	r0, #54	; 0x36
 800709e:	f000 f8dc 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80070a2:	20c8      	movs	r0, #200	; 0xc8
 80070a4:	f000 f8e6 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80070a8:	20f2      	movs	r0, #242	; 0xf2
 80070aa:	f000 f8d6 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80070ae:	2000      	movs	r0, #0
 80070b0:	f000 f8e0 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80070b4:	20b0      	movs	r0, #176	; 0xb0
 80070b6:	f000 f8d0 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80070ba:	20c2      	movs	r0, #194	; 0xc2
 80070bc:	f000 f8da 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80070c0:	20b6      	movs	r0, #182	; 0xb6
 80070c2:	f000 f8ca 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80070c6:	200a      	movs	r0, #10
 80070c8:	f000 f8d4 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80070cc:	20a7      	movs	r0, #167	; 0xa7
 80070ce:	f000 f8d1 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80070d2:	2027      	movs	r0, #39	; 0x27
 80070d4:	f000 f8ce 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80070d8:	2004      	movs	r0, #4
 80070da:	f000 f8cb 	bl	8007274 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80070de:	202a      	movs	r0, #42	; 0x2a
 80070e0:	f000 f8bb 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80070e4:	2000      	movs	r0, #0
 80070e6:	f000 f8c5 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80070ea:	2000      	movs	r0, #0
 80070ec:	f000 f8c2 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80070f0:	2000      	movs	r0, #0
 80070f2:	f000 f8bf 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80070f6:	20ef      	movs	r0, #239	; 0xef
 80070f8:	f000 f8bc 	bl	8007274 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80070fc:	202b      	movs	r0, #43	; 0x2b
 80070fe:	f000 f8ac 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8007102:	2000      	movs	r0, #0
 8007104:	f000 f8b6 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007108:	2000      	movs	r0, #0
 800710a:	f000 f8b3 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800710e:	2001      	movs	r0, #1
 8007110:	f000 f8b0 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8007114:	203f      	movs	r0, #63	; 0x3f
 8007116:	f000 f8ad 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800711a:	20f6      	movs	r0, #246	; 0xf6
 800711c:	f000 f89d 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8007120:	2001      	movs	r0, #1
 8007122:	f000 f8a7 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8007126:	2000      	movs	r0, #0
 8007128:	f000 f8a4 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800712c:	2006      	movs	r0, #6
 800712e:	f000 f8a1 	bl	8007274 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8007132:	202c      	movs	r0, #44	; 0x2c
 8007134:	f000 f891 	bl	800725a <ili9341_WriteReg>
  LCD_Delay(200);
 8007138:	20c8      	movs	r0, #200	; 0xc8
 800713a:	f000 fa79 	bl	8007630 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800713e:	2026      	movs	r0, #38	; 0x26
 8007140:	f000 f88b 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8007144:	2001      	movs	r0, #1
 8007146:	f000 f895 	bl	8007274 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800714a:	20e0      	movs	r0, #224	; 0xe0
 800714c:	f000 f885 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8007150:	200f      	movs	r0, #15
 8007152:	f000 f88f 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8007156:	2029      	movs	r0, #41	; 0x29
 8007158:	f000 f88c 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800715c:	2024      	movs	r0, #36	; 0x24
 800715e:	f000 f889 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8007162:	200c      	movs	r0, #12
 8007164:	f000 f886 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8007168:	200e      	movs	r0, #14
 800716a:	f000 f883 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800716e:	2009      	movs	r0, #9
 8007170:	f000 f880 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8007174:	204e      	movs	r0, #78	; 0x4e
 8007176:	f000 f87d 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800717a:	2078      	movs	r0, #120	; 0x78
 800717c:	f000 f87a 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8007180:	203c      	movs	r0, #60	; 0x3c
 8007182:	f000 f877 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8007186:	2009      	movs	r0, #9
 8007188:	f000 f874 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800718c:	2013      	movs	r0, #19
 800718e:	f000 f871 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8007192:	2005      	movs	r0, #5
 8007194:	f000 f86e 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8007198:	2017      	movs	r0, #23
 800719a:	f000 f86b 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800719e:	2011      	movs	r0, #17
 80071a0:	f000 f868 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80071a4:	2000      	movs	r0, #0
 80071a6:	f000 f865 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80071aa:	20e1      	movs	r0, #225	; 0xe1
 80071ac:	f000 f855 	bl	800725a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80071b0:	2000      	movs	r0, #0
 80071b2:	f000 f85f 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80071b6:	2016      	movs	r0, #22
 80071b8:	f000 f85c 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80071bc:	201b      	movs	r0, #27
 80071be:	f000 f859 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80071c2:	2004      	movs	r0, #4
 80071c4:	f000 f856 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80071c8:	2011      	movs	r0, #17
 80071ca:	f000 f853 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80071ce:	2007      	movs	r0, #7
 80071d0:	f000 f850 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80071d4:	2031      	movs	r0, #49	; 0x31
 80071d6:	f000 f84d 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80071da:	2033      	movs	r0, #51	; 0x33
 80071dc:	f000 f84a 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80071e0:	2042      	movs	r0, #66	; 0x42
 80071e2:	f000 f847 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80071e6:	2005      	movs	r0, #5
 80071e8:	f000 f844 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80071ec:	200c      	movs	r0, #12
 80071ee:	f000 f841 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80071f2:	200a      	movs	r0, #10
 80071f4:	f000 f83e 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80071f8:	2028      	movs	r0, #40	; 0x28
 80071fa:	f000 f83b 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80071fe:	202f      	movs	r0, #47	; 0x2f
 8007200:	f000 f838 	bl	8007274 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8007204:	200f      	movs	r0, #15
 8007206:	f000 f835 	bl	8007274 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800720a:	2011      	movs	r0, #17
 800720c:	f000 f825 	bl	800725a <ili9341_WriteReg>
  LCD_Delay(200);
 8007210:	20c8      	movs	r0, #200	; 0xc8
 8007212:	f000 fa0d 	bl	8007630 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007216:	2029      	movs	r0, #41	; 0x29
 8007218:	f000 f81f 	bl	800725a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800721c:	202c      	movs	r0, #44	; 0x2c
 800721e:	f000 f81c 	bl	800725a <ili9341_WriteReg>
}
 8007222:	bf00      	nop
 8007224:	bd80      	pop	{r7, pc}

08007226 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800722a:	f000 f913 	bl	8007454 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800722e:	2103      	movs	r1, #3
 8007230:	20d3      	movs	r0, #211	; 0xd3
 8007232:	f000 f82c 	bl	800728e <ili9341_ReadData>
 8007236:	4603      	mov	r3, r0
 8007238:	b29b      	uxth	r3, r3
}
 800723a:	4618      	mov	r0, r3
 800723c:	bd80      	pop	{r7, pc}

0800723e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8007242:	2029      	movs	r0, #41	; 0x29
 8007244:	f000 f809 	bl	800725a <ili9341_WriteReg>
}
 8007248:	bf00      	nop
 800724a:	bd80      	pop	{r7, pc}

0800724c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8007250:	2028      	movs	r0, #40	; 0x28
 8007252:	f000 f802 	bl	800725a <ili9341_WriteReg>
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}

0800725a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b082      	sub	sp, #8
 800725e:	af00      	add	r7, sp, #0
 8007260:	4603      	mov	r3, r0
 8007262:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f98e 	bl	8007588 <LCD_IO_WriteReg>
}
 800726c:	bf00      	nop
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f95f 	bl	8007544 <LCD_IO_WriteData>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	4603      	mov	r3, r0
 8007296:	460a      	mov	r2, r1
 8007298:	80fb      	strh	r3, [r7, #6]
 800729a:	4613      	mov	r3, r2
 800729c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800729e:	797a      	ldrb	r2, [r7, #5]
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	4611      	mov	r1, r2
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f991 	bl	80075cc <LCD_IO_ReadData>
 80072aa:	4603      	mov	r3, r0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80072b8:	23f0      	movs	r3, #240	; 0xf0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80072c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80072dc:	4819      	ldr	r0, [pc, #100]	; (8007344 <SPIx_Init+0x6c>)
 80072de:	f005 fefb 	bl	800d0d8 <HAL_SPI_GetState>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d12b      	bne.n	8007340 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80072e8:	4b16      	ldr	r3, [pc, #88]	; (8007344 <SPIx_Init+0x6c>)
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <SPIx_Init+0x70>)
 80072ec:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80072ee:	4b15      	ldr	r3, [pc, #84]	; (8007344 <SPIx_Init+0x6c>)
 80072f0:	2218      	movs	r2, #24
 80072f2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80072f4:	4b13      	ldr	r3, [pc, #76]	; (8007344 <SPIx_Init+0x6c>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80072fa:	4b12      	ldr	r3, [pc, #72]	; (8007344 <SPIx_Init+0x6c>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8007300:	4b10      	ldr	r3, [pc, #64]	; (8007344 <SPIx_Init+0x6c>)
 8007302:	2200      	movs	r2, #0
 8007304:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <SPIx_Init+0x6c>)
 8007308:	2200      	movs	r2, #0
 800730a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800730c:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <SPIx_Init+0x6c>)
 800730e:	2207      	movs	r2, #7
 8007310:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <SPIx_Init+0x6c>)
 8007314:	2200      	movs	r2, #0
 8007316:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8007318:	4b0a      	ldr	r3, [pc, #40]	; (8007344 <SPIx_Init+0x6c>)
 800731a:	2200      	movs	r2, #0
 800731c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <SPIx_Init+0x6c>)
 8007320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007324:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <SPIx_Init+0x6c>)
 8007328:	2200      	movs	r2, #0
 800732a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <SPIx_Init+0x6c>)
 800732e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007332:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8007334:	4803      	ldr	r0, [pc, #12]	; (8007344 <SPIx_Init+0x6c>)
 8007336:	f000 f853 	bl	80073e0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800733a:	4802      	ldr	r0, [pc, #8]	; (8007344 <SPIx_Init+0x6c>)
 800733c:	f005 fa61 	bl	800c802 <HAL_SPI_Init>
  }
}
 8007340:	bf00      	nop
 8007342:	bd80      	pop	{r7, pc}
 8007344:	200006e4 	.word	0x200006e4
 8007348:	40015000 	.word	0x40015000

0800734c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800735a:	79fb      	ldrb	r3, [r7, #7]
 800735c:	b29a      	uxth	r2, r3
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <SPIx_Read+0x38>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f107 0108 	add.w	r1, r7, #8
 8007366:	4808      	ldr	r0, [pc, #32]	; (8007388 <SPIx_Read+0x3c>)
 8007368:	f005 fc0b 	bl	800cb82 <HAL_SPI_Receive>
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8007376:	f000 f827 	bl	80073c8 <SPIx_Error>
  }
  
  return readvalue;
 800737a:	68bb      	ldr	r3, [r7, #8]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	2000003c 	.word	0x2000003c
 8007388:	200006e4 	.word	0x200006e4

0800738c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <SPIx_Write+0x34>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	1db9      	adds	r1, r7, #6
 80073a0:	2201      	movs	r2, #1
 80073a2:	4808      	ldr	r0, [pc, #32]	; (80073c4 <SPIx_Write+0x38>)
 80073a4:	f005 fab9 	bl	800c91a <HAL_SPI_Transmit>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80073b2:	f000 f809 	bl	80073c8 <SPIx_Error>
  }
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	2000003c 	.word	0x2000003c
 80073c4:	200006e4 	.word	0x200006e4

080073c8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80073cc:	4803      	ldr	r0, [pc, #12]	; (80073dc <SPIx_Error+0x14>)
 80073ce:	f005 fa7c 	bl	800c8ca <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80073d2:	f7ff ff81 	bl	80072d8 <SPIx_Init>
}
 80073d6:	bf00      	nop
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200006e4 	.word	0x200006e4

080073e0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80073e8:	2300      	movs	r3, #0
 80073ea:	613b      	str	r3, [r7, #16]
 80073ec:	4b17      	ldr	r3, [pc, #92]	; (800744c <SPIx_MspInit+0x6c>)
 80073ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f0:	4a16      	ldr	r2, [pc, #88]	; (800744c <SPIx_MspInit+0x6c>)
 80073f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f6:	6453      	str	r3, [r2, #68]	; 0x44
 80073f8:	4b14      	ldr	r3, [pc, #80]	; (800744c <SPIx_MspInit+0x6c>)
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <SPIx_MspInit+0x6c>)
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	4a0f      	ldr	r2, [pc, #60]	; (800744c <SPIx_MspInit+0x6c>)
 800740e:	f043 0320 	orr.w	r3, r3, #32
 8007412:	6313      	str	r3, [r2, #48]	; 0x30
 8007414:	4b0d      	ldr	r3, [pc, #52]	; (800744c <SPIx_MspInit+0x6c>)
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8007420:	f44f 7360 	mov.w	r3, #896	; 0x380
 8007424:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8007426:	2302      	movs	r3, #2
 8007428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800742a:	2302      	movs	r3, #2
 800742c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800742e:	2301      	movs	r3, #1
 8007430:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8007432:	2305      	movs	r3, #5
 8007434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8007436:	f107 0314 	add.w	r3, r7, #20
 800743a:	4619      	mov	r1, r3
 800743c:	4804      	ldr	r0, [pc, #16]	; (8007450 <SPIx_MspInit+0x70>)
 800743e:	f002 f855 	bl	80094ec <HAL_GPIO_Init>
}
 8007442:	bf00      	nop
 8007444:	3728      	adds	r7, #40	; 0x28
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40023800 	.word	0x40023800
 8007450:	40021400 	.word	0x40021400

08007454 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800745a:	4b36      	ldr	r3, [pc, #216]	; (8007534 <LCD_IO_Init+0xe0>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d164      	bne.n	800752c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8007462:	4b34      	ldr	r3, [pc, #208]	; (8007534 <LCD_IO_Init+0xe0>)
 8007464:	2201      	movs	r2, #1
 8007466:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8007468:	2300      	movs	r3, #0
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	4b32      	ldr	r3, [pc, #200]	; (8007538 <LCD_IO_Init+0xe4>)
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	4a31      	ldr	r2, [pc, #196]	; (8007538 <LCD_IO_Init+0xe4>)
 8007472:	f043 0308 	orr.w	r3, r3, #8
 8007476:	6313      	str	r3, [r2, #48]	; 0x30
 8007478:	4b2f      	ldr	r3, [pc, #188]	; (8007538 <LCD_IO_Init+0xe4>)
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	f003 0308 	and.w	r3, r3, #8
 8007480:	60bb      	str	r3, [r7, #8]
 8007482:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8007484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007488:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800748a:	2301      	movs	r3, #1
 800748c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8007492:	2302      	movs	r3, #2
 8007494:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8007496:	f107 030c 	add.w	r3, r7, #12
 800749a:	4619      	mov	r1, r3
 800749c:	4827      	ldr	r0, [pc, #156]	; (800753c <LCD_IO_Init+0xe8>)
 800749e:	f002 f825 	bl	80094ec <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
 80074a6:	4b24      	ldr	r3, [pc, #144]	; (8007538 <LCD_IO_Init+0xe4>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	4a23      	ldr	r2, [pc, #140]	; (8007538 <LCD_IO_Init+0xe4>)
 80074ac:	f043 0308 	orr.w	r3, r3, #8
 80074b0:	6313      	str	r3, [r2, #48]	; 0x30
 80074b2:	4b21      	ldr	r3, [pc, #132]	; (8007538 <LCD_IO_Init+0xe4>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	607b      	str	r3, [r7, #4]
 80074bc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80074be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80074c4:	2301      	movs	r3, #1
 80074c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80074cc:	2302      	movs	r3, #2
 80074ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80074d0:	f107 030c 	add.w	r3, r7, #12
 80074d4:	4619      	mov	r1, r3
 80074d6:	4819      	ldr	r0, [pc, #100]	; (800753c <LCD_IO_Init+0xe8>)
 80074d8:	f002 f808 	bl	80094ec <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80074dc:	2300      	movs	r3, #0
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	4b15      	ldr	r3, [pc, #84]	; (8007538 <LCD_IO_Init+0xe4>)
 80074e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e4:	4a14      	ldr	r2, [pc, #80]	; (8007538 <LCD_IO_Init+0xe4>)
 80074e6:	f043 0304 	orr.w	r3, r3, #4
 80074ea:	6313      	str	r3, [r2, #48]	; 0x30
 80074ec:	4b12      	ldr	r3, [pc, #72]	; (8007538 <LCD_IO_Init+0xe4>)
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	603b      	str	r3, [r7, #0]
 80074f6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80074f8:	2304      	movs	r3, #4
 80074fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80074fc:	2301      	movs	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8007500:	2300      	movs	r3, #0
 8007502:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8007504:	2302      	movs	r3, #2
 8007506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8007508:	f107 030c 	add.w	r3, r7, #12
 800750c:	4619      	mov	r1, r3
 800750e:	480c      	ldr	r0, [pc, #48]	; (8007540 <LCD_IO_Init+0xec>)
 8007510:	f001 ffec 	bl	80094ec <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8007514:	2200      	movs	r2, #0
 8007516:	2104      	movs	r1, #4
 8007518:	4809      	ldr	r0, [pc, #36]	; (8007540 <LCD_IO_Init+0xec>)
 800751a:	f002 fa9b 	bl	8009a54 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800751e:	2201      	movs	r2, #1
 8007520:	2104      	movs	r1, #4
 8007522:	4807      	ldr	r0, [pc, #28]	; (8007540 <LCD_IO_Init+0xec>)
 8007524:	f002 fa96 	bl	8009a54 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8007528:	f7ff fed6 	bl	80072d8 <SPIx_Init>
  }
}
 800752c:	bf00      	nop
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	2000073c 	.word	0x2000073c
 8007538:	40023800 	.word	0x40023800
 800753c:	40020c00 	.word	0x40020c00
 8007540:	40020800 	.word	0x40020800

08007544 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800754e:	2201      	movs	r2, #1
 8007550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007554:	480a      	ldr	r0, [pc, #40]	; (8007580 <LCD_IO_WriteData+0x3c>)
 8007556:	f002 fa7d 	bl	8009a54 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800755a:	2200      	movs	r2, #0
 800755c:	2104      	movs	r1, #4
 800755e:	4809      	ldr	r0, [pc, #36]	; (8007584 <LCD_IO_WriteData+0x40>)
 8007560:	f002 fa78 	bl	8009a54 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff ff10 	bl	800738c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800756c:	2201      	movs	r2, #1
 800756e:	2104      	movs	r1, #4
 8007570:	4804      	ldr	r0, [pc, #16]	; (8007584 <LCD_IO_WriteData+0x40>)
 8007572:	f002 fa6f 	bl	8009a54 <HAL_GPIO_WritePin>
}
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40020c00 	.word	0x40020c00
 8007584:	40020800 	.word	0x40020800

08007588 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8007592:	2200      	movs	r2, #0
 8007594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007598:	480a      	ldr	r0, [pc, #40]	; (80075c4 <LCD_IO_WriteReg+0x3c>)
 800759a:	f002 fa5b 	bl	8009a54 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800759e:	2200      	movs	r2, #0
 80075a0:	2104      	movs	r1, #4
 80075a2:	4809      	ldr	r0, [pc, #36]	; (80075c8 <LCD_IO_WriteReg+0x40>)
 80075a4:	f002 fa56 	bl	8009a54 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80075a8:	79fb      	ldrb	r3, [r7, #7]
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff feed 	bl	800738c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80075b2:	2201      	movs	r2, #1
 80075b4:	2104      	movs	r1, #4
 80075b6:	4804      	ldr	r0, [pc, #16]	; (80075c8 <LCD_IO_WriteReg+0x40>)
 80075b8:	f002 fa4c 	bl	8009a54 <HAL_GPIO_WritePin>
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	40020c00 	.word	0x40020c00
 80075c8:	40020800 	.word	0x40020800

080075cc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	460a      	mov	r2, r1
 80075d6:	80fb      	strh	r3, [r7, #6]
 80075d8:	4613      	mov	r3, r2
 80075da:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80075e0:	2200      	movs	r2, #0
 80075e2:	2104      	movs	r1, #4
 80075e4:	4810      	ldr	r0, [pc, #64]	; (8007628 <LCD_IO_ReadData+0x5c>)
 80075e6:	f002 fa35 	bl	8009a54 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80075ea:	2200      	movs	r2, #0
 80075ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075f0:	480e      	ldr	r0, [pc, #56]	; (800762c <LCD_IO_ReadData+0x60>)
 80075f2:	f002 fa2f 	bl	8009a54 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff fec7 	bl	800738c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80075fe:	797b      	ldrb	r3, [r7, #5]
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fea3 	bl	800734c <SPIx_Read>
 8007606:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8007608:	2201      	movs	r2, #1
 800760a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800760e:	4807      	ldr	r0, [pc, #28]	; (800762c <LCD_IO_ReadData+0x60>)
 8007610:	f002 fa20 	bl	8009a54 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8007614:	2201      	movs	r2, #1
 8007616:	2104      	movs	r1, #4
 8007618:	4803      	ldr	r0, [pc, #12]	; (8007628 <LCD_IO_ReadData+0x5c>)
 800761a:	f002 fa1b 	bl	8009a54 <HAL_GPIO_WritePin>
  
  return readvalue;
 800761e:	68fb      	ldr	r3, [r7, #12]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40020800 	.word	0x40020800
 800762c:	40020c00 	.word	0x40020c00

08007630 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f8df 	bl	80087fc <HAL_Delay>
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8007648:	b580      	push	{r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800764c:	4b2d      	ldr	r3, [pc, #180]	; (8007704 <BSP_LCD_Init+0xbc>)
 800764e:	4a2e      	ldr	r2, [pc, #184]	; (8007708 <BSP_LCD_Init+0xc0>)
 8007650:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8007652:	4b2c      	ldr	r3, [pc, #176]	; (8007704 <BSP_LCD_Init+0xbc>)
 8007654:	2209      	movs	r2, #9
 8007656:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8007658:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <BSP_LCD_Init+0xbc>)
 800765a:	2201      	movs	r2, #1
 800765c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800765e:	4b29      	ldr	r3, [pc, #164]	; (8007704 <BSP_LCD_Init+0xbc>)
 8007660:	221d      	movs	r2, #29
 8007662:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8007664:	4b27      	ldr	r3, [pc, #156]	; (8007704 <BSP_LCD_Init+0xbc>)
 8007666:	2203      	movs	r2, #3
 8007668:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800766a:	4b26      	ldr	r3, [pc, #152]	; (8007704 <BSP_LCD_Init+0xbc>)
 800766c:	f240 120d 	movw	r2, #269	; 0x10d
 8007670:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <BSP_LCD_Init+0xbc>)
 8007674:	f240 1243 	movw	r2, #323	; 0x143
 8007678:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800767a:	4b22      	ldr	r3, [pc, #136]	; (8007704 <BSP_LCD_Init+0xbc>)
 800767c:	f240 1217 	movw	r2, #279	; 0x117
 8007680:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8007682:	4b20      	ldr	r3, [pc, #128]	; (8007704 <BSP_LCD_Init+0xbc>)
 8007684:	f240 1247 	movw	r2, #327	; 0x147
 8007688:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800768a:	4b1e      	ldr	r3, [pc, #120]	; (8007704 <BSP_LCD_Init+0xbc>)
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8007692:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <BSP_LCD_Init+0xbc>)
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <BSP_LCD_Init+0xbc>)
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80076a2:	4b1a      	ldr	r3, [pc, #104]	; (800770c <BSP_LCD_Init+0xc4>)
 80076a4:	2208      	movs	r2, #8
 80076a6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80076a8:	4b18      	ldr	r3, [pc, #96]	; (800770c <BSP_LCD_Init+0xc4>)
 80076aa:	22c0      	movs	r2, #192	; 0xc0
 80076ac:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80076ae:	4b17      	ldr	r3, [pc, #92]	; (800770c <BSP_LCD_Init+0xc4>)
 80076b0:	2204      	movs	r2, #4
 80076b2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80076b4:	4b15      	ldr	r3, [pc, #84]	; (800770c <BSP_LCD_Init+0xc4>)
 80076b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80076bc:	4813      	ldr	r0, [pc, #76]	; (800770c <BSP_LCD_Init+0xc4>)
 80076be:	f004 fe63 	bl	800c388 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80076c2:	4b10      	ldr	r3, [pc, #64]	; (8007704 <BSP_LCD_Init+0xbc>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80076c8:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <BSP_LCD_Init+0xbc>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <BSP_LCD_Init+0xbc>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80076d4:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <BSP_LCD_Init+0xbc>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80076da:	f000 fc95 	bl	8008008 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80076de:	4809      	ldr	r0, [pc, #36]	; (8007704 <BSP_LCD_Init+0xbc>)
 80076e0:	f003 fdf6 	bl	800b2d0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <BSP_LCD_Init+0xc8>)
 80076e6:	4a0b      	ldr	r2, [pc, #44]	; (8007714 <BSP_LCD_Init+0xcc>)
 80076e8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <BSP_LCD_Init+0xc8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80076f2:	f000 fe77 	bl	80083e4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80076f6:	4808      	ldr	r0, [pc, #32]	; (8007718 <BSP_LCD_Init+0xd0>)
 80076f8:	f000 f8e0 	bl	80078bc <BSP_LCD_SetFont>

  return LCD_OK;
 80076fc:	2300      	movs	r3, #0
}  
 80076fe:	4618      	mov	r0, r3
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000ec0 	.word	0x20000ec0
 8007708:	40016800 	.word	0x40016800
 800770c:	20000780 	.word	0x20000780
 8007710:	20000f68 	.word	0x20000f68
 8007714:	20000004 	.word	0x20000004
 8007718:	20000054 	.word	0x20000054

0800771c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8007720:	4b03      	ldr	r3, [pc, #12]	; (8007730 <BSP_LCD_GetXSize+0x14>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	4798      	blx	r3
 8007728:	4603      	mov	r3, r0
}
 800772a:	4618      	mov	r0, r3
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000f68 	.word	0x20000f68

08007734 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8007738:	4b03      	ldr	r3, [pc, #12]	; (8007748 <BSP_LCD_GetYSize+0x14>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773e:	4798      	blx	r3
 8007740:	4603      	mov	r3, r0
}
 8007742:	4618      	mov	r0, r3
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	20000f68 	.word	0x20000f68

0800774c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800774c:	b580      	push	{r7, lr}
 800774e:	b090      	sub	sp, #64	; 0x40
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800775c:	f7ff ffde 	bl	800771c <BSP_LCD_GetXSize>
 8007760:	4603      	mov	r3, r0
 8007762:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8007768:	f7ff ffe4 	bl	8007734 <BSP_LCD_GetYSize>
 800776c:	4603      	mov	r3, r0
 800776e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8007778:	23ff      	movs	r3, #255	; 0xff
 800777a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8007780:	2300      	movs	r3, #0
 8007782:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007792:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007798:	2307      	movs	r3, #7
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800779c:	f7ff ffbe 	bl	800771c <BSP_LCD_GetXSize>
 80077a0:	4603      	mov	r3, r0
 80077a2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80077a4:	f7ff ffc6 	bl	8007734 <BSP_LCD_GetYSize>
 80077a8:	4603      	mov	r3, r0
 80077aa:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	f107 030c 	add.w	r3, r7, #12
 80077b2:	4619      	mov	r1, r3
 80077b4:	4814      	ldr	r0, [pc, #80]	; (8007808 <BSP_LCD_LayerDefaultInit+0xbc>)
 80077b6:	f003 ff1d 	bl	800b5f4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	4913      	ldr	r1, [pc, #76]	; (800780c <BSP_LCD_LayerDefaultInit+0xc0>)
 80077be:	4613      	mov	r3, r2
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3304      	adds	r3, #4
 80077ca:	f04f 32ff 	mov.w	r2, #4294967295
 80077ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80077d0:	88fa      	ldrh	r2, [r7, #6]
 80077d2:	490e      	ldr	r1, [pc, #56]	; (800780c <BSP_LCD_LayerDefaultInit+0xc0>)
 80077d4:	4613      	mov	r3, r2
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	4413      	add	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	440b      	add	r3, r1
 80077de:	3308      	adds	r3, #8
 80077e0:	4a0b      	ldr	r2, [pc, #44]	; (8007810 <BSP_LCD_LayerDefaultInit+0xc4>)
 80077e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	4909      	ldr	r1, [pc, #36]	; (800780c <BSP_LCD_LayerDefaultInit+0xc0>)
 80077e8:	4613      	mov	r3, r2
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80077f6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80077f8:	4803      	ldr	r0, [pc, #12]	; (8007808 <BSP_LCD_LayerDefaultInit+0xbc>)
 80077fa:	f003 ff39 	bl	800b670 <HAL_LTDC_EnableDither>
}
 80077fe:	bf00      	nop
 8007800:	3740      	adds	r7, #64	; 0x40
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000ec0 	.word	0x20000ec0
 800780c:	200007b4 	.word	0x200007b4
 8007810:	20000054 	.word	0x20000054

08007814 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800781c:	4a04      	ldr	r2, [pc, #16]	; (8007830 <BSP_LCD_SelectLayer+0x1c>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6013      	str	r3, [r2, #0]
}
 8007822:	bf00      	nop
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	200007b0 	.word	0x200007b0

08007834 <BSP_LCD_SetTransparency>:
  * @param  LayerIndex: the Layer foreground or background.
  * @param  Transparency: the Transparency, 
  *    This parameter must range from 0x00 to 0xFF.
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{     
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&LtdcHandler, Transparency, LayerIndex);
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4619      	mov	r1, r3
 8007846:	4803      	ldr	r0, [pc, #12]	; (8007854 <BSP_LCD_SetTransparency+0x20>)
 8007848:	f003 ff3c 	bl	800b6c4 <HAL_LTDC_SetAlpha>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000ec0 	.word	0x20000ec0

08007858 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8007860:	4b07      	ldr	r3, [pc, #28]	; (8007880 <BSP_LCD_SetTextColor+0x28>)
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	4907      	ldr	r1, [pc, #28]	; (8007884 <BSP_LCD_SetTextColor+0x2c>)
 8007866:	4613      	mov	r3, r2
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	440b      	add	r3, r1
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	200007b0 	.word	0x200007b0
 8007884:	200007b4 	.word	0x200007b4

08007888 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8007890:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <BSP_LCD_SetBackColor+0x2c>)
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	4908      	ldr	r1, [pc, #32]	; (80078b8 <BSP_LCD_SetBackColor+0x30>)
 8007896:	4613      	mov	r3, r2
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	4413      	add	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	440b      	add	r3, r1
 80078a0:	3304      	adds	r3, #4
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	601a      	str	r2, [r3, #0]
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	200007b0 	.word	0x200007b0
 80078b8:	200007b4 	.word	0x200007b4

080078bc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80078c4:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <BSP_LCD_SetFont+0x2c>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	4908      	ldr	r1, [pc, #32]	; (80078ec <BSP_LCD_SetFont+0x30>)
 80078ca:	4613      	mov	r3, r2
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	3308      	adds	r3, #8
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	200007b0 	.word	0x200007b0
 80078ec:	200007b4 	.word	0x200007b4

080078f0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80078f4:	4b07      	ldr	r3, [pc, #28]	; (8007914 <BSP_LCD_GetFont+0x24>)
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	4907      	ldr	r1, [pc, #28]	; (8007918 <BSP_LCD_GetFont+0x28>)
 80078fa:	4613      	mov	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	440b      	add	r3, r1
 8007904:	3308      	adds	r3, #8
 8007906:	681b      	ldr	r3, [r3, #0]
}
 8007908:	4618      	mov	r0, r3
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	200007b0 	.word	0x200007b0
 8007918:	200007b4 	.word	0x200007b4

0800791c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800791c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800791e:	b085      	sub	sp, #20
 8007920:	af02      	add	r7, sp, #8
 8007922:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8007924:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <BSP_LCD_Clear+0x48>)
 8007926:	681c      	ldr	r4, [r3, #0]
 8007928:	4b0e      	ldr	r3, [pc, #56]	; (8007964 <BSP_LCD_Clear+0x48>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a0e      	ldr	r2, [pc, #56]	; (8007968 <BSP_LCD_Clear+0x4c>)
 800792e:	2134      	movs	r1, #52	; 0x34
 8007930:	fb01 f303 	mul.w	r3, r1, r3
 8007934:	4413      	add	r3, r2
 8007936:	335c      	adds	r3, #92	; 0x5c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461d      	mov	r5, r3
 800793c:	f7ff feee 	bl	800771c <BSP_LCD_GetXSize>
 8007940:	4606      	mov	r6, r0
 8007942:	f7ff fef7 	bl	8007734 <BSP_LCD_GetYSize>
 8007946:	4602      	mov	r2, r0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	2300      	movs	r3, #0
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4613      	mov	r3, r2
 8007952:	4632      	mov	r2, r6
 8007954:	4629      	mov	r1, r5
 8007956:	4620      	mov	r0, r4
 8007958:	f000 fd0c 	bl	8008374 <FillBuffer>
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007964:	200007b0 	.word	0x200007b0
 8007968:	20000ec0 	.word	0x20000ec0

0800796c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	80fb      	strh	r3, [r7, #6]
 8007976:	460b      	mov	r3, r1
 8007978:	80bb      	strh	r3, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800797e:	4b1b      	ldr	r3, [pc, #108]	; (80079ec <BSP_LCD_DisplayChar+0x80>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	491b      	ldr	r1, [pc, #108]	; (80079f0 <BSP_LCD_DisplayChar+0x84>)
 8007984:	4613      	mov	r3, r2
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	3308      	adds	r3, #8
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800799a:	4b14      	ldr	r3, [pc, #80]	; (80079ec <BSP_LCD_DisplayChar+0x80>)
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	4c14      	ldr	r4, [pc, #80]	; (80079f0 <BSP_LCD_DisplayChar+0x84>)
 80079a0:	4613      	mov	r3, r2
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4423      	add	r3, r4
 80079aa:	3308      	adds	r3, #8
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80079b0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80079b4:	4b0d      	ldr	r3, [pc, #52]	; (80079ec <BSP_LCD_DisplayChar+0x80>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	4c0d      	ldr	r4, [pc, #52]	; (80079f0 <BSP_LCD_DisplayChar+0x84>)
 80079ba:	4613      	mov	r3, r2
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4423      	add	r3, r4
 80079c4:	3308      	adds	r3, #8
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	889b      	ldrh	r3, [r3, #4]
 80079ca:	3307      	adds	r3, #7
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da00      	bge.n	80079d2 <BSP_LCD_DisplayChar+0x66>
 80079d0:	3307      	adds	r3, #7
 80079d2:	10db      	asrs	r3, r3, #3
 80079d4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80079d8:	18ca      	adds	r2, r1, r3
 80079da:	88b9      	ldrh	r1, [r7, #4]
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fc0e 	bl	8008200 <DrawChar>
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd90      	pop	{r4, r7, pc}
 80079ec:	200007b0 	.word	0x200007b0
 80079f0:	200007b4 	.word	0x200007b4

080079f4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80079f4:	b5b0      	push	{r4, r5, r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60ba      	str	r2, [r7, #8]
 80079fc:	461a      	mov	r2, r3
 80079fe:	4603      	mov	r3, r0
 8007a00:	81fb      	strh	r3, [r7, #14]
 8007a02:	460b      	mov	r3, r1
 8007a04:	81bb      	strh	r3, [r7, #12]
 8007a06:	4613      	mov	r3, r2
 8007a08:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	83fb      	strh	r3, [r7, #30]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8007a12:	2300      	movs	r3, #0
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	2300      	movs	r3, #0
 8007a18:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8007a1e:	e002      	b.n	8007a26 <BSP_LCD_DisplayStringAt+0x32>
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	617a      	str	r2, [r7, #20]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f6      	bne.n	8007a20 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8007a32:	f7ff fe73 	bl	800771c <BSP_LCD_GetXSize>
 8007a36:	4b4a      	ldr	r3, [pc, #296]	; (8007b60 <BSP_LCD_DisplayStringAt+0x16c>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	494a      	ldr	r1, [pc, #296]	; (8007b64 <BSP_LCD_DisplayStringAt+0x170>)
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3308      	adds	r3, #8
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	889b      	ldrh	r3, [r3, #4]
 8007a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a50:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8007a52:	79fb      	ldrb	r3, [r7, #7]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d01c      	beq.n	8007a92 <BSP_LCD_DisplayStringAt+0x9e>
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d017      	beq.n	8007a8c <BSP_LCD_DisplayStringAt+0x98>
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d12e      	bne.n	8007abe <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	1ad1      	subs	r1, r2, r3
 8007a66:	4b3e      	ldr	r3, [pc, #248]	; (8007b60 <BSP_LCD_DisplayStringAt+0x16c>)
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	483e      	ldr	r0, [pc, #248]	; (8007b64 <BSP_LCD_DisplayStringAt+0x170>)
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4403      	add	r3, r0
 8007a76:	3308      	adds	r3, #8
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	889b      	ldrh	r3, [r3, #4]
 8007a7c:	fb03 f301 	mul.w	r3, r3, r1
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	89fb      	ldrh	r3, [r7, #14]
 8007a86:	4413      	add	r3, r2
 8007a88:	83fb      	strh	r3, [r7, #30]
      break;
 8007a8a:	e01b      	b.n	8007ac4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8007a8c:	89fb      	ldrh	r3, [r7, #14]
 8007a8e:	83fb      	strh	r3, [r7, #30]
      break;
 8007a90:	e018      	b.n	8007ac4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	b299      	uxth	r1, r3
 8007a9a:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <BSP_LCD_DisplayStringAt+0x16c>)
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	4831      	ldr	r0, [pc, #196]	; (8007b64 <BSP_LCD_DisplayStringAt+0x170>)
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4403      	add	r3, r0
 8007aaa:	3308      	adds	r3, #8
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	889b      	ldrh	r3, [r3, #4]
 8007ab0:	fb11 f303 	smulbb	r3, r1, r3
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	89fb      	ldrh	r3, [r7, #14]
 8007ab8:	4413      	add	r3, r2
 8007aba:	83fb      	strh	r3, [r7, #30]
      break;
 8007abc:	e002      	b.n	8007ac4 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8007abe:	89fb      	ldrh	r3, [r7, #14]
 8007ac0:	83fb      	strh	r3, [r7, #30]
      break;
 8007ac2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8007ac4:	e01a      	b.n	8007afc <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	781a      	ldrb	r2, [r3, #0]
 8007aca:	89b9      	ldrh	r1, [r7, #12]
 8007acc:	8bfb      	ldrh	r3, [r7, #30]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff ff4c 	bl	800796c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8007ad4:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <BSP_LCD_DisplayStringAt+0x16c>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	4922      	ldr	r1, [pc, #136]	; (8007b64 <BSP_LCD_DisplayStringAt+0x170>)
 8007ada:	4613      	mov	r3, r2
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	889a      	ldrh	r2, [r3, #4]
 8007aea:	8bfb      	ldrh	r3, [r7, #30]
 8007aec:	4413      	add	r3, r2
 8007aee:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	3301      	adds	r3, #1
 8007af4:	60bb      	str	r3, [r7, #8]
    i++;
 8007af6:	8bbb      	ldrh	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bf14      	ite	ne
 8007b04:	2301      	movne	r3, #1
 8007b06:	2300      	moveq	r3, #0
 8007b08:	b2dc      	uxtb	r4, r3
 8007b0a:	f7ff fe07 	bl	800771c <BSP_LCD_GetXSize>
 8007b0e:	4605      	mov	r5, r0
 8007b10:	8bb9      	ldrh	r1, [r7, #28]
 8007b12:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <BSP_LCD_DisplayStringAt+0x16c>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4813      	ldr	r0, [pc, #76]	; (8007b64 <BSP_LCD_DisplayStringAt+0x170>)
 8007b18:	4613      	mov	r3, r2
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4403      	add	r3, r0
 8007b22:	3308      	adds	r3, #8
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	889b      	ldrh	r3, [r3, #4]
 8007b28:	fb03 f301 	mul.w	r3, r3, r1
 8007b2c:	1aeb      	subs	r3, r5, r3
 8007b2e:	b299      	uxth	r1, r3
 8007b30:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <BSP_LCD_DisplayStringAt+0x16c>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	480b      	ldr	r0, [pc, #44]	; (8007b64 <BSP_LCD_DisplayStringAt+0x170>)
 8007b36:	4613      	mov	r3, r2
 8007b38:	005b      	lsls	r3, r3, #1
 8007b3a:	4413      	add	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4403      	add	r3, r0
 8007b40:	3308      	adds	r3, #8
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	889b      	ldrh	r3, [r3, #4]
 8007b46:	4299      	cmp	r1, r3
 8007b48:	bf2c      	ite	cs
 8007b4a:	2301      	movcs	r3, #1
 8007b4c:	2300      	movcc	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	4023      	ands	r3, r4
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1b6      	bne.n	8007ac6 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8007b58:	bf00      	nop
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b60:	200007b0 	.word	0x200007b0
 8007b64:	200007b4 	.word	0x200007b4

08007b68 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6039      	str	r1, [r7, #0]
 8007b72:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8007b74:	f7ff febc 	bl	80078f0 <BSP_LCD_GetFont>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	88db      	ldrh	r3, [r3, #6]
 8007b7c:	88fa      	ldrh	r2, [r7, #6]
 8007b7e:	fb12 f303 	smulbb	r3, r2, r3
 8007b82:	b299      	uxth	r1, r3
 8007b84:	2303      	movs	r3, #3
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f7ff ff33 	bl	80079f4 <BSP_LCD_DisplayStringAt>
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8007b98:	b5b0      	push	{r4, r5, r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af02      	add	r7, sp, #8
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	80fb      	strh	r3, [r7, #6]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	80bb      	strh	r3, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007bae:	4b16      	ldr	r3, [pc, #88]	; (8007c08 <BSP_LCD_DrawHLine+0x70>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a16      	ldr	r2, [pc, #88]	; (8007c0c <BSP_LCD_DrawHLine+0x74>)
 8007bb4:	2134      	movs	r1, #52	; 0x34
 8007bb6:	fb01 f303 	mul.w	r3, r1, r3
 8007bba:	4413      	add	r3, r2
 8007bbc:	335c      	adds	r3, #92	; 0x5c
 8007bbe:	681c      	ldr	r4, [r3, #0]
 8007bc0:	f7ff fdac 	bl	800771c <BSP_LCD_GetXSize>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	88bb      	ldrh	r3, [r7, #4]
 8007bc8:	fb03 f202 	mul.w	r2, r3, r2
 8007bcc:	88fb      	ldrh	r3, [r7, #6]
 8007bce:	4413      	add	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4423      	add	r3, r4
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <BSP_LCD_DrawHLine+0x70>)
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	68fc      	ldr	r4, [r7, #12]
 8007bdc:	887d      	ldrh	r5, [r7, #2]
 8007bde:	4b0a      	ldr	r3, [pc, #40]	; (8007c08 <BSP_LCD_DrawHLine+0x70>)
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	490b      	ldr	r1, [pc, #44]	; (8007c10 <BSP_LCD_DrawHLine+0x78>)
 8007be4:	4613      	mov	r3, r2
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	440b      	add	r3, r1
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	462a      	mov	r2, r5
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	f000 fbba 	bl	8008374 <FillBuffer>
}
 8007c00:	bf00      	nop
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bdb0      	pop	{r4, r5, r7, pc}
 8007c08:	200007b0 	.word	0x200007b0
 8007c0c:	20000ec0 	.word	0x20000ec0
 8007c10:	200007b4 	.word	0x200007b4

08007c14 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	80fb      	strh	r3, [r7, #6]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	80bb      	strh	r3, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8007c26:	887b      	ldrh	r3, [r7, #2]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	f1c3 0303 	rsb	r3, r3, #3
 8007c2e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8007c34:	887b      	ldrh	r3, [r7, #2]
 8007c36:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8007c38:	e0cf      	b.n	8007dda <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	4413      	add	r3, r2
 8007c42:	b298      	uxth	r0, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	88ba      	ldrh	r2, [r7, #4]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	b29c      	uxth	r4, r3
 8007c4e:	4b67      	ldr	r3, [pc, #412]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4967      	ldr	r1, [pc, #412]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007c54:	4613      	mov	r3, r2
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	4621      	mov	r1, r4
 8007c64:	f000 faa6 	bl	80081b4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	88fa      	ldrh	r2, [r7, #6]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	b298      	uxth	r0, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	88ba      	ldrh	r2, [r7, #4]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	b29c      	uxth	r4, r3
 8007c7c:	4b5b      	ldr	r3, [pc, #364]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	495b      	ldr	r1, [pc, #364]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007c82:	4613      	mov	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	4621      	mov	r1, r4
 8007c92:	f000 fa8f 	bl	80081b4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	88fb      	ldrh	r3, [r7, #6]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	b298      	uxth	r0, r3
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	88ba      	ldrh	r2, [r7, #4]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	b29c      	uxth	r4, r3
 8007caa:	4b50      	ldr	r3, [pc, #320]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4950      	ldr	r1, [pc, #320]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	f000 fa78 	bl	80081b4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	b298      	uxth	r0, r3
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	88ba      	ldrh	r2, [r7, #4]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	b29c      	uxth	r4, r3
 8007cd8:	4b44      	ldr	r3, [pc, #272]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4944      	ldr	r1, [pc, #272]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007cde:	4613      	mov	r3, r2
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	461a      	mov	r2, r3
 8007cec:	4621      	mov	r1, r4
 8007cee:	f000 fa61 	bl	80081b4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	88fb      	ldrh	r3, [r7, #6]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	b298      	uxth	r0, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	88bb      	ldrh	r3, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	b29c      	uxth	r4, r3
 8007d06:	4b39      	ldr	r3, [pc, #228]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	4939      	ldr	r1, [pc, #228]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	005b      	lsls	r3, r3, #1
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	440b      	add	r3, r1
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	f000 fa4a 	bl	80081b4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	88fa      	ldrh	r2, [r7, #6]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	b298      	uxth	r0, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	88bb      	ldrh	r3, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	b29c      	uxth	r4, r3
 8007d34:	4b2d      	ldr	r3, [pc, #180]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	492d      	ldr	r1, [pc, #180]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	4413      	add	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	440b      	add	r3, r1
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	4621      	mov	r1, r4
 8007d4a:	f000 fa33 	bl	80081b4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	4413      	add	r3, r2
 8007d56:	b298      	uxth	r0, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	88bb      	ldrh	r3, [r7, #4]
 8007d5e:	4413      	add	r3, r2
 8007d60:	b29c      	uxth	r4, r3
 8007d62:	4b22      	ldr	r3, [pc, #136]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4922      	ldr	r1, [pc, #136]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007d68:	4613      	mov	r3, r2
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	4621      	mov	r1, r4
 8007d78:	f000 fa1c 	bl	80081b4 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	b298      	uxth	r0, r3
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	88bb      	ldrh	r3, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	b29c      	uxth	r4, r3
 8007d90:	4b16      	ldr	r3, [pc, #88]	; (8007dec <BSP_LCD_DrawCircle+0x1d8>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	4916      	ldr	r1, [pc, #88]	; (8007df0 <BSP_LCD_DrawCircle+0x1dc>)
 8007d96:	4613      	mov	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	4621      	mov	r1, r4
 8007da6:	f000 fa05 	bl	80081b4 <BSP_LCD_DrawPixel>

    if (d < 0)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da06      	bge.n	8007dbe <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	009a      	lsls	r2, r3, #2
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	4413      	add	r3, r2
 8007db8:	3306      	adds	r3, #6
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e00a      	b.n	8007dd4 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	009a      	lsls	r2, r3, #2
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	330a      	adds	r3, #10
 8007dcc:	617b      	str	r3, [r7, #20]
      cury--;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	f67f af2b 	bls.w	8007c3a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8007de4:	bf00      	nop
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd90      	pop	{r4, r7, pc}
 8007dec:	200007b0 	.word	0x200007b0
 8007df0:	200007b4 	.word	0x200007b4

08007df4 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8007df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df8:	b086      	sub	sp, #24
 8007dfa:	af02      	add	r7, sp, #8
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	4608      	mov	r0, r1
 8007e00:	4611      	mov	r1, r2
 8007e02:	461a      	mov	r2, r3
 8007e04:	4623      	mov	r3, r4
 8007e06:	80fb      	strh	r3, [r7, #6]
 8007e08:	4603      	mov	r3, r0
 8007e0a:	80bb      	strh	r3, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	807b      	strh	r3, [r7, #2]
 8007e10:	4613      	mov	r3, r2
 8007e12:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8007e14:	2300      	movs	r3, #0
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007e18:	4b20      	ldr	r3, [pc, #128]	; (8007e9c <BSP_LCD_FillRect+0xa8>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	4920      	ldr	r1, [pc, #128]	; (8007ea0 <BSP_LCD_FillRect+0xac>)
 8007e1e:	4613      	mov	r3, r2
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	4413      	add	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fd14 	bl	8007858 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007e30:	4b1a      	ldr	r3, [pc, #104]	; (8007e9c <BSP_LCD_FillRect+0xa8>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1b      	ldr	r2, [pc, #108]	; (8007ea4 <BSP_LCD_FillRect+0xb0>)
 8007e36:	2134      	movs	r1, #52	; 0x34
 8007e38:	fb01 f303 	mul.w	r3, r1, r3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	335c      	adds	r3, #92	; 0x5c
 8007e40:	681c      	ldr	r4, [r3, #0]
 8007e42:	f7ff fc6b 	bl	800771c <BSP_LCD_GetXSize>
 8007e46:	4602      	mov	r2, r0
 8007e48:	88bb      	ldrh	r3, [r7, #4]
 8007e4a:	fb03 f202 	mul.w	r2, r3, r2
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	4413      	add	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4423      	add	r3, r4
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8007e58:	4b10      	ldr	r3, [pc, #64]	; (8007e9c <BSP_LCD_FillRect+0xa8>)
 8007e5a:	681c      	ldr	r4, [r3, #0]
 8007e5c:	68fd      	ldr	r5, [r7, #12]
 8007e5e:	887e      	ldrh	r6, [r7, #2]
 8007e60:	f8b7 8000 	ldrh.w	r8, [r7]
 8007e64:	f7ff fc5a 	bl	800771c <BSP_LCD_GetXSize>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	887b      	ldrh	r3, [r7, #2]
 8007e6c:	1ad1      	subs	r1, r2, r3
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <BSP_LCD_FillRect+0xa8>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	480b      	ldr	r0, [pc, #44]	; (8007ea0 <BSP_LCD_FillRect+0xac>)
 8007e74:	4613      	mov	r3, r2
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4403      	add	r3, r0
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	9100      	str	r1, [sp, #0]
 8007e84:	4643      	mov	r3, r8
 8007e86:	4632      	mov	r2, r6
 8007e88:	4629      	mov	r1, r5
 8007e8a:	4620      	mov	r0, r4
 8007e8c:	f000 fa72 	bl	8008374 <FillBuffer>
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e9a:	bf00      	nop
 8007e9c:	200007b0 	.word	0x200007b0
 8007ea0:	200007b4 	.word	0x200007b4
 8007ea4:	20000ec0 	.word	0x20000ec0

08007ea8 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	80fb      	strh	r3, [r7, #6]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	80bb      	strh	r3, [r7, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8007eba:	887b      	ldrh	r3, [r7, #2]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	f1c3 0303 	rsb	r3, r3, #3
 8007ec2:	617b      	str	r3, [r7, #20]

  curx = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8007ec8:	887b      	ldrh	r3, [r7, #2]
 8007eca:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007ecc:	4b44      	ldr	r3, [pc, #272]	; (8007fe0 <BSP_LCD_FillCircle+0x138>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4944      	ldr	r1, [pc, #272]	; (8007fe4 <BSP_LCD_FillCircle+0x13c>)
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	440b      	add	r3, r1
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fcba 	bl	8007858 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8007ee4:	e061      	b.n	8007faa <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d021      	beq.n	8007f30 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	b298      	uxth	r0, r3
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	88bb      	ldrh	r3, [r7, #4]
 8007efc:	4413      	add	r3, r2
 8007efe:	b299      	uxth	r1, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	f7ff fe45 	bl	8007b98 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	88fa      	ldrh	r2, [r7, #6]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	b298      	uxth	r0, r3
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	88ba      	ldrh	r2, [r7, #4]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	b299      	uxth	r1, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	005b      	lsls	r3, r3, #1
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f7ff fe34 	bl	8007b98 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d021      	beq.n	8007f7a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	88fa      	ldrh	r2, [r7, #6]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	b298      	uxth	r0, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	88ba      	ldrh	r2, [r7, #4]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	b299      	uxth	r1, r3
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	f7ff fe20 	bl	8007b98 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	88fa      	ldrh	r2, [r7, #6]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	b298      	uxth	r0, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	88bb      	ldrh	r3, [r7, #4]
 8007f68:	4413      	add	r3, r2
 8007f6a:	b299      	uxth	r1, r3
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	f7ff fe0f 	bl	8007b98 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da06      	bge.n	8007f8e <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	009a      	lsls	r2, r3, #2
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	4413      	add	r3, r2
 8007f88:	3306      	adds	r3, #6
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e00a      	b.n	8007fa4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	009a      	lsls	r2, r3, #2
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	4413      	add	r3, r2
 8007f9a:	330a      	adds	r3, #10
 8007f9c:	617b      	str	r3, [r7, #20]
      cury--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d999      	bls.n	8007ee6 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007fb2:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <BSP_LCD_FillCircle+0x138>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	490b      	ldr	r1, [pc, #44]	; (8007fe4 <BSP_LCD_FillCircle+0x13c>)
 8007fb8:	4613      	mov	r3, r2
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	4413      	add	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	440b      	add	r3, r1
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff fc47 	bl	8007858 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8007fca:	887a      	ldrh	r2, [r7, #2]
 8007fcc:	88b9      	ldrh	r1, [r7, #4]
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff fe1f 	bl	8007c14 <BSP_LCD_DrawCircle>
}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	200007b0 	.word	0x200007b0
 8007fe4:	200007b4 	.word	0x200007b4

08007fe8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <BSP_LCD_DisplayOn+0x1c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8007ff6:	4b03      	ldr	r3, [pc, #12]	; (8008004 <BSP_LCD_DisplayOn+0x1c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	4798      	blx	r3
  }
}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000f68 	.word	0x20000f68

08008008 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08e      	sub	sp, #56	; 0x38
 800800c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	623b      	str	r3, [r7, #32]
 8008012:	4b61      	ldr	r3, [pc, #388]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	4a60      	ldr	r2, [pc, #384]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800801c:	6453      	str	r3, [r2, #68]	; 0x44
 800801e:	4b5e      	ldr	r3, [pc, #376]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008026:	623b      	str	r3, [r7, #32]
 8008028:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800802a:	2300      	movs	r3, #0
 800802c:	61fb      	str	r3, [r7, #28]
 800802e:	4b5a      	ldr	r3, [pc, #360]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	4a59      	ldr	r2, [pc, #356]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008034:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008038:	6313      	str	r3, [r2, #48]	; 0x30
 800803a:	4b57      	ldr	r3, [pc, #348]	; (8008198 <BSP_LCD_MspInit+0x190>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008042:	61fb      	str	r3, [r7, #28]
 8008044:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008046:	2300      	movs	r3, #0
 8008048:	61bb      	str	r3, [r7, #24]
 800804a:	4b53      	ldr	r3, [pc, #332]	; (8008198 <BSP_LCD_MspInit+0x190>)
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	4a52      	ldr	r2, [pc, #328]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008050:	f043 0301 	orr.w	r3, r3, #1
 8008054:	6313      	str	r3, [r2, #48]	; 0x30
 8008056:	4b50      	ldr	r3, [pc, #320]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	61bb      	str	r3, [r7, #24]
 8008060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008062:	2300      	movs	r3, #0
 8008064:	617b      	str	r3, [r7, #20]
 8008066:	4b4c      	ldr	r3, [pc, #304]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	4a4b      	ldr	r2, [pc, #300]	; (8008198 <BSP_LCD_MspInit+0x190>)
 800806c:	f043 0302 	orr.w	r3, r3, #2
 8008070:	6313      	str	r3, [r2, #48]	; 0x30
 8008072:	4b49      	ldr	r3, [pc, #292]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800807e:	2300      	movs	r3, #0
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	4b45      	ldr	r3, [pc, #276]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	4a44      	ldr	r2, [pc, #272]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008088:	f043 0304 	orr.w	r3, r3, #4
 800808c:	6313      	str	r3, [r2, #48]	; 0x30
 800808e:	4b42      	ldr	r3, [pc, #264]	; (8008198 <BSP_LCD_MspInit+0x190>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
 800809e:	4b3e      	ldr	r3, [pc, #248]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	4a3d      	ldr	r2, [pc, #244]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080a4:	f043 0308 	orr.w	r3, r3, #8
 80080a8:	6313      	str	r3, [r2, #48]	; 0x30
 80080aa:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80080b6:	2300      	movs	r3, #0
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	4b37      	ldr	r3, [pc, #220]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	4a36      	ldr	r2, [pc, #216]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080c0:	f043 0320 	orr.w	r3, r3, #32
 80080c4:	6313      	str	r3, [r2, #48]	; 0x30
 80080c6:	4b34      	ldr	r3, [pc, #208]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	60bb      	str	r3, [r7, #8]
 80080d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
 80080d6:	4b30      	ldr	r3, [pc, #192]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	4a2f      	ldr	r2, [pc, #188]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e0:	6313      	str	r3, [r2, #48]	; 0x30
 80080e2:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <BSP_LCD_MspInit+0x190>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80080ee:	f641 0358 	movw	r3, #6232	; 0x1858
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80080f4:	2302      	movs	r3, #2
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80080f8:	2300      	movs	r3, #0
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80080fc:	2302      	movs	r3, #2
 80080fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8008100:	230e      	movs	r3, #14
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8008104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008108:	4619      	mov	r1, r3
 800810a:	4824      	ldr	r0, [pc, #144]	; (800819c <BSP_LCD_MspInit+0x194>)
 800810c:	f001 f9ee 	bl	80094ec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8008110:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8008114:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8008116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800811a:	4619      	mov	r1, r3
 800811c:	4820      	ldr	r0, [pc, #128]	; (80081a0 <BSP_LCD_MspInit+0x198>)
 800811e:	f001 f9e5 	bl	80094ec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8008122:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8008128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800812c:	4619      	mov	r1, r3
 800812e:	481d      	ldr	r0, [pc, #116]	; (80081a4 <BSP_LCD_MspInit+0x19c>)
 8008130:	f001 f9dc 	bl	80094ec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8008134:	2348      	movs	r3, #72	; 0x48
 8008136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8008138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800813c:	4619      	mov	r1, r3
 800813e:	481a      	ldr	r0, [pc, #104]	; (80081a8 <BSP_LCD_MspInit+0x1a0>)
 8008140:	f001 f9d4 	bl	80094ec <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8008144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800814a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814e:	4619      	mov	r1, r3
 8008150:	4816      	ldr	r0, [pc, #88]	; (80081ac <BSP_LCD_MspInit+0x1a4>)
 8008152:	f001 f9cb 	bl	80094ec <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8008156:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800815c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008160:	4619      	mov	r1, r3
 8008162:	4813      	ldr	r0, [pc, #76]	; (80081b0 <BSP_LCD_MspInit+0x1a8>)
 8008164:	f001 f9c2 	bl	80094ec <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8008168:	2303      	movs	r3, #3
 800816a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800816c:	2309      	movs	r3, #9
 800816e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8008170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008174:	4619      	mov	r1, r3
 8008176:	480a      	ldr	r0, [pc, #40]	; (80081a0 <BSP_LCD_MspInit+0x198>)
 8008178:	f001 f9b8 	bl	80094ec <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800817c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8008182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008186:	4619      	mov	r1, r3
 8008188:	4809      	ldr	r0, [pc, #36]	; (80081b0 <BSP_LCD_MspInit+0x1a8>)
 800818a:	f001 f9af 	bl	80094ec <HAL_GPIO_Init>
}
 800818e:	bf00      	nop
 8008190:	3738      	adds	r7, #56	; 0x38
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40023800 	.word	0x40023800
 800819c:	40020000 	.word	0x40020000
 80081a0:	40020400 	.word	0x40020400
 80081a4:	40020800 	.word	0x40020800
 80081a8:	40020c00 	.word	0x40020c00
 80081ac:	40021400 	.word	0x40021400
 80081b0:	40021800 	.word	0x40021800

080081b4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80081b4:	b5b0      	push	{r4, r5, r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	603a      	str	r2, [r7, #0]
 80081be:	80fb      	strh	r3, [r7, #6]
 80081c0:	460b      	mov	r3, r1
 80081c2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <BSP_LCD_DrawPixel+0x44>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a0c      	ldr	r2, [pc, #48]	; (80081fc <BSP_LCD_DrawPixel+0x48>)
 80081ca:	2134      	movs	r1, #52	; 0x34
 80081cc:	fb01 f303 	mul.w	r3, r1, r3
 80081d0:	4413      	add	r3, r2
 80081d2:	335c      	adds	r3, #92	; 0x5c
 80081d4:	681c      	ldr	r4, [r3, #0]
 80081d6:	88bd      	ldrh	r5, [r7, #4]
 80081d8:	f7ff faa0 	bl	800771c <BSP_LCD_GetXSize>
 80081dc:	4603      	mov	r3, r0
 80081de:	fb03 f205 	mul.w	r2, r3, r5
 80081e2:	88fb      	ldrh	r3, [r7, #6]
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4423      	add	r3, r4
 80081ea:	461a      	mov	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bdb0      	pop	{r4, r5, r7, pc}
 80081f8:	200007b0 	.word	0x200007b0
 80081fc:	20000ec0 	.word	0x20000ec0

08008200 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	603a      	str	r2, [r7, #0]
 800820a:	80fb      	strh	r3, [r7, #6]
 800820c:	460b      	mov	r3, r1
 800820e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	2300      	movs	r3, #0
 8008216:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800821c:	4b53      	ldr	r3, [pc, #332]	; (800836c <DrawChar+0x16c>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4953      	ldr	r1, [pc, #332]	; (8008370 <DrawChar+0x170>)
 8008222:	4613      	mov	r3, r2
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	3308      	adds	r3, #8
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	88db      	ldrh	r3, [r3, #6]
 8008232:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8008234:	4b4d      	ldr	r3, [pc, #308]	; (800836c <DrawChar+0x16c>)
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	494d      	ldr	r1, [pc, #308]	; (8008370 <DrawChar+0x170>)
 800823a:	4613      	mov	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	3308      	adds	r3, #8
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	889b      	ldrh	r3, [r3, #4]
 800824a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800824c:	8a3b      	ldrh	r3, [r7, #16]
 800824e:	3307      	adds	r3, #7
 8008250:	2b00      	cmp	r3, #0
 8008252:	da00      	bge.n	8008256 <DrawChar+0x56>
 8008254:	3307      	adds	r3, #7
 8008256:	10db      	asrs	r3, r3, #3
 8008258:	b2db      	uxtb	r3, r3
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	b2da      	uxtb	r2, r3
 800825e:	8a3b      	ldrh	r3, [r7, #16]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
 800826a:	e076      	b.n	800835a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800826c:	8a3b      	ldrh	r3, [r7, #16]
 800826e:	3307      	adds	r3, #7
 8008270:	2b00      	cmp	r3, #0
 8008272:	da00      	bge.n	8008276 <DrawChar+0x76>
 8008274:	3307      	adds	r3, #7
 8008276:	10db      	asrs	r3, r3, #3
 8008278:	461a      	mov	r2, r3
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	fb03 f302 	mul.w	r3, r3, r2
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	4413      	add	r3, r2
 8008284:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8008286:	8a3b      	ldrh	r3, [r7, #16]
 8008288:	3307      	adds	r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	da00      	bge.n	8008290 <DrawChar+0x90>
 800828e:	3307      	adds	r3, #7
 8008290:	10db      	asrs	r3, r3, #3
 8008292:	2b01      	cmp	r3, #1
 8008294:	d002      	beq.n	800829c <DrawChar+0x9c>
 8008296:	2b02      	cmp	r3, #2
 8008298:	d004      	beq.n	80082a4 <DrawChar+0xa4>
 800829a:	e00c      	b.n	80082b6 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	617b      	str	r3, [r7, #20]
      break;
 80082a2:	e016      	b.n	80082d2 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	3201      	adds	r2, #1
 80082ae:	7812      	ldrb	r2, [r2, #0]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]
      break;
 80082b4:	e00d      	b.n	80082d2 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	041a      	lsls	r2, r3, #16
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	3301      	adds	r3, #1
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	4313      	orrs	r3, r2
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	3202      	adds	r2, #2
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
      break;
 80082d0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80082d2:	2300      	movs	r3, #0
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	e036      	b.n	8008346 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80082d8:	8a3a      	ldrh	r2, [r7, #16]
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	1ad2      	subs	r2, r2, r3
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	4413      	add	r3, r2
 80082e2:	3b01      	subs	r3, #1
 80082e4:	2201      	movs	r2, #1
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	461a      	mov	r2, r3
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d012      	beq.n	800831a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	4413      	add	r3, r2
 80082fc:	b298      	uxth	r0, r3
 80082fe:	4b1b      	ldr	r3, [pc, #108]	; (800836c <DrawChar+0x16c>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	491b      	ldr	r1, [pc, #108]	; (8008370 <DrawChar+0x170>)
 8008304:	4613      	mov	r3, r2
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	440b      	add	r3, r1
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	88bb      	ldrh	r3, [r7, #4]
 8008312:	4619      	mov	r1, r3
 8008314:	f7ff ff4e 	bl	80081b4 <BSP_LCD_DrawPixel>
 8008318:	e012      	b.n	8008340 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	b29a      	uxth	r2, r3
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	4413      	add	r3, r2
 8008322:	b298      	uxth	r0, r3
 8008324:	4b11      	ldr	r3, [pc, #68]	; (800836c <DrawChar+0x16c>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4911      	ldr	r1, [pc, #68]	; (8008370 <DrawChar+0x170>)
 800832a:	4613      	mov	r3, r2
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	3304      	adds	r3, #4
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	88bb      	ldrh	r3, [r7, #4]
 800833a:	4619      	mov	r1, r3
 800833c:	f7ff ff3a 	bl	80081b4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	3301      	adds	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	8a3b      	ldrh	r3, [r7, #16]
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	429a      	cmp	r2, r3
 800834c:	d3c4      	bcc.n	80082d8 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800834e:	88bb      	ldrh	r3, [r7, #4]
 8008350:	3301      	adds	r3, #1
 8008352:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	3301      	adds	r3, #1
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	8a7b      	ldrh	r3, [r7, #18]
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	429a      	cmp	r2, r3
 8008360:	d384      	bcc.n	800826c <DrawChar+0x6c>
  }
}
 8008362:	bf00      	nop
 8008364:	3720      	adds	r7, #32
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200007b0 	.word	0x200007b0
 8008370:	200007b4 	.word	0x200007b4

08008374 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af02      	add	r7, sp, #8
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8008382:	4b16      	ldr	r3, [pc, #88]	; (80083dc <FillBuffer+0x68>)
 8008384:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008388:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800838a:	4b14      	ldr	r3, [pc, #80]	; (80083dc <FillBuffer+0x68>)
 800838c:	2200      	movs	r2, #0
 800838e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8008390:	4a12      	ldr	r2, [pc, #72]	; (80083dc <FillBuffer+0x68>)
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8008396:	4b11      	ldr	r3, [pc, #68]	; (80083dc <FillBuffer+0x68>)
 8008398:	4a11      	ldr	r2, [pc, #68]	; (80083e0 <FillBuffer+0x6c>)
 800839a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800839c:	480f      	ldr	r0, [pc, #60]	; (80083dc <FillBuffer+0x68>)
 800839e:	f000 fd09 	bl	8008db4 <HAL_DMA2D_Init>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d115      	bne.n	80083d4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80083a8:	68f9      	ldr	r1, [r7, #12]
 80083aa:	480c      	ldr	r0, [pc, #48]	; (80083dc <FillBuffer+0x68>)
 80083ac:	f000 ff70 	bl	8009290 <HAL_DMA2D_ConfigLayer>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10e      	bne.n	80083d4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69f9      	ldr	r1, [r7, #28]
 80083c0:	4806      	ldr	r0, [pc, #24]	; (80083dc <FillBuffer+0x68>)
 80083c2:	f000 fd40 	bl	8008e46 <HAL_DMA2D_Start>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d103      	bne.n	80083d4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80083cc:	210a      	movs	r1, #10
 80083ce:	4803      	ldr	r0, [pc, #12]	; (80083dc <FillBuffer+0x68>)
 80083d0:	f000 fd64 	bl	8008e9c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80083d4:	bf00      	nop
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000740 	.word	0x20000740
 80083e0:	4002b000 	.word	0x4002b000

080083e4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80083e8:	4b29      	ldr	r3, [pc, #164]	; (8008490 <BSP_SDRAM_Init+0xac>)
 80083ea:	4a2a      	ldr	r2, [pc, #168]	; (8008494 <BSP_SDRAM_Init+0xb0>)
 80083ec:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80083ee:	4b2a      	ldr	r3, [pc, #168]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 80083f0:	2202      	movs	r2, #2
 80083f2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80083f4:	4b28      	ldr	r3, [pc, #160]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 80083f6:	2207      	movs	r2, #7
 80083f8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80083fa:	4b27      	ldr	r3, [pc, #156]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 80083fc:	2204      	movs	r2, #4
 80083fe:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8008400:	4b25      	ldr	r3, [pc, #148]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 8008402:	2207      	movs	r2, #7
 8008404:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8008406:	4b24      	ldr	r3, [pc, #144]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 8008408:	2202      	movs	r2, #2
 800840a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800840c:	4b22      	ldr	r3, [pc, #136]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 800840e:	2202      	movs	r2, #2
 8008410:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8008412:	4b21      	ldr	r3, [pc, #132]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 8008414:	2202      	movs	r2, #2
 8008416:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8008418:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <BSP_SDRAM_Init+0xac>)
 800841a:	2201      	movs	r2, #1
 800841c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800841e:	4b1c      	ldr	r3, [pc, #112]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008420:	2200      	movs	r2, #0
 8008422:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8008424:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008426:	2204      	movs	r2, #4
 8008428:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800842a:	4b19      	ldr	r3, [pc, #100]	; (8008490 <BSP_SDRAM_Init+0xac>)
 800842c:	2210      	movs	r2, #16
 800842e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008430:	4b17      	ldr	r3, [pc, #92]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008432:	2240      	movs	r2, #64	; 0x40
 8008434:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8008436:	4b16      	ldr	r3, [pc, #88]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008438:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800843c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800843e:	4b14      	ldr	r3, [pc, #80]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008440:	2200      	movs	r2, #0
 8008442:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8008444:	4b12      	ldr	r3, [pc, #72]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800844a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800844c:	4b10      	ldr	r3, [pc, #64]	; (8008490 <BSP_SDRAM_Init+0xac>)
 800844e:	2200      	movs	r2, #0
 8008450:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8008452:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008454:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008458:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800845a:	2100      	movs	r1, #0
 800845c:	480c      	ldr	r0, [pc, #48]	; (8008490 <BSP_SDRAM_Init+0xac>)
 800845e:	f000 f87f 	bl	8008560 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8008462:	490d      	ldr	r1, [pc, #52]	; (8008498 <BSP_SDRAM_Init+0xb4>)
 8008464:	480a      	ldr	r0, [pc, #40]	; (8008490 <BSP_SDRAM_Init+0xac>)
 8008466:	f004 f94d 	bl	800c704 <HAL_SDRAM_Init>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <BSP_SDRAM_Init+0xb8>)
 8008472:	2201      	movs	r2, #1
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e002      	b.n	800847e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8008478:	4b08      	ldr	r3, [pc, #32]	; (800849c <BSP_SDRAM_Init+0xb8>)
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800847e:	f240 506a 	movw	r0, #1386	; 0x56a
 8008482:	f000 f80d 	bl	80084a0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8008486:	4b05      	ldr	r3, [pc, #20]	; (800849c <BSP_SDRAM_Init+0xb8>)
 8008488:	781b      	ldrb	r3, [r3, #0]
}
 800848a:	4618      	mov	r0, r3
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	200007cc 	.word	0x200007cc
 8008494:	a0000140 	.word	0xa0000140
 8008498:	20000800 	.word	0x20000800
 800849c:	20000040 	.word	0x20000040

080084a0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80084ac:	4b2a      	ldr	r3, [pc, #168]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80084b2:	4b29      	ldr	r3, [pc, #164]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084b4:	2208      	movs	r2, #8
 80084b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80084b8:	4b27      	ldr	r3, [pc, #156]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084ba:	2201      	movs	r2, #1
 80084bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80084be:	4b26      	ldr	r3, [pc, #152]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80084c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084c8:	4923      	ldr	r1, [pc, #140]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084ca:	4824      	ldr	r0, [pc, #144]	; (800855c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80084cc:	f004 f94e 	bl	800c76c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80084d0:	2001      	movs	r0, #1
 80084d2:	f000 f993 	bl	80087fc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80084d6:	4b20      	ldr	r3, [pc, #128]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084d8:	2202      	movs	r2, #2
 80084da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80084dc:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084de:	2208      	movs	r2, #8
 80084e0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80084e2:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084e4:	2201      	movs	r2, #1
 80084e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80084e8:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80084ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f2:	4919      	ldr	r1, [pc, #100]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084f4:	4819      	ldr	r0, [pc, #100]	; (800855c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80084f6:	f004 f939 	bl	800c76c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80084fa:	4b17      	ldr	r3, [pc, #92]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80084fc:	2203      	movs	r2, #3
 80084fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8008500:	4b15      	ldr	r3, [pc, #84]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008502:	2208      	movs	r2, #8
 8008504:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8008506:	4b14      	ldr	r3, [pc, #80]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008508:	2204      	movs	r2, #4
 800850a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800850c:	4b12      	ldr	r3, [pc, #72]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800850e:	2200      	movs	r2, #0
 8008510:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8008512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008516:	4910      	ldr	r1, [pc, #64]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008518:	4810      	ldr	r0, [pc, #64]	; (800855c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800851a:	f004 f927 	bl	800c76c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800851e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8008522:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8008524:	4b0c      	ldr	r3, [pc, #48]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008526:	2204      	movs	r2, #4
 8008528:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800852a:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800852c:	2208      	movs	r2, #8
 800852e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8008530:	4b09      	ldr	r3, [pc, #36]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008532:	2201      	movs	r2, #1
 8008534:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4a07      	ldr	r2, [pc, #28]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800853a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800853c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008540:	4905      	ldr	r1, [pc, #20]	; (8008558 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8008542:	4806      	ldr	r0, [pc, #24]	; (800855c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8008544:	f004 f912 	bl	800c76c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8008548:	6879      	ldr	r1, [r7, #4]
 800854a:	4804      	ldr	r0, [pc, #16]	; (800855c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800854c:	f004 f939 	bl	800c7c2 <HAL_SDRAM_ProgramRefreshRate>
}
 8008550:	bf00      	nop
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	2000081c 	.word	0x2000081c
 800855c:	200007cc 	.word	0x200007cc

08008560 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b090      	sub	sp, #64	; 0x40
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80ec 	beq.w	800874a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008572:	2300      	movs	r3, #0
 8008574:	62bb      	str	r3, [r7, #40]	; 0x28
 8008576:	4b77      	ldr	r3, [pc, #476]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857a:	4a76      	ldr	r2, [pc, #472]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 800857c:	f043 0301 	orr.w	r3, r3, #1
 8008580:	6393      	str	r3, [r2, #56]	; 0x38
 8008582:	4b74      	ldr	r3, [pc, #464]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	62bb      	str	r3, [r7, #40]	; 0x28
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800858e:	2300      	movs	r3, #0
 8008590:	627b      	str	r3, [r7, #36]	; 0x24
 8008592:	4b70      	ldr	r3, [pc, #448]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	4a6f      	ldr	r2, [pc, #444]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800859c:	6313      	str	r3, [r2, #48]	; 0x30
 800859e:	4b6d      	ldr	r3, [pc, #436]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80085aa:	2300      	movs	r3, #0
 80085ac:	623b      	str	r3, [r7, #32]
 80085ae:	4b69      	ldr	r3, [pc, #420]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	4a68      	ldr	r2, [pc, #416]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085b4:	f043 0302 	orr.w	r3, r3, #2
 80085b8:	6313      	str	r3, [r2, #48]	; 0x30
 80085ba:	4b66      	ldr	r3, [pc, #408]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	623b      	str	r3, [r7, #32]
 80085c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	4b62      	ldr	r3, [pc, #392]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	4a61      	ldr	r2, [pc, #388]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085d0:	f043 0304 	orr.w	r3, r3, #4
 80085d4:	6313      	str	r3, [r2, #48]	; 0x30
 80085d6:	4b5f      	ldr	r3, [pc, #380]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	61fb      	str	r3, [r7, #28]
 80085e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80085e2:	2300      	movs	r3, #0
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	4b5b      	ldr	r3, [pc, #364]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ea:	4a5a      	ldr	r2, [pc, #360]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085ec:	f043 0308 	orr.w	r3, r3, #8
 80085f0:	6313      	str	r3, [r2, #48]	; 0x30
 80085f2:	4b58      	ldr	r3, [pc, #352]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	f003 0308 	and.w	r3, r3, #8
 80085fa:	61bb      	str	r3, [r7, #24]
 80085fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80085fe:	2300      	movs	r3, #0
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	4b54      	ldr	r3, [pc, #336]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	4a53      	ldr	r2, [pc, #332]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008608:	f043 0310 	orr.w	r3, r3, #16
 800860c:	6313      	str	r3, [r2, #48]	; 0x30
 800860e:	4b51      	ldr	r3, [pc, #324]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	f003 0310 	and.w	r3, r3, #16
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	4b4d      	ldr	r3, [pc, #308]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008622:	4a4c      	ldr	r2, [pc, #304]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008624:	f043 0320 	orr.w	r3, r3, #32
 8008628:	6313      	str	r3, [r2, #48]	; 0x30
 800862a:	4b4a      	ldr	r3, [pc, #296]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	60fb      	str	r3, [r7, #12]
 800863a:	4b46      	ldr	r3, [pc, #280]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 800863c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863e:	4a45      	ldr	r2, [pc, #276]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008644:	6313      	str	r3, [r2, #48]	; 0x30
 8008646:	4b43      	ldr	r3, [pc, #268]	; (8008754 <BSP_SDRAM_MspInit+0x1f4>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8008652:	2302      	movs	r3, #2
 8008654:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8008656:	2302      	movs	r3, #2
 8008658:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800865a:	2300      	movs	r3, #0
 800865c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800865e:	230c      	movs	r3, #12
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8008662:	2360      	movs	r3, #96	; 0x60
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8008666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800866a:	4619      	mov	r1, r3
 800866c:	483a      	ldr	r0, [pc, #232]	; (8008758 <BSP_SDRAM_MspInit+0x1f8>)
 800866e:	f000 ff3d 	bl	80094ec <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8008672:	2301      	movs	r3, #1
 8008674:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8008676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800867a:	4619      	mov	r1, r3
 800867c:	4837      	ldr	r0, [pc, #220]	; (800875c <BSP_SDRAM_MspInit+0x1fc>)
 800867e:	f000 ff35 	bl	80094ec <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8008682:	f24c 7303 	movw	r3, #50947	; 0xc703
 8008686:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8008688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800868c:	4619      	mov	r1, r3
 800868e:	4834      	ldr	r0, [pc, #208]	; (8008760 <BSP_SDRAM_MspInit+0x200>)
 8008690:	f000 ff2c 	bl	80094ec <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8008694:	f64f 7383 	movw	r3, #65411	; 0xff83
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800869a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800869e:	4619      	mov	r1, r3
 80086a0:	4830      	ldr	r0, [pc, #192]	; (8008764 <BSP_SDRAM_MspInit+0x204>)
 80086a2:	f000 ff23 	bl	80094ec <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80086a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80086aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80086ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086b0:	4619      	mov	r1, r3
 80086b2:	482d      	ldr	r0, [pc, #180]	; (8008768 <BSP_SDRAM_MspInit+0x208>)
 80086b4:	f000 ff1a 	bl	80094ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80086b8:	f248 1333 	movw	r3, #33075	; 0x8133
 80086bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80086be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086c2:	4619      	mov	r1, r3
 80086c4:	4829      	ldr	r0, [pc, #164]	; (800876c <BSP_SDRAM_MspInit+0x20c>)
 80086c6:	f000 ff11 	bl	80094ec <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80086ca:	4b29      	ldr	r3, [pc, #164]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80086d0:	4b27      	ldr	r3, [pc, #156]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086d2:	2280      	movs	r2, #128	; 0x80
 80086d4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80086d6:	4b26      	ldr	r3, [pc, #152]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086dc:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80086de:	4b24      	ldr	r3, [pc, #144]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086e4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80086e6:	4b22      	ldr	r3, [pc, #136]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086ec:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80086ee:	4b20      	ldr	r3, [pc, #128]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086f4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80086f6:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80086fc:	4b1c      	ldr	r3, [pc, #112]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 80086fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008702:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8008704:	4b1a      	ldr	r3, [pc, #104]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 8008706:	2200      	movs	r2, #0
 8008708:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800870a:	4b19      	ldr	r3, [pc, #100]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 800870c:	2203      	movs	r2, #3
 800870e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8008710:	4b17      	ldr	r3, [pc, #92]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 8008712:	2200      	movs	r2, #0
 8008714:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8008716:	4b16      	ldr	r3, [pc, #88]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 8008718:	2200      	movs	r2, #0
 800871a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800871c:	4b14      	ldr	r3, [pc, #80]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 800871e:	4a15      	ldr	r2, [pc, #84]	; (8008774 <BSP_SDRAM_MspInit+0x214>)
 8008720:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a12      	ldr	r2, [pc, #72]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 8008726:	631a      	str	r2, [r3, #48]	; 0x30
 8008728:	4a11      	ldr	r2, [pc, #68]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800872e:	4810      	ldr	r0, [pc, #64]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 8008730:	f000 fa32 	bl	8008b98 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8008734:	480e      	ldr	r0, [pc, #56]	; (8008770 <BSP_SDRAM_MspInit+0x210>)
 8008736:	f000 f981 	bl	8008a3c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800873a:	2200      	movs	r2, #0
 800873c:	210f      	movs	r1, #15
 800873e:	2038      	movs	r0, #56	; 0x38
 8008740:	f000 f936 	bl	80089b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8008744:	2038      	movs	r0, #56	; 0x38
 8008746:	f000 f94f 	bl	80089e8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800874a:	bf00      	nop
 800874c:	3740      	adds	r7, #64	; 0x40
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40023800 	.word	0x40023800
 8008758:	40020400 	.word	0x40020400
 800875c:	40020800 	.word	0x40020800
 8008760:	40020c00 	.word	0x40020c00
 8008764:	40021000 	.word	0x40021000
 8008768:	40021400 	.word	0x40021400
 800876c:	40021800 	.word	0x40021800
 8008770:	2000082c 	.word	0x2000082c
 8008774:	40026410 	.word	0x40026410

08008778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800877c:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <HAL_Init+0x40>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a0d      	ldr	r2, [pc, #52]	; (80087b8 <HAL_Init+0x40>)
 8008782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008788:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <HAL_Init+0x40>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a0a      	ldr	r2, [pc, #40]	; (80087b8 <HAL_Init+0x40>)
 800878e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008794:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <HAL_Init+0x40>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a07      	ldr	r2, [pc, #28]	; (80087b8 <HAL_Init+0x40>)
 800879a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800879e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80087a0:	2003      	movs	r0, #3
 80087a2:	f000 f8fa 	bl	800899a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80087a6:	2000      	movs	r0, #0
 80087a8:	f7fe f99c 	bl	8006ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80087ac:	f7fe f972 	bl	8006a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	40023c00 	.word	0x40023c00

080087bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <HAL_IncTick+0x20>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <HAL_IncTick+0x24>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4413      	add	r3, r2
 80087cc:	4a04      	ldr	r2, [pc, #16]	; (80087e0 <HAL_IncTick+0x24>)
 80087ce:	6013      	str	r3, [r2, #0]
}
 80087d0:	bf00      	nop
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	20000048 	.word	0x20000048
 80087e0:	20000f6c 	.word	0x20000f6c

080087e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0
  return uwTick;
 80087e8:	4b03      	ldr	r3, [pc, #12]	; (80087f8 <HAL_GetTick+0x14>)
 80087ea:	681b      	ldr	r3, [r3, #0]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000f6c 	.word	0x20000f6c

080087fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008804:	f7ff ffee 	bl	80087e4 <HAL_GetTick>
 8008808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d005      	beq.n	8008822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008816:	4b09      	ldr	r3, [pc, #36]	; (800883c <HAL_Delay+0x40>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4413      	add	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008822:	bf00      	nop
 8008824:	f7ff ffde 	bl	80087e4 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	429a      	cmp	r2, r3
 8008832:	d8f7      	bhi.n	8008824 <HAL_Delay+0x28>
  {
  }
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000048 	.word	0x20000048

08008840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008850:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <__NVIC_SetPriorityGrouping+0x44>)
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800885c:	4013      	ands	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800886c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008872:	4a04      	ldr	r2, [pc, #16]	; (8008884 <__NVIC_SetPriorityGrouping+0x44>)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	60d3      	str	r3, [r2, #12]
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	e000ed00 	.word	0xe000ed00

08008888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800888c:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <__NVIC_GetPriorityGrouping+0x18>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	0a1b      	lsrs	r3, r3, #8
 8008892:	f003 0307 	and.w	r3, r3, #7
}
 8008896:	4618      	mov	r0, r3
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	e000ed00 	.word	0xe000ed00

080088a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	db0b      	blt.n	80088ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	f003 021f 	and.w	r2, r3, #31
 80088bc:	4907      	ldr	r1, [pc, #28]	; (80088dc <__NVIC_EnableIRQ+0x38>)
 80088be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088c2:	095b      	lsrs	r3, r3, #5
 80088c4:	2001      	movs	r0, #1
 80088c6:	fa00 f202 	lsl.w	r2, r0, r2
 80088ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	e000e100 	.word	0xe000e100

080088e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	db0a      	blt.n	800890a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	490c      	ldr	r1, [pc, #48]	; (800892c <__NVIC_SetPriority+0x4c>)
 80088fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088fe:	0112      	lsls	r2, r2, #4
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	440b      	add	r3, r1
 8008904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008908:	e00a      	b.n	8008920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	4908      	ldr	r1, [pc, #32]	; (8008930 <__NVIC_SetPriority+0x50>)
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	f003 030f 	and.w	r3, r3, #15
 8008916:	3b04      	subs	r3, #4
 8008918:	0112      	lsls	r2, r2, #4
 800891a:	b2d2      	uxtb	r2, r2
 800891c:	440b      	add	r3, r1
 800891e:	761a      	strb	r2, [r3, #24]
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	e000e100 	.word	0xe000e100
 8008930:	e000ed00 	.word	0xe000ed00

08008934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008934:	b480      	push	{r7}
 8008936:	b089      	sub	sp, #36	; 0x24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	f1c3 0307 	rsb	r3, r3, #7
 800894e:	2b04      	cmp	r3, #4
 8008950:	bf28      	it	cs
 8008952:	2304      	movcs	r3, #4
 8008954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	3304      	adds	r3, #4
 800895a:	2b06      	cmp	r3, #6
 800895c:	d902      	bls.n	8008964 <NVIC_EncodePriority+0x30>
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	3b03      	subs	r3, #3
 8008962:	e000      	b.n	8008966 <NVIC_EncodePriority+0x32>
 8008964:	2300      	movs	r3, #0
 8008966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008968:	f04f 32ff 	mov.w	r2, #4294967295
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	43da      	mvns	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	401a      	ands	r2, r3
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800897c:	f04f 31ff 	mov.w	r1, #4294967295
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	fa01 f303 	lsl.w	r3, r1, r3
 8008986:	43d9      	mvns	r1, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800898c:	4313      	orrs	r3, r2
         );
}
 800898e:	4618      	mov	r0, r3
 8008990:	3724      	adds	r7, #36	; 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7ff ff4c 	bl	8008840 <__NVIC_SetPriorityGrouping>
}
 80089a8:	bf00      	nop
 80089aa:	3708      	adds	r7, #8
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80089be:	2300      	movs	r3, #0
 80089c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089c2:	f7ff ff61 	bl	8008888 <__NVIC_GetPriorityGrouping>
 80089c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	6978      	ldr	r0, [r7, #20]
 80089ce:	f7ff ffb1 	bl	8008934 <NVIC_EncodePriority>
 80089d2:	4602      	mov	r2, r0
 80089d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089d8:	4611      	mov	r1, r2
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff ff80 	bl	80088e0 <__NVIC_SetPriority>
}
 80089e0:	bf00      	nop
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7ff ff54 	bl	80088a4 <__NVIC_EnableIRQ>
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e00e      	b.n	8008a34 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	795b      	ldrb	r3, [r3, #5]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d105      	bne.n	8008a2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7fd faf2 	bl	8006010 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008a48:	f7ff fecc 	bl	80087e4 <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e099      	b.n	8008b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0201 	bic.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a78:	e00f      	b.n	8008a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008a7a:	f7ff feb3 	bl	80087e4 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b05      	cmp	r3, #5
 8008a86:	d908      	bls.n	8008a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2203      	movs	r2, #3
 8008a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e078      	b.n	8008b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e8      	bne.n	8008a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	4b38      	ldr	r3, [pc, #224]	; (8008b94 <HAL_DMA_Init+0x158>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	2b04      	cmp	r3, #4
 8008af2:	d107      	bne.n	8008b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	4313      	orrs	r3, r2
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f023 0307 	bic.w	r3, r3, #7
 8008b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d117      	bne.n	8008b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00e      	beq.n	8008b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f8bd 	bl	8008cc0 <DMA_CheckFifoParam>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d008      	beq.n	8008b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2240      	movs	r2, #64	; 0x40
 8008b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e016      	b.n	8008b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 f874 	bl	8008c54 <DMA_CalcBaseAndBitshift>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b74:	223f      	movs	r2, #63	; 0x3f
 8008b76:	409a      	lsls	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	f010803f 	.word	0xf010803f

08008b98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e050      	b.n	8008c4c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d101      	bne.n	8008bba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e048      	b.n	8008c4c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0201 	bic.w	r2, r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2221      	movs	r2, #33	; 0x21
 8008bf8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f82a 	bl	8008c54 <DMA_CalcBaseAndBitshift>
 8008c00:	4603      	mov	r3, r0
 8008c02:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2c:	223f      	movs	r2, #63	; 0x3f
 8008c2e:	409a      	lsls	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	3b10      	subs	r3, #16
 8008c64:	4a14      	ldr	r2, [pc, #80]	; (8008cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8008c66:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6a:	091b      	lsrs	r3, r3, #4
 8008c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008c6e:	4a13      	ldr	r2, [pc, #76]	; (8008cbc <DMA_CalcBaseAndBitshift+0x68>)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d909      	bls.n	8008c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	1d1a      	adds	r2, r3, #4
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	659a      	str	r2, [r3, #88]	; 0x58
 8008c94:	e007      	b.n	8008ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008c9e:	f023 0303 	bic.w	r3, r3, #3
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	aaaaaaab 	.word	0xaaaaaaab
 8008cbc:	080128f0 	.word	0x080128f0

08008cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d11f      	bne.n	8008d1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d855      	bhi.n	8008d8c <DMA_CheckFifoParam+0xcc>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <DMA_CheckFifoParam+0x28>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008d0b 	.word	0x08008d0b
 8008cf0:	08008cf9 	.word	0x08008cf9
 8008cf4:	08008d8d 	.word	0x08008d8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d045      	beq.n	8008d90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d08:	e042      	b.n	8008d90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d12:	d13f      	bne.n	8008d94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d18:	e03c      	b.n	8008d94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d22:	d121      	bne.n	8008d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d836      	bhi.n	8008d98 <DMA_CheckFifoParam+0xd8>
 8008d2a:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <DMA_CheckFifoParam+0x70>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d41 	.word	0x08008d41
 8008d34:	08008d47 	.word	0x08008d47
 8008d38:	08008d41 	.word	0x08008d41
 8008d3c:	08008d59 	.word	0x08008d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
      break;
 8008d44:	e02f      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d024      	beq.n	8008d9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d56:	e021      	b.n	8008d9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d60:	d11e      	bne.n	8008da0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008d66:	e01b      	b.n	8008da0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d902      	bls.n	8008d74 <DMA_CheckFifoParam+0xb4>
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d003      	beq.n	8008d7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008d72:	e018      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
      break;
 8008d78:	e015      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00e      	beq.n	8008da4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8a:	e00b      	b.n	8008da4 <DMA_CheckFifoParam+0xe4>
      break;
 8008d8c:	bf00      	nop
 8008d8e:	e00a      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      break;
 8008d90:	bf00      	nop
 8008d92:	e008      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      break;
 8008d94:	bf00      	nop
 8008d96:	e006      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      break;
 8008d98:	bf00      	nop
 8008d9a:	e004      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      break;
 8008d9c:	bf00      	nop
 8008d9e:	e002      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      break;   
 8008da0:	bf00      	nop
 8008da2:	e000      	b.n	8008da6 <DMA_CheckFifoParam+0xe6>
      break;
 8008da4:	bf00      	nop
    }
  } 
  
  return status; 
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e03b      	b.n	8008e3e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7fd f93a 	bl	8006054 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e04:	f023 0107 	bic.w	r1, r3, #7
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	430a      	orrs	r2, r1
 8008e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	68d1      	ldr	r1, [r2, #12]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6812      	ldr	r2, [r2, #0]
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b086      	sub	sp, #24
 8008e4a:	af02      	add	r7, sp, #8
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
 8008e52:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d101      	bne.n	8008e62 <HAL_DMA2D_Start+0x1c>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e018      	b.n	8008e94 <HAL_DMA2D_Start+0x4e>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fa99 	bl	80093b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f042 0201 	orr.w	r2, r2, #1
 8008e90:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d056      	beq.n	8008f66 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8008eb8:	f7ff fc94 	bl	80087e4 <HAL_GetTick>
 8008ebc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008ebe:	e04b      	b.n	8008f58 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d023      	beq.n	8008f1a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f003 0320 	and.w	r3, r3, #32
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee0:	f043 0202 	orr.w	r2, r3, #2
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d005      	beq.n	8008efe <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef6:	f043 0201 	orr.w	r2, r3, #1
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2221      	movs	r2, #33	; 0x21
 8008f04:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2204      	movs	r2, #4
 8008f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e0a5      	b.n	8009066 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f20:	d01a      	beq.n	8008f58 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8008f22:	f7ff fc5f 	bl	80087e4 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d302      	bcc.n	8008f38 <HAL_DMA2D_PollForTransfer+0x9c>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10f      	bne.n	8008f58 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3c:	f043 0220 	orr.w	r2, r3, #32
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2203      	movs	r2, #3
 8008f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e086      	b.n	8009066 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0ac      	beq.n	8008ec0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d061      	beq.n	800904c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f88:	f7ff fc2c 	bl	80087e4 <HAL_GetTick>
 8008f8c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008f8e:	e056      	b.n	800903e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d02e      	beq.n	8009000 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb0:	f043 0204 	orr.w	r2, r3, #4
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d005      	beq.n	8008fce <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc6:	f043 0202 	orr.w	r2, r3, #2
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d005      	beq.n	8008fe4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fdc:	f043 0201 	orr.w	r2, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2229      	movs	r2, #41	; 0x29
 8008fea:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2204      	movs	r2, #4
 8008ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e032      	b.n	8009066 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d01a      	beq.n	800903e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8009008:	f7ff fbec 	bl	80087e4 <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d302      	bcc.n	800901e <HAL_DMA2D_PollForTransfer+0x182>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10f      	bne.n	800903e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	f043 0220 	orr.w	r2, r3, #32
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2203      	movs	r2, #3
 800902e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e013      	b.n	8009066 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0a1      	beq.n	8008f90 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2212      	movs	r2, #18
 8009052:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d026      	beq.n	80090de <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d021      	beq.n	80090de <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090a8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ae:	f043 0201 	orr.w	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2201      	movs	r2, #1
 80090bc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2204      	movs	r2, #4
 80090c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f003 0320 	and.w	r3, r3, #32
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d026      	beq.n	8009136 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d021      	beq.n	8009136 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009100:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2220      	movs	r2, #32
 8009108:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	f043 0202 	orr.w	r2, r3, #2
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2204      	movs	r2, #4
 800911a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b00      	cmp	r3, #0
 800913e:	d026      	beq.n	800918e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009146:	2b00      	cmp	r3, #0
 8009148:	d021      	beq.n	800918e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009158:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2208      	movs	r2, #8
 8009160:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009166:	f043 0204 	orr.w	r2, r3, #4
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2204      	movs	r2, #4
 8009172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d013      	beq.n	80091c0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091b0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2204      	movs	r2, #4
 80091b8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f853 	bl	8009266 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d024      	beq.n	8009214 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d01f      	beq.n	8009214 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80091e2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2202      	movs	r2, #2
 80091ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0310 	and.w	r3, r3, #16
 800921a:	2b00      	cmp	r3, #0
 800921c:	d01f      	beq.n	800925e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01a      	beq.n	800925e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009236:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2210      	movs	r2, #16
 800923e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f80e 	bl	800927a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800925e:	bf00      	nop
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8009282:	bf00      	nop
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
	...

08009290 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d101      	bne.n	80092b0 <HAL_DMA2D_ConfigLayer+0x20>
 80092ac:	2302      	movs	r3, #2
 80092ae:	e079      	b.n	80093a4 <HAL_DMA2D_ConfigLayer+0x114>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	3318      	adds	r3, #24
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	4413      	add	r3, r2
 80092ca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	041b      	lsls	r3, r3, #16
 80092d6:	4313      	orrs	r3, r2
 80092d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80092da:	4b35      	ldr	r3, [pc, #212]	; (80093b0 <HAL_DMA2D_ConfigLayer+0x120>)
 80092dc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	2b0a      	cmp	r3, #10
 80092e4:	d003      	beq.n	80092ee <HAL_DMA2D_ConfigLayer+0x5e>
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d107      	bne.n	80092fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	e005      	b.n	800930a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	061b      	lsls	r3, r3, #24
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d120      	bne.n	8009352 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	43db      	mvns	r3, r3
 800931a:	ea02 0103 	and.w	r1, r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	430a      	orrs	r2, r1
 8009326:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2b0a      	cmp	r3, #10
 8009338:	d003      	beq.n	8009342 <HAL_DMA2D_ConfigLayer+0xb2>
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	2b09      	cmp	r3, #9
 8009340:	d127      	bne.n	8009392 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800934e:	629a      	str	r2, [r3, #40]	; 0x28
 8009350:	e01f      	b.n	8009392 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	43db      	mvns	r3, r3
 800935c:	ea02 0103 	and.w	r1, r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	430a      	orrs	r2, r1
 8009368:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	2b0a      	cmp	r3, #10
 800937a:	d003      	beq.n	8009384 <HAL_DMA2D_ConfigLayer+0xf4>
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	2b09      	cmp	r3, #9
 8009382:	d106      	bne.n	8009392 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8009390:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2201      	movs	r2, #1
 8009396:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	371c      	adds	r7, #28
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	ff03000f 	.word	0xff03000f

080093b4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b08b      	sub	sp, #44	; 0x2c
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	041a      	lsls	r2, r3, #16
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	431a      	orrs	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	430a      	orrs	r2, r1
 80093da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093ec:	d174      	bne.n	80094d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80093f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009404:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d108      	bne.n	8009426 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	431a      	orrs	r2, r3
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	4313      	orrs	r3, r2
 800941e:	697a      	ldr	r2, [r7, #20]
 8009420:	4313      	orrs	r3, r2
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
 8009424:	e053      	b.n	80094ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d106      	bne.n	800943c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	4313      	orrs	r3, r2
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	4313      	orrs	r3, r2
 8009438:	627b      	str	r3, [r7, #36]	; 0x24
 800943a:	e048      	b.n	80094ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d111      	bne.n	8009468 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	0cdb      	lsrs	r3, r3, #19
 8009448:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	0a9b      	lsrs	r3, r3, #10
 800944e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	08db      	lsrs	r3, r3, #3
 8009454:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	02db      	lsls	r3, r3, #11
 800945e:	4313      	orrs	r3, r2
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	4313      	orrs	r3, r2
 8009464:	627b      	str	r3, [r7, #36]	; 0x24
 8009466:	e032      	b.n	80094ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	2b03      	cmp	r3, #3
 800946e:	d117      	bne.n	80094a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8009470:	6a3b      	ldr	r3, [r7, #32]
 8009472:	0fdb      	lsrs	r3, r3, #31
 8009474:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	0cdb      	lsrs	r3, r3, #19
 800947a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	0adb      	lsrs	r3, r3, #11
 8009480:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	08db      	lsrs	r3, r3, #3
 8009486:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	029b      	lsls	r3, r3, #10
 8009490:	431a      	orrs	r2, r3
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	03db      	lsls	r3, r3, #15
 8009496:	4313      	orrs	r3, r2
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
 800949e:	e016      	b.n	80094ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	0f1b      	lsrs	r3, r3, #28
 80094a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	0d1b      	lsrs	r3, r3, #20
 80094aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	0b1b      	lsrs	r3, r3, #12
 80094b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	091b      	lsrs	r3, r3, #4
 80094b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	011a      	lsls	r2, r3, #4
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	021b      	lsls	r3, r3, #8
 80094c0:	431a      	orrs	r2, r3
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	031b      	lsls	r3, r3, #12
 80094c6:	4313      	orrs	r3, r2
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80094d6:	e003      	b.n	80094e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	60da      	str	r2, [r3, #12]
}
 80094e0:	bf00      	nop
 80094e2:	372c      	adds	r7, #44	; 0x2c
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b089      	sub	sp, #36	; 0x24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80094fe:	2300      	movs	r3, #0
 8009500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009502:	2300      	movs	r3, #0
 8009504:	61fb      	str	r3, [r7, #28]
 8009506:	e177      	b.n	80097f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009508:	2201      	movs	r2, #1
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	fa02 f303 	lsl.w	r3, r2, r3
 8009510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4013      	ands	r3, r2
 800951a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	429a      	cmp	r2, r3
 8009522:	f040 8166 	bne.w	80097f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d00b      	beq.n	8009546 <HAL_GPIO_Init+0x5a>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	2b02      	cmp	r3, #2
 8009534:	d007      	beq.n	8009546 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800953a:	2b11      	cmp	r3, #17
 800953c:	d003      	beq.n	8009546 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	2b12      	cmp	r3, #18
 8009544:	d130      	bne.n	80095a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	2203      	movs	r2, #3
 8009552:	fa02 f303 	lsl.w	r3, r2, r3
 8009556:	43db      	mvns	r3, r3
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	4013      	ands	r3, r2
 800955c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	fa02 f303 	lsl.w	r3, r2, r3
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	4313      	orrs	r3, r2
 800956e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	69ba      	ldr	r2, [r7, #24]
 8009574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800957c:	2201      	movs	r2, #1
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	fa02 f303 	lsl.w	r3, r2, r3
 8009584:	43db      	mvns	r3, r3
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	4013      	ands	r3, r2
 800958a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	091b      	lsrs	r3, r3, #4
 8009592:	f003 0201 	and.w	r2, r3, #1
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	69ba      	ldr	r2, [r7, #24]
 800959e:	4313      	orrs	r3, r2
 80095a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	69ba      	ldr	r2, [r7, #24]
 80095a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	2203      	movs	r2, #3
 80095b4:	fa02 f303 	lsl.w	r3, r2, r3
 80095b8:	43db      	mvns	r3, r3
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	4013      	ands	r3, r2
 80095be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	fa02 f303 	lsl.w	r3, r2, r3
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d003      	beq.n	80095e8 <HAL_GPIO_Init+0xfc>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	2b12      	cmp	r3, #18
 80095e6:	d123      	bne.n	8009630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	08da      	lsrs	r2, r3, #3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3208      	adds	r2, #8
 80095f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	220f      	movs	r2, #15
 8009600:	fa02 f303 	lsl.w	r3, r2, r3
 8009604:	43db      	mvns	r3, r3
 8009606:	69ba      	ldr	r2, [r7, #24]
 8009608:	4013      	ands	r3, r2
 800960a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	fa02 f303 	lsl.w	r3, r2, r3
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	4313      	orrs	r3, r2
 8009620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	08da      	lsrs	r2, r3, #3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3208      	adds	r2, #8
 800962a:	69b9      	ldr	r1, [r7, #24]
 800962c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	005b      	lsls	r3, r3, #1
 800963a:	2203      	movs	r2, #3
 800963c:	fa02 f303 	lsl.w	r3, r2, r3
 8009640:	43db      	mvns	r3, r3
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	4013      	ands	r3, r2
 8009646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f003 0203 	and.w	r2, r3, #3
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	fa02 f303 	lsl.w	r3, r2, r3
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	4313      	orrs	r3, r2
 800965c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 80c0 	beq.w	80097f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	4b65      	ldr	r3, [pc, #404]	; (800980c <HAL_GPIO_Init+0x320>)
 8009678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800967a:	4a64      	ldr	r2, [pc, #400]	; (800980c <HAL_GPIO_Init+0x320>)
 800967c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009680:	6453      	str	r3, [r2, #68]	; 0x44
 8009682:	4b62      	ldr	r3, [pc, #392]	; (800980c <HAL_GPIO_Init+0x320>)
 8009684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800968e:	4a60      	ldr	r2, [pc, #384]	; (8009810 <HAL_GPIO_Init+0x324>)
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	089b      	lsrs	r3, r3, #2
 8009694:	3302      	adds	r3, #2
 8009696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800969a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	220f      	movs	r2, #15
 80096a6:	fa02 f303 	lsl.w	r3, r2, r3
 80096aa:	43db      	mvns	r3, r3
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	4013      	ands	r3, r2
 80096b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a57      	ldr	r2, [pc, #348]	; (8009814 <HAL_GPIO_Init+0x328>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d037      	beq.n	800972a <HAL_GPIO_Init+0x23e>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a56      	ldr	r2, [pc, #344]	; (8009818 <HAL_GPIO_Init+0x32c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d031      	beq.n	8009726 <HAL_GPIO_Init+0x23a>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a55      	ldr	r2, [pc, #340]	; (800981c <HAL_GPIO_Init+0x330>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d02b      	beq.n	8009722 <HAL_GPIO_Init+0x236>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a54      	ldr	r2, [pc, #336]	; (8009820 <HAL_GPIO_Init+0x334>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d025      	beq.n	800971e <HAL_GPIO_Init+0x232>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a53      	ldr	r2, [pc, #332]	; (8009824 <HAL_GPIO_Init+0x338>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d01f      	beq.n	800971a <HAL_GPIO_Init+0x22e>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a52      	ldr	r2, [pc, #328]	; (8009828 <HAL_GPIO_Init+0x33c>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d019      	beq.n	8009716 <HAL_GPIO_Init+0x22a>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a51      	ldr	r2, [pc, #324]	; (800982c <HAL_GPIO_Init+0x340>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d013      	beq.n	8009712 <HAL_GPIO_Init+0x226>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a50      	ldr	r2, [pc, #320]	; (8009830 <HAL_GPIO_Init+0x344>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d00d      	beq.n	800970e <HAL_GPIO_Init+0x222>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a4f      	ldr	r2, [pc, #316]	; (8009834 <HAL_GPIO_Init+0x348>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d007      	beq.n	800970a <HAL_GPIO_Init+0x21e>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a4e      	ldr	r2, [pc, #312]	; (8009838 <HAL_GPIO_Init+0x34c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d101      	bne.n	8009706 <HAL_GPIO_Init+0x21a>
 8009702:	2309      	movs	r3, #9
 8009704:	e012      	b.n	800972c <HAL_GPIO_Init+0x240>
 8009706:	230a      	movs	r3, #10
 8009708:	e010      	b.n	800972c <HAL_GPIO_Init+0x240>
 800970a:	2308      	movs	r3, #8
 800970c:	e00e      	b.n	800972c <HAL_GPIO_Init+0x240>
 800970e:	2307      	movs	r3, #7
 8009710:	e00c      	b.n	800972c <HAL_GPIO_Init+0x240>
 8009712:	2306      	movs	r3, #6
 8009714:	e00a      	b.n	800972c <HAL_GPIO_Init+0x240>
 8009716:	2305      	movs	r3, #5
 8009718:	e008      	b.n	800972c <HAL_GPIO_Init+0x240>
 800971a:	2304      	movs	r3, #4
 800971c:	e006      	b.n	800972c <HAL_GPIO_Init+0x240>
 800971e:	2303      	movs	r3, #3
 8009720:	e004      	b.n	800972c <HAL_GPIO_Init+0x240>
 8009722:	2302      	movs	r3, #2
 8009724:	e002      	b.n	800972c <HAL_GPIO_Init+0x240>
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <HAL_GPIO_Init+0x240>
 800972a:	2300      	movs	r3, #0
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	f002 0203 	and.w	r2, r2, #3
 8009732:	0092      	lsls	r2, r2, #2
 8009734:	4093      	lsls	r3, r2
 8009736:	69ba      	ldr	r2, [r7, #24]
 8009738:	4313      	orrs	r3, r2
 800973a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800973c:	4934      	ldr	r1, [pc, #208]	; (8009810 <HAL_GPIO_Init+0x324>)
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	089b      	lsrs	r3, r3, #2
 8009742:	3302      	adds	r3, #2
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800974a:	4b3c      	ldr	r3, [pc, #240]	; (800983c <HAL_GPIO_Init+0x350>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	43db      	mvns	r3, r3
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	4013      	ands	r3, r2
 8009758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d003      	beq.n	800976e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800976e:	4a33      	ldr	r2, [pc, #204]	; (800983c <HAL_GPIO_Init+0x350>)
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009774:	4b31      	ldr	r3, [pc, #196]	; (800983c <HAL_GPIO_Init+0x350>)
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	43db      	mvns	r3, r3
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	4013      	ands	r3, r2
 8009782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d003      	beq.n	8009798 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	4313      	orrs	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009798:	4a28      	ldr	r2, [pc, #160]	; (800983c <HAL_GPIO_Init+0x350>)
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800979e:	4b27      	ldr	r3, [pc, #156]	; (800983c <HAL_GPIO_Init+0x350>)
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	43db      	mvns	r3, r3
 80097a8:	69ba      	ldr	r2, [r7, #24]
 80097aa:	4013      	ands	r3, r2
 80097ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d003      	beq.n	80097c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	4313      	orrs	r3, r2
 80097c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80097c2:	4a1e      	ldr	r2, [pc, #120]	; (800983c <HAL_GPIO_Init+0x350>)
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80097c8:	4b1c      	ldr	r3, [pc, #112]	; (800983c <HAL_GPIO_Init+0x350>)
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	43db      	mvns	r3, r3
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	4013      	ands	r3, r2
 80097d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80097e4:	69ba      	ldr	r2, [r7, #24]
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80097ec:	4a13      	ldr	r2, [pc, #76]	; (800983c <HAL_GPIO_Init+0x350>)
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	3301      	adds	r3, #1
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	2b0f      	cmp	r3, #15
 80097fc:	f67f ae84 	bls.w	8009508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009800:	bf00      	nop
 8009802:	3724      	adds	r7, #36	; 0x24
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	40023800 	.word	0x40023800
 8009810:	40013800 	.word	0x40013800
 8009814:	40020000 	.word	0x40020000
 8009818:	40020400 	.word	0x40020400
 800981c:	40020800 	.word	0x40020800
 8009820:	40020c00 	.word	0x40020c00
 8009824:	40021000 	.word	0x40021000
 8009828:	40021400 	.word	0x40021400
 800982c:	40021800 	.word	0x40021800
 8009830:	40021c00 	.word	0x40021c00
 8009834:	40022000 	.word	0x40022000
 8009838:	40022400 	.word	0x40022400
 800983c:	40013c00 	.word	0x40013c00

08009840 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800984a:	2300      	movs	r3, #0
 800984c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800984e:	2300      	movs	r3, #0
 8009850:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009852:	2300      	movs	r3, #0
 8009854:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009856:	2300      	movs	r3, #0
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	e0d9      	b.n	8009a10 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800985c:	2201      	movs	r2, #1
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	fa02 f303 	lsl.w	r3, r2, r3
 8009864:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4013      	ands	r3, r2
 800986c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	429a      	cmp	r2, r3
 8009874:	f040 80c9 	bne.w	8009a0a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8009878:	4a6a      	ldr	r2, [pc, #424]	; (8009a24 <HAL_GPIO_DeInit+0x1e4>)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	089b      	lsrs	r3, r3, #2
 800987e:	3302      	adds	r3, #2
 8009880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009884:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	220f      	movs	r2, #15
 8009890:	fa02 f303 	lsl.w	r3, r2, r3
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	4013      	ands	r3, r2
 8009898:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a62      	ldr	r2, [pc, #392]	; (8009a28 <HAL_GPIO_DeInit+0x1e8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d037      	beq.n	8009912 <HAL_GPIO_DeInit+0xd2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a61      	ldr	r2, [pc, #388]	; (8009a2c <HAL_GPIO_DeInit+0x1ec>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d031      	beq.n	800990e <HAL_GPIO_DeInit+0xce>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a60      	ldr	r2, [pc, #384]	; (8009a30 <HAL_GPIO_DeInit+0x1f0>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d02b      	beq.n	800990a <HAL_GPIO_DeInit+0xca>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a5f      	ldr	r2, [pc, #380]	; (8009a34 <HAL_GPIO_DeInit+0x1f4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d025      	beq.n	8009906 <HAL_GPIO_DeInit+0xc6>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a5e      	ldr	r2, [pc, #376]	; (8009a38 <HAL_GPIO_DeInit+0x1f8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d01f      	beq.n	8009902 <HAL_GPIO_DeInit+0xc2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a5d      	ldr	r2, [pc, #372]	; (8009a3c <HAL_GPIO_DeInit+0x1fc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d019      	beq.n	80098fe <HAL_GPIO_DeInit+0xbe>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a5c      	ldr	r2, [pc, #368]	; (8009a40 <HAL_GPIO_DeInit+0x200>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d013      	beq.n	80098fa <HAL_GPIO_DeInit+0xba>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a5b      	ldr	r2, [pc, #364]	; (8009a44 <HAL_GPIO_DeInit+0x204>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00d      	beq.n	80098f6 <HAL_GPIO_DeInit+0xb6>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a5a      	ldr	r2, [pc, #360]	; (8009a48 <HAL_GPIO_DeInit+0x208>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <HAL_GPIO_DeInit+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a59      	ldr	r2, [pc, #356]	; (8009a4c <HAL_GPIO_DeInit+0x20c>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d101      	bne.n	80098ee <HAL_GPIO_DeInit+0xae>
 80098ea:	2309      	movs	r3, #9
 80098ec:	e012      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 80098ee:	230a      	movs	r3, #10
 80098f0:	e010      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 80098f2:	2308      	movs	r3, #8
 80098f4:	e00e      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 80098f6:	2307      	movs	r3, #7
 80098f8:	e00c      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 80098fa:	2306      	movs	r3, #6
 80098fc:	e00a      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 80098fe:	2305      	movs	r3, #5
 8009900:	e008      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 8009902:	2304      	movs	r3, #4
 8009904:	e006      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 8009906:	2303      	movs	r3, #3
 8009908:	e004      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 800990a:	2302      	movs	r3, #2
 800990c:	e002      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 800990e:	2301      	movs	r3, #1
 8009910:	e000      	b.n	8009914 <HAL_GPIO_DeInit+0xd4>
 8009912:	2300      	movs	r3, #0
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	f002 0203 	and.w	r2, r2, #3
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	4093      	lsls	r3, r2
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	429a      	cmp	r2, r3
 8009922:	d132      	bne.n	800998a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009924:	4b4a      	ldr	r3, [pc, #296]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	43db      	mvns	r3, r3
 800992c:	4948      	ldr	r1, [pc, #288]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 800992e:	4013      	ands	r3, r2
 8009930:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009932:	4b47      	ldr	r3, [pc, #284]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	43db      	mvns	r3, r3
 800993a:	4945      	ldr	r1, [pc, #276]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 800993c:	4013      	ands	r3, r2
 800993e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009940:	4b43      	ldr	r3, [pc, #268]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 8009942:	689a      	ldr	r2, [r3, #8]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	43db      	mvns	r3, r3
 8009948:	4941      	ldr	r1, [pc, #260]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 800994a:	4013      	ands	r3, r2
 800994c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800994e:	4b40      	ldr	r3, [pc, #256]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	43db      	mvns	r3, r3
 8009956:	493e      	ldr	r1, [pc, #248]	; (8009a50 <HAL_GPIO_DeInit+0x210>)
 8009958:	4013      	ands	r3, r2
 800995a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	220f      	movs	r2, #15
 8009966:	fa02 f303 	lsl.w	r3, r2, r3
 800996a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800996c:	4a2d      	ldr	r2, [pc, #180]	; (8009a24 <HAL_GPIO_DeInit+0x1e4>)
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	089b      	lsrs	r3, r3, #2
 8009972:	3302      	adds	r3, #2
 8009974:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	43da      	mvns	r2, r3
 800997c:	4829      	ldr	r0, [pc, #164]	; (8009a24 <HAL_GPIO_DeInit+0x1e4>)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	089b      	lsrs	r3, r3, #2
 8009982:	400a      	ands	r2, r1
 8009984:	3302      	adds	r3, #2
 8009986:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	2103      	movs	r1, #3
 8009994:	fa01 f303 	lsl.w	r3, r1, r3
 8009998:	43db      	mvns	r3, r3
 800999a:	401a      	ands	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	08da      	lsrs	r2, r3, #3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	3208      	adds	r2, #8
 80099a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	220f      	movs	r2, #15
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	43db      	mvns	r3, r3
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	08d2      	lsrs	r2, r2, #3
 80099c0:	4019      	ands	r1, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3208      	adds	r2, #8
 80099c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	005b      	lsls	r3, r3, #1
 80099d2:	2103      	movs	r1, #3
 80099d4:	fa01 f303 	lsl.w	r3, r1, r3
 80099d8:	43db      	mvns	r3, r3
 80099da:	401a      	ands	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	2101      	movs	r1, #1
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	fa01 f303 	lsl.w	r3, r1, r3
 80099ec:	43db      	mvns	r3, r3
 80099ee:	401a      	ands	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	2103      	movs	r1, #3
 80099fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009a02:	43db      	mvns	r3, r3
 8009a04:	401a      	ands	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	2b0f      	cmp	r3, #15
 8009a14:	f67f af22 	bls.w	800985c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40013800 	.word	0x40013800
 8009a28:	40020000 	.word	0x40020000
 8009a2c:	40020400 	.word	0x40020400
 8009a30:	40020800 	.word	0x40020800
 8009a34:	40020c00 	.word	0x40020c00
 8009a38:	40021000 	.word	0x40021000
 8009a3c:	40021400 	.word	0x40021400
 8009a40:	40021800 	.word	0x40021800
 8009a44:	40021c00 	.word	0x40021c00
 8009a48:	40022000 	.word	0x40022000
 8009a4c:	40022400 	.word	0x40022400
 8009a50:	40013c00 	.word	0x40013c00

08009a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	807b      	strh	r3, [r7, #2]
 8009a60:	4613      	mov	r3, r2
 8009a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009a64:	787b      	ldrb	r3, [r7, #1]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a6a:	887a      	ldrh	r2, [r7, #2]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009a70:	e003      	b.n	8009a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009a72:	887b      	ldrh	r3, [r7, #2]
 8009a74:	041a      	lsls	r2, r3, #16
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	619a      	str	r2, [r3, #24]
}
 8009a7a:	bf00      	nop
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a88:	b08f      	sub	sp, #60	; 0x3c
 8009a8a:	af0a      	add	r7, sp, #40	; 0x28
 8009a8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e054      	b.n	8009b42 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fd f9e6 	bl	8006e84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2203      	movs	r2, #3
 8009abc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f004 fd8a 	bl	800e5f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	603b      	str	r3, [r7, #0]
 8009ae2:	687e      	ldr	r6, [r7, #4]
 8009ae4:	466d      	mov	r5, sp
 8009ae6:	f106 0410 	add.w	r4, r6, #16
 8009aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009af2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009af6:	e885 0003 	stmia.w	r5, {r0, r1}
 8009afa:	1d33      	adds	r3, r6, #4
 8009afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009afe:	6838      	ldr	r0, [r7, #0]
 8009b00:	f004 fd15 	bl	800e52e <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2101      	movs	r1, #1
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f004 fd81 	bl	800e612 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	603b      	str	r3, [r7, #0]
 8009b16:	687e      	ldr	r6, [r7, #4]
 8009b18:	466d      	mov	r5, sp
 8009b1a:	f106 0410 	add.w	r4, r6, #16
 8009b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b2e:	1d33      	adds	r3, r6, #4
 8009b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b32:	6838      	ldr	r0, [r7, #0]
 8009b34:	f004 fe5e 	bl	800e7f4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b4a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b086      	sub	sp, #24
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f004 fe05 	bl	800e770 <USB_GetMode>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	f040 80ef 	bne.w	8009d4c <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f004 fde9 	bl	800e74a <USB_ReadInterrupts>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 80e5 	beq.w	8009d4a <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f004 fde0 	bl	800e74a <USB_ReadInterrupts>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b94:	d104      	bne.n	8009ba0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009b9e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f004 fdd0 	bl	800e74a <USB_ReadInterrupts>
 8009baa:	4603      	mov	r3, r0
 8009bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bb4:	d104      	bne.n	8009bc0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bbe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f004 fdc0 	bl	800e74a <USB_ReadInterrupts>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bd4:	d104      	bne.n	8009be0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009bde:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f004 fdb0 	bl	800e74a <USB_ReadInterrupts>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f003 0302 	and.w	r3, r3, #2
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d103      	bne.n	8009bfc <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2202      	movs	r2, #2
 8009bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f004 fda2 	bl	800e74a <USB_ReadInterrupts>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c10:	d115      	bne.n	8009c3e <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8009c1a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f003 0301 	and.w	r3, r3, #1
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d108      	bne.n	8009c3e <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f8a4 	bl	8009d7a <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2101      	movs	r1, #1
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f004 fe97 	bl	800e96c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f004 fd81 	bl	800e74a <USB_ReadInterrupts>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c52:	d102      	bne.n	8009c5a <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f001 f913 	bl	800ae80 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f004 fd73 	bl	800e74a <USB_ReadInterrupts>
 8009c64:	4603      	mov	r3, r0
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d106      	bne.n	8009c7c <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f86f 	bl	8009d52 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2208      	movs	r2, #8
 8009c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f004 fd62 	bl	800e74a <USB_ReadInterrupts>
 8009c86:	4603      	mov	r3, r0
 8009c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c90:	d138      	bne.n	8009d04 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f004 fedb 	bl	800ea52 <USB_HC_ReadInterrupt>
 8009c9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]
 8009ca2:	e025      	b.n	8009cf0 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f003 030f 	and.w	r3, r3, #15
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d018      	beq.n	8009cea <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cce:	d106      	bne.n	8009cde <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f87b 	bl	8009dd2 <HCD_HC_IN_IRQHandler>
 8009cdc:	e005      	b.n	8009cea <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fca9 	bl	800a63c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	3301      	adds	r3, #1
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d3d4      	bcc.n	8009ca4 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f004 fd1e 	bl	800e74a <USB_ReadInterrupts>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	f003 0310 	and.w	r3, r3, #16
 8009d14:	2b10      	cmp	r3, #16
 8009d16:	d101      	bne.n	8009d1c <HAL_HCD_IRQHandler+0x1d2>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <HAL_HCD_IRQHandler+0x1d4>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d014      	beq.n	8009d4c <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	699a      	ldr	r2, [r3, #24]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0210 	bic.w	r2, r2, #16
 8009d30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fff8 	bl	800ad28 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	699a      	ldr	r2, [r3, #24]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f042 0210 	orr.w	r2, r2, #16
 8009d46:	619a      	str	r2, [r3, #24]
 8009d48:	e000      	b.n	8009d4c <HAL_HCD_IRQHandler+0x202>
      return;
 8009d4a:	bf00      	nop
    }
  }
}
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8009d82:	bf00      	nop
 8009d84:	370c      	adds	r7, #12
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8009d96:	bf00      	nop
 8009d98:	370c      	adds	r7, #12
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b083      	sub	sp, #12
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8009daa:	bf00      	nop
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b083      	sub	sp, #12
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	70fb      	strb	r3, [r7, #3]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8009dc6:	bf00      	nop
 8009dc8:	370c      	adds	r7, #12
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b086      	sub	sp, #24
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d119      	bne.n	8009e36 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0e:	461a      	mov	r2, r3
 8009e10:	2304      	movs	r3, #4
 8009e12:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	0151      	lsls	r1, r2, #5
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	440a      	add	r2, r1
 8009e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e2e:	f043 0302 	orr.w	r3, r3, #2
 8009e32:	60d3      	str	r3, [r2, #12]
 8009e34:	e0ce      	b.n	8009fd4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e4c:	d12c      	bne.n	8009ea8 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8009e62:	6879      	ldr	r1, [r7, #4]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	4613      	mov	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	440b      	add	r3, r1
 8009e70:	335d      	adds	r3, #93	; 0x5d
 8009e72:	2207      	movs	r2, #7
 8009e74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	0151      	lsls	r1, r2, #5
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	440a      	add	r2, r1
 8009e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e90:	f043 0302 	orr.w	r3, r3, #2
 8009e94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f004 fde7 	bl	800ea74 <USB_HC_Halt>
 8009ea6:	e095      	b.n	8009fd4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	d109      	bne.n	8009ed2 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eca:	461a      	mov	r2, r3
 8009ecc:	2320      	movs	r3, #32
 8009ece:	6093      	str	r3, [r2, #8]
 8009ed0:	e080      	b.n	8009fd4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f003 0308 	and.w	r3, r3, #8
 8009ee4:	2b08      	cmp	r3, #8
 8009ee6:	d134      	bne.n	8009f52 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	0151      	lsls	r1, r2, #5
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	440a      	add	r2, r1
 8009efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f02:	f043 0302 	orr.w	r3, r3, #2
 8009f06:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	440b      	add	r3, r1
 8009f16:	335d      	adds	r3, #93	; 0x5d
 8009f18:	2205      	movs	r2, #5
 8009f1a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f28:	461a      	mov	r2, r3
 8009f2a:	2310      	movs	r3, #16
 8009f2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	b2d2      	uxtb	r2, r2
 8009f48:	4611      	mov	r1, r2
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f004 fd92 	bl	800ea74 <USB_HC_Halt>
 8009f50:	e040      	b.n	8009fd4 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f68:	d134      	bne.n	8009fd4 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f84:	f043 0302 	orr.w	r3, r3, #2
 8009f88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	4611      	mov	r1, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f004 fd6d 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	2310      	movs	r3, #16
 8009faa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	68fa      	ldr	r2, [r7, #12]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	440b      	add	r3, r1
 8009fba:	335d      	adds	r3, #93	; 0x5d
 8009fbc:	2208      	movs	r2, #8
 8009fbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fcc:	461a      	mov	r2, r3
 8009fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fea:	d122      	bne.n	800a032 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	440a      	add	r2, r1
 800a002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a006:	f043 0302 	orr.w	r3, r3, #2
 800a00a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	b2d2      	uxtb	r2, r2
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f004 fd2c 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	015a      	lsls	r2, r3, #5
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	4413      	add	r3, r2
 800a024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a028:	461a      	mov	r2, r3
 800a02a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a02e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800a030:	e300      	b.n	800a634 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b01      	cmp	r3, #1
 800a046:	f040 80fd 	bne.w	800a244 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d01b      	beq.n	800a08a <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a052:	6879      	ldr	r1, [r7, #4]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	440b      	add	r3, r1
 800a060:	3348      	adds	r3, #72	; 0x48
 800a062:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	0159      	lsls	r1, r3, #5
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	440b      	add	r3, r1
 800a06c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800a076:	1ad1      	subs	r1, r2, r3
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	4403      	add	r3, r0
 800a086:	334c      	adds	r3, #76	; 0x4c
 800a088:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	440b      	add	r3, r1
 800a098:	335d      	adds	r3, #93	; 0x5d
 800a09a:	2201      	movs	r2, #1
 800a09c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	00db      	lsls	r3, r3, #3
 800a0aa:	440b      	add	r3, r1
 800a0ac:	3358      	adds	r3, #88	; 0x58
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0be:	461a      	mov	r2, r3
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a0c4:	6879      	ldr	r1, [r7, #4]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	440b      	add	r3, r1
 800a0d2:	333f      	adds	r3, #63	; 0x3f
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	4413      	add	r3, r2
 800a0e4:	00db      	lsls	r3, r3, #3
 800a0e6:	440b      	add	r3, r1
 800a0e8:	333f      	adds	r3, #63	; 0x3f
 800a0ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d121      	bne.n	800a134 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	0151      	lsls	r1, r2, #5
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	440a      	add	r2, r1
 800a106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a10a:	f043 0302 	orr.w	r3, r3, #2
 800a10e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f004 fcaa 	bl	800ea74 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	015a      	lsls	r2, r3, #5
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	4413      	add	r3, r2
 800a128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a12c:	461a      	mov	r2, r3
 800a12e:	2310      	movs	r3, #16
 800a130:	6093      	str	r3, [r2, #8]
 800a132:	e070      	b.n	800a216 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a134:	6879      	ldr	r1, [r7, #4]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4613      	mov	r3, r2
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	4413      	add	r3, r2
 800a13e:	00db      	lsls	r3, r3, #3
 800a140:	440b      	add	r3, r1
 800a142:	333f      	adds	r3, #63	; 0x3f
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b03      	cmp	r3, #3
 800a148:	d12a      	bne.n	800a1a0 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	4413      	add	r3, r2
 800a152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a168:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	440b      	add	r3, r1
 800a178:	335c      	adds	r3, #92	; 0x5c
 800a17a:	2201      	movs	r2, #1
 800a17c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	b2d8      	uxtb	r0, r3
 800a182:	6879      	ldr	r1, [r7, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	00db      	lsls	r3, r3, #3
 800a18e:	440b      	add	r3, r1
 800a190:	335c      	adds	r3, #92	; 0x5c
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	461a      	mov	r2, r3
 800a196:	4601      	mov	r1, r0
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff fe0c 	bl	8009db6 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a19e:	e03a      	b.n	800a216 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800a1a0:	6879      	ldr	r1, [r7, #4]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	00db      	lsls	r3, r3, #3
 800a1ac:	440b      	add	r3, r1
 800a1ae:	333f      	adds	r3, #63	; 0x3f
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d12f      	bne.n	800a216 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	00db      	lsls	r3, r3, #3
 800a1c2:	440b      	add	r3, r1
 800a1c4:	335c      	adds	r3, #92	; 0x5c
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	440b      	add	r3, r1
 800a1d8:	3350      	adds	r3, #80	; 0x50
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	f083 0301 	eor.w	r3, r3, #1
 800a1e0:	b2d8      	uxtb	r0, r3
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4413      	add	r3, r2
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	440b      	add	r3, r1
 800a1f0:	3350      	adds	r3, #80	; 0x50
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	b2d8      	uxtb	r0, r3
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	440b      	add	r3, r1
 800a208:	335c      	adds	r3, #92	; 0x5c
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	4601      	mov	r1, r0
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff fdd0 	bl	8009db6 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	4613      	mov	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4413      	add	r3, r2
 800a220:	00db      	lsls	r3, r3, #3
 800a222:	440b      	add	r3, r1
 800a224:	3350      	adds	r3, #80	; 0x50
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f083 0301 	eor.w	r3, r3, #1
 800a22c:	b2d8      	uxtb	r0, r3
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	00db      	lsls	r3, r3, #3
 800a23a:	440b      	add	r3, r1
 800a23c:	3350      	adds	r3, #80	; 0x50
 800a23e:	4602      	mov	r2, r0
 800a240:	701a      	strb	r2, [r3, #0]
}
 800a242:	e1f7      	b.n	800a634 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b02      	cmp	r3, #2
 800a258:	f040 811a 	bne.w	800a490 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	015a      	lsls	r2, r3, #5
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	4413      	add	r3, r2
 800a264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	0151      	lsls	r1, r2, #5
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	440a      	add	r2, r1
 800a272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a276:	f023 0302 	bic.w	r3, r3, #2
 800a27a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4613      	mov	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	440b      	add	r3, r1
 800a28a:	335d      	adds	r3, #93	; 0x5d
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d10a      	bne.n	800a2a8 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4613      	mov	r3, r2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	4413      	add	r3, r2
 800a29c:	00db      	lsls	r3, r3, #3
 800a29e:	440b      	add	r3, r1
 800a2a0:	335c      	adds	r3, #92	; 0x5c
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	701a      	strb	r2, [r3, #0]
 800a2a6:	e0d9      	b.n	800a45c <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800a2a8:	6879      	ldr	r1, [r7, #4]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	00db      	lsls	r3, r3, #3
 800a2b4:	440b      	add	r3, r1
 800a2b6:	335d      	adds	r3, #93	; 0x5d
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	2b05      	cmp	r3, #5
 800a2bc:	d10a      	bne.n	800a2d4 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	00db      	lsls	r3, r3, #3
 800a2ca:	440b      	add	r3, r1
 800a2cc:	335c      	adds	r3, #92	; 0x5c
 800a2ce:	2205      	movs	r2, #5
 800a2d0:	701a      	strb	r2, [r3, #0]
 800a2d2:	e0c3      	b.n	800a45c <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	00db      	lsls	r3, r3, #3
 800a2e0:	440b      	add	r3, r1
 800a2e2:	335d      	adds	r3, #93	; 0x5d
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b06      	cmp	r3, #6
 800a2e8:	d00a      	beq.n	800a300 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800a2ea:	6879      	ldr	r1, [r7, #4]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	00db      	lsls	r3, r3, #3
 800a2f6:	440b      	add	r3, r1
 800a2f8:	335d      	adds	r3, #93	; 0x5d
 800a2fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800a2fc:	2b08      	cmp	r3, #8
 800a2fe:	d156      	bne.n	800a3ae <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	440b      	add	r3, r1
 800a30e:	3358      	adds	r3, #88	; 0x58
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	1c59      	adds	r1, r3, #1
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	4613      	mov	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	4403      	add	r3, r0
 800a322:	3358      	adds	r3, #88	; 0x58
 800a324:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	00db      	lsls	r3, r3, #3
 800a332:	440b      	add	r3, r1
 800a334:	3358      	adds	r3, #88	; 0x58
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b03      	cmp	r3, #3
 800a33a:	d914      	bls.n	800a366 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800a33c:	6879      	ldr	r1, [r7, #4]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	440b      	add	r3, r1
 800a34a:	3358      	adds	r3, #88	; 0x58
 800a34c:	2200      	movs	r2, #0
 800a34e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a350:	6879      	ldr	r1, [r7, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	440b      	add	r3, r1
 800a35e:	335c      	adds	r3, #92	; 0x5c
 800a360:	2204      	movs	r2, #4
 800a362:	701a      	strb	r2, [r3, #0]
 800a364:	e009      	b.n	800a37a <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	440b      	add	r3, r1
 800a374:	335c      	adds	r3, #92	; 0x5c
 800a376:	2202      	movs	r2, #2
 800a378:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	4413      	add	r3, r2
 800a382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a390:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a398:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	6013      	str	r3, [r2, #0]
 800a3ac:	e056      	b.n	800a45c <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800a3ae:	6879      	ldr	r1, [r7, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	440b      	add	r3, r1
 800a3bc:	335d      	adds	r3, #93	; 0x5d
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d123      	bne.n	800a40c <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a3c4:	6879      	ldr	r1, [r7, #4]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	440b      	add	r3, r1
 800a3d2:	335c      	adds	r3, #92	; 0x5c
 800a3d4:	2202      	movs	r2, #2
 800a3d6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3ee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3f6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a404:	461a      	mov	r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	e027      	b.n	800a45c <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	440b      	add	r3, r1
 800a41a:	335d      	adds	r3, #93	; 0x5d
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	2b07      	cmp	r3, #7
 800a420:	d11c      	bne.n	800a45c <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	00db      	lsls	r3, r3, #3
 800a42e:	440b      	add	r3, r1
 800a430:	3358      	adds	r3, #88	; 0x58
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	1c59      	adds	r1, r3, #1
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	4613      	mov	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4413      	add	r3, r2
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	4403      	add	r3, r0
 800a444:	3358      	adds	r3, #88	; 0x58
 800a446:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	4613      	mov	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	440b      	add	r3, r1
 800a456:	335c      	adds	r3, #92	; 0x5c
 800a458:	2204      	movs	r2, #4
 800a45a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	4413      	add	r3, r2
 800a464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a468:	461a      	mov	r2, r3
 800a46a:	2302      	movs	r3, #2
 800a46c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	b2d8      	uxtb	r0, r3
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	4613      	mov	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	00db      	lsls	r3, r3, #3
 800a47e:	440b      	add	r3, r1
 800a480:	335c      	adds	r3, #92	; 0x5c
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	4601      	mov	r1, r0
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff fc94 	bl	8009db6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800a48e:	e0d1      	b.n	800a634 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a2:	2b80      	cmp	r3, #128	; 0x80
 800a4a4:	d13e      	bne.n	800a524 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4c0:	f043 0302 	orr.w	r3, r3, #2
 800a4c4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800a4c6:	6879      	ldr	r1, [r7, #4]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	4413      	add	r3, r2
 800a4d0:	00db      	lsls	r3, r3, #3
 800a4d2:	440b      	add	r3, r1
 800a4d4:	3358      	adds	r3, #88	; 0x58
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	1c59      	adds	r1, r3, #1
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4413      	add	r3, r2
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	4403      	add	r3, r0
 800a4e8:	3358      	adds	r3, #88	; 0x58
 800a4ea:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	00db      	lsls	r3, r3, #3
 800a4f8:	440b      	add	r3, r1
 800a4fa:	335d      	adds	r3, #93	; 0x5d
 800a4fc:	2206      	movs	r2, #6
 800a4fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	b2d2      	uxtb	r2, r2
 800a508:	4611      	mov	r1, r2
 800a50a:	4618      	mov	r0, r3
 800a50c:	f004 fab2 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	4413      	add	r3, r2
 800a518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a51c:	461a      	mov	r2, r3
 800a51e:	2380      	movs	r3, #128	; 0x80
 800a520:	6093      	str	r3, [r2, #8]
}
 800a522:	e087      	b.n	800a634 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f003 0310 	and.w	r3, r3, #16
 800a536:	2b10      	cmp	r3, #16
 800a538:	d17c      	bne.n	800a634 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800a53a:	6879      	ldr	r1, [r7, #4]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	4613      	mov	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	00db      	lsls	r3, r3, #3
 800a546:	440b      	add	r3, r1
 800a548:	333f      	adds	r3, #63	; 0x3f
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d122      	bne.n	800a596 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a550:	6879      	ldr	r1, [r7, #4]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	440b      	add	r3, r1
 800a55e:	3358      	adds	r3, #88	; 0x58
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	0151      	lsls	r1, r2, #5
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	440a      	add	r2, r1
 800a57a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a57e:	f043 0302 	orr.w	r3, r3, #2
 800a582:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	4611      	mov	r1, r2
 800a58e:	4618      	mov	r0, r3
 800a590:	f004 fa70 	bl	800ea74 <USB_HC_Halt>
 800a594:	e045      	b.n	800a622 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	440b      	add	r3, r1
 800a5a4:	333f      	adds	r3, #63	; 0x3f
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00a      	beq.n	800a5c2 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800a5ac:	6879      	ldr	r1, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	440b      	add	r3, r1
 800a5ba:	333f      	adds	r3, #63	; 0x3f
 800a5bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d12f      	bne.n	800a622 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	440b      	add	r3, r1
 800a5d0:	3358      	adds	r3, #88	; 0x58
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d121      	bne.n	800a622 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	440b      	add	r3, r1
 800a5ec:	335d      	adds	r3, #93	; 0x5d
 800a5ee:	2203      	movs	r2, #3
 800a5f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	440a      	add	r2, r1
 800a608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a60c:	f043 0302 	orr.w	r3, r3, #2
 800a610:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	b2d2      	uxtb	r2, r2
 800a61a:	4611      	mov	r1, r2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f004 fa29 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a62e:	461a      	mov	r2, r3
 800a630:	2310      	movs	r3, #16
 800a632:	6093      	str	r3, [r2, #8]
}
 800a634:	bf00      	nop
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800a652:	78fb      	ldrb	r3, [r7, #3]
 800a654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d119      	bne.n	800a6a0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	4413      	add	r3, r2
 800a674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a678:	461a      	mov	r2, r3
 800a67a:	2304      	movs	r3, #4
 800a67c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	4413      	add	r3, r2
 800a686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	0151      	lsls	r1, r2, #5
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	440a      	add	r2, r1
 800a694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a698:	f043 0302 	orr.w	r3, r3, #2
 800a69c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800a69e:	e33e      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b20      	cmp	r3, #32
 800a6b4:	d141      	bne.n	800a73a <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	440b      	add	r3, r1
 800a6d6:	333d      	adds	r3, #61	; 0x3d
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	f040 831f 	bne.w	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	440b      	add	r3, r1
 800a6ee:	333d      	adds	r3, #61	; 0x3d
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	440b      	add	r3, r1
 800a702:	335c      	adds	r3, #92	; 0x5c
 800a704:	2202      	movs	r2, #2
 800a706:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	0151      	lsls	r1, r2, #5
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	440a      	add	r2, r1
 800a71e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a722:	f043 0302 	orr.w	r3, r3, #2
 800a726:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f004 f99e 	bl	800ea74 <USB_HC_Halt>
}
 800a738:	e2f1      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	4413      	add	r3, r2
 800a742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74c:	2b40      	cmp	r3, #64	; 0x40
 800a74e:	d13f      	bne.n	800a7d0 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	4613      	mov	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	440b      	add	r3, r1
 800a75e:	335d      	adds	r3, #93	; 0x5d
 800a760:	2204      	movs	r2, #4
 800a762:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800a764:	6879      	ldr	r1, [r7, #4]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4613      	mov	r3, r2
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	4413      	add	r3, r2
 800a76e:	00db      	lsls	r3, r3, #3
 800a770:	440b      	add	r3, r1
 800a772:	333d      	adds	r3, #61	; 0x3d
 800a774:	2201      	movs	r2, #1
 800a776:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	4613      	mov	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	440b      	add	r3, r1
 800a786:	3358      	adds	r3, #88	; 0x58
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4413      	add	r3, r2
 800a794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	0151      	lsls	r1, r2, #5
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	440a      	add	r2, r1
 800a7a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7a6:	f043 0302 	orr.w	r3, r3, #2
 800a7aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	b2d2      	uxtb	r2, r2
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f004 f95c 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	2340      	movs	r3, #64	; 0x40
 800a7cc:	6093      	str	r3, [r2, #8]
}
 800a7ce:	e2a6      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e6:	d122      	bne.n	800a82e <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	0151      	lsls	r1, r2, #5
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	440a      	add	r2, r1
 800a7fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a802:	f043 0302 	orr.w	r3, r3, #2
 800a806:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	b2d2      	uxtb	r2, r2
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f004 f92e 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a824:	461a      	mov	r2, r3
 800a826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a82a:	6093      	str	r3, [r2, #8]
}
 800a82c:	e277      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	015a      	lsls	r2, r3, #5
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	4413      	add	r3, r2
 800a836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	2b01      	cmp	r3, #1
 800a842:	d135      	bne.n	800a8b0 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a844:	6879      	ldr	r1, [r7, #4]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	440b      	add	r3, r1
 800a852:	3358      	adds	r3, #88	; 0x58
 800a854:	2200      	movs	r2, #0
 800a856:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a872:	f043 0302 	orr.w	r3, r3, #2
 800a876:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	b2d2      	uxtb	r2, r2
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f004 f8f6 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a894:	461a      	mov	r2, r3
 800a896:	2301      	movs	r3, #1
 800a898:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800a89a:	6879      	ldr	r1, [r7, #4]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	440b      	add	r3, r1
 800a8a8:	335d      	adds	r3, #93	; 0x5d
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	701a      	strb	r2, [r3, #0]
}
 800a8ae:	e236      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f003 0308 	and.w	r3, r3, #8
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d12b      	bne.n	800a91e <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	2308      	movs	r3, #8
 800a8d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	0151      	lsls	r1, r2, #5
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	440a      	add	r2, r1
 800a8ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8f2:	f043 0302 	orr.w	r3, r3, #2
 800a8f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	4611      	mov	r1, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f004 f8b6 	bl	800ea74 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	00db      	lsls	r3, r3, #3
 800a914:	440b      	add	r3, r1
 800a916:	335d      	adds	r3, #93	; 0x5d
 800a918:	2205      	movs	r2, #5
 800a91a:	701a      	strb	r2, [r3, #0]
}
 800a91c:	e1ff      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	4413      	add	r3, r2
 800a926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f003 0310 	and.w	r3, r3, #16
 800a930:	2b10      	cmp	r3, #16
 800a932:	d155      	bne.n	800a9e0 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	4613      	mov	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	440b      	add	r3, r1
 800a942:	3358      	adds	r3, #88	; 0x58
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	00db      	lsls	r3, r3, #3
 800a954:	440b      	add	r3, r1
 800a956:	335d      	adds	r3, #93	; 0x5d
 800a958:	2203      	movs	r2, #3
 800a95a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800a95c:	6879      	ldr	r1, [r7, #4]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	00db      	lsls	r3, r3, #3
 800a968:	440b      	add	r3, r1
 800a96a:	333d      	adds	r3, #61	; 0x3d
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d114      	bne.n	800a99c <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4613      	mov	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	440b      	add	r3, r1
 800a980:	333c      	adds	r3, #60	; 0x3c
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d109      	bne.n	800a99c <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800a988:	6879      	ldr	r1, [r7, #4]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	4613      	mov	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	00db      	lsls	r3, r3, #3
 800a994:	440b      	add	r3, r1
 800a996:	333d      	adds	r3, #61	; 0x3d
 800a998:	2201      	movs	r2, #1
 800a99a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	015a      	lsls	r2, r3, #5
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	0151      	lsls	r1, r2, #5
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	440a      	add	r2, r1
 800a9b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9b6:	f043 0302 	orr.w	r3, r3, #2
 800a9ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	b2d2      	uxtb	r2, r2
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f004 f854 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d8:	461a      	mov	r2, r3
 800a9da:	2310      	movs	r3, #16
 800a9dc:	6093      	str	r3, [r2, #8]
}
 800a9de:	e19e      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f2:	2b80      	cmp	r3, #128	; 0x80
 800a9f4:	d12b      	bne.n	800aa4e <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	015a      	lsls	r2, r3, #5
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	0151      	lsls	r1, r2, #5
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	440a      	add	r2, r1
 800aa0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa10:	f043 0302 	orr.w	r3, r3, #2
 800aa14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	b2d2      	uxtb	r2, r2
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f004 f827 	bl	800ea74 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	00db      	lsls	r3, r3, #3
 800aa32:	440b      	add	r3, r1
 800aa34:	335d      	adds	r3, #93	; 0x5d
 800aa36:	2206      	movs	r2, #6
 800aa38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa46:	461a      	mov	r2, r3
 800aa48:	2380      	movs	r3, #128	; 0x80
 800aa4a:	6093      	str	r3, [r2, #8]
}
 800aa4c:	e167      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa64:	d135      	bne.n	800aad2 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	0151      	lsls	r1, r2, #5
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	440a      	add	r2, r1
 800aa7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa80:	f043 0302 	orr.w	r3, r3, #2
 800aa84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	b2d2      	uxtb	r2, r2
 800aa8e:	4611      	mov	r1, r2
 800aa90:	4618      	mov	r0, r3
 800aa92:	f003 ffef 	bl	800ea74 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2310      	movs	r3, #16
 800aaa6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab4:	461a      	mov	r2, r3
 800aab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	440b      	add	r3, r1
 800aaca:	335d      	adds	r3, #93	; 0x5d
 800aacc:	2208      	movs	r2, #8
 800aace:	701a      	strb	r2, [r3, #0]
}
 800aad0:	e125      	b.n	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	f003 0302 	and.w	r3, r3, #2
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	f040 811a 	bne.w	800ad1e <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	0151      	lsls	r1, r2, #5
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	440a      	add	r2, r1
 800ab00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab04:	f023 0302 	bic.w	r3, r3, #2
 800ab08:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	009b      	lsls	r3, r3, #2
 800ab12:	4413      	add	r3, r2
 800ab14:	00db      	lsls	r3, r3, #3
 800ab16:	440b      	add	r3, r1
 800ab18:	335d      	adds	r3, #93	; 0x5d
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d137      	bne.n	800ab90 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	00db      	lsls	r3, r3, #3
 800ab2c:	440b      	add	r3, r1
 800ab2e:	335c      	adds	r3, #92	; 0x5c
 800ab30:	2201      	movs	r2, #1
 800ab32:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ab34:	6879      	ldr	r1, [r7, #4]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	440b      	add	r3, r1
 800ab42:	333f      	adds	r3, #63	; 0x3f
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d00b      	beq.n	800ab62 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	440b      	add	r3, r1
 800ab58:	333f      	adds	r3, #63	; 0x3f
 800ab5a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	f040 80c5 	bne.w	800acec <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	4613      	mov	r3, r2
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	00db      	lsls	r3, r3, #3
 800ab6e:	440b      	add	r3, r1
 800ab70:	3351      	adds	r3, #81	; 0x51
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	f083 0301 	eor.w	r3, r3, #1
 800ab78:	b2d8      	uxtb	r0, r3
 800ab7a:	6879      	ldr	r1, [r7, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	440b      	add	r3, r1
 800ab88:	3351      	adds	r3, #81	; 0x51
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	701a      	strb	r2, [r3, #0]
 800ab8e:	e0ad      	b.n	800acec <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800ab90:	6879      	ldr	r1, [r7, #4]
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	440b      	add	r3, r1
 800ab9e:	335d      	adds	r3, #93	; 0x5d
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	2b03      	cmp	r3, #3
 800aba4:	d10a      	bne.n	800abbc <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4613      	mov	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4413      	add	r3, r2
 800abb0:	00db      	lsls	r3, r3, #3
 800abb2:	440b      	add	r3, r1
 800abb4:	335c      	adds	r3, #92	; 0x5c
 800abb6:	2202      	movs	r2, #2
 800abb8:	701a      	strb	r2, [r3, #0]
 800abba:	e097      	b.n	800acec <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4613      	mov	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	00db      	lsls	r3, r3, #3
 800abc8:	440b      	add	r3, r1
 800abca:	335d      	adds	r3, #93	; 0x5d
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d10a      	bne.n	800abe8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	440b      	add	r3, r1
 800abe0:	335c      	adds	r3, #92	; 0x5c
 800abe2:	2202      	movs	r2, #2
 800abe4:	701a      	strb	r2, [r3, #0]
 800abe6:	e081      	b.n	800acec <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	68fa      	ldr	r2, [r7, #12]
 800abec:	4613      	mov	r3, r2
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	4413      	add	r3, r2
 800abf2:	00db      	lsls	r3, r3, #3
 800abf4:	440b      	add	r3, r1
 800abf6:	335d      	adds	r3, #93	; 0x5d
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	d10a      	bne.n	800ac14 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800abfe:	6879      	ldr	r1, [r7, #4]
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4613      	mov	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	4413      	add	r3, r2
 800ac08:	00db      	lsls	r3, r3, #3
 800ac0a:	440b      	add	r3, r1
 800ac0c:	335c      	adds	r3, #92	; 0x5c
 800ac0e:	2205      	movs	r2, #5
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	e06b      	b.n	800acec <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ac14:	6879      	ldr	r1, [r7, #4]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	4413      	add	r3, r2
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	440b      	add	r3, r1
 800ac22:	335d      	adds	r3, #93	; 0x5d
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b06      	cmp	r3, #6
 800ac28:	d00a      	beq.n	800ac40 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	440b      	add	r3, r1
 800ac38:	335d      	adds	r3, #93	; 0x5d
 800ac3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d155      	bne.n	800acec <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	4613      	mov	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	00db      	lsls	r3, r3, #3
 800ac4c:	440b      	add	r3, r1
 800ac4e:	3358      	adds	r3, #88	; 0x58
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	1c59      	adds	r1, r3, #1
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	4403      	add	r3, r0
 800ac62:	3358      	adds	r3, #88	; 0x58
 800ac64:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	440b      	add	r3, r1
 800ac74:	3358      	adds	r3, #88	; 0x58
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d914      	bls.n	800aca6 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800ac7c:	6879      	ldr	r1, [r7, #4]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	440b      	add	r3, r1
 800ac8a:	3358      	adds	r3, #88	; 0x58
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	4613      	mov	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	440b      	add	r3, r1
 800ac9e:	335c      	adds	r3, #92	; 0x5c
 800aca0:	2204      	movs	r2, #4
 800aca2:	701a      	strb	r2, [r3, #0]
 800aca4:	e009      	b.n	800acba <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800aca6:	6879      	ldr	r1, [r7, #4]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	00db      	lsls	r3, r3, #3
 800acb2:	440b      	add	r3, r1
 800acb4:	335c      	adds	r3, #92	; 0x5c
 800acb6:	2202      	movs	r2, #2
 800acb8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800acd0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acd8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	4413      	add	r3, r2
 800ace2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace6:	461a      	mov	r2, r3
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf8:	461a      	mov	r2, r3
 800acfa:	2302      	movs	r3, #2
 800acfc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	b2d8      	uxtb	r0, r3
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	440b      	add	r3, r1
 800ad10:	335c      	adds	r3, #92	; 0x5c
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	4601      	mov	r1, r0
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff f84c 	bl	8009db6 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800ad1e:	bf00      	nop
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08a      	sub	sp, #40	; 0x28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	0c5b      	lsrs	r3, r3, #17
 800ad4e:	f003 030f 	and.w	r3, r3, #15
 800ad52:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	091b      	lsrs	r3, r3, #4
 800ad58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad5c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d003      	beq.n	800ad6c <HCD_RXQLVL_IRQHandler+0x44>
 800ad64:	2b05      	cmp	r3, #5
 800ad66:	f000 8082 	beq.w	800ae6e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800ad6a:	e083      	b.n	800ae74 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d07f      	beq.n	800ae72 <HCD_RXQLVL_IRQHandler+0x14a>
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	4613      	mov	r3, r2
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	4413      	add	r3, r2
 800ad7c:	00db      	lsls	r3, r3, #3
 800ad7e:	440b      	add	r3, r1
 800ad80:	3344      	adds	r3, #68	; 0x44
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d074      	beq.n	800ae72 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	440b      	add	r3, r1
 800ad9a:	3344      	adds	r3, #68	; 0x44
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	b292      	uxth	r2, r2
 800ada2:	4619      	mov	r1, r3
 800ada4:	f003 fca8 	bl	800e6f8 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	69ba      	ldr	r2, [r7, #24]
 800adac:	4613      	mov	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	00db      	lsls	r3, r3, #3
 800adb4:	440b      	add	r3, r1
 800adb6:	3344      	adds	r3, #68	; 0x44
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	18d1      	adds	r1, r2, r3
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	00db      	lsls	r3, r3, #3
 800adca:	4403      	add	r3, r0
 800adcc:	3344      	adds	r3, #68	; 0x44
 800adce:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	4613      	mov	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	4413      	add	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	440b      	add	r3, r1
 800adde:	334c      	adds	r3, #76	; 0x4c
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	18d1      	adds	r1, r2, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	4403      	add	r3, r0
 800adf4:	334c      	adds	r3, #76	; 0x4c
 800adf6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae04:	691a      	ldr	r2, [r3, #16]
 800ae06:	4b1d      	ldr	r3, [pc, #116]	; (800ae7c <HCD_RXQLVL_IRQHandler+0x154>)
 800ae08:	4013      	ands	r3, r2
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d031      	beq.n	800ae72 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae24:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae2c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	015a      	lsls	r2, r3, #5
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	4413      	add	r3, r2
 800ae36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	00db      	lsls	r3, r3, #3
 800ae4c:	440b      	add	r3, r1
 800ae4e:	3350      	adds	r3, #80	; 0x50
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	f083 0301 	eor.w	r3, r3, #1
 800ae56:	b2d8      	uxtb	r0, r3
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	440b      	add	r3, r1
 800ae66:	3350      	adds	r3, #80	; 0x50
 800ae68:	4602      	mov	r2, r0
 800ae6a:	701a      	strb	r2, [r3, #0]
      break;
 800ae6c:	e001      	b.n	800ae72 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800ae6e:	bf00      	nop
 800ae70:	e000      	b.n	800ae74 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800ae72:	bf00      	nop
  }
}
 800ae74:	bf00      	nop
 800ae76:	3728      	adds	r7, #40	; 0x28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	1ff80000 	.word	0x1ff80000

0800ae80 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b086      	sub	sp, #24
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aeac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f003 0302 	and.w	r3, r3, #2
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d10b      	bne.n	800aed0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d102      	bne.n	800aec8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7fe ff4f 	bl	8009d66 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f043 0302 	orr.w	r3, r3, #2
 800aece:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f003 0308 	and.w	r3, r3, #8
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	d132      	bne.n	800af40 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f043 0308 	orr.w	r3, r3, #8
 800aee0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d126      	bne.n	800af3a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d113      	bne.n	800af1c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800aefa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aefe:	d106      	bne.n	800af0e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2102      	movs	r1, #2
 800af06:	4618      	mov	r0, r3
 800af08:	f003 fd30 	bl	800e96c <USB_InitFSLSPClkSel>
 800af0c:	e011      	b.n	800af32 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2101      	movs	r1, #1
 800af14:	4618      	mov	r0, r3
 800af16:	f003 fd29 	bl	800e96c <USB_InitFSLSPClkSel>
 800af1a:	e00a      	b.n	800af32 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68db      	ldr	r3, [r3, #12]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d106      	bne.n	800af32 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af2a:	461a      	mov	r2, r3
 800af2c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800af30:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7fe ff2b 	bl	8009d8e <HAL_HCD_PortEnabled_Callback>
 800af38:	e002      	b.n	800af40 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f7fe ff31 	bl	8009da2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	2b20      	cmp	r3, #32
 800af48:	d103      	bne.n	800af52 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	f043 0320 	orr.w	r3, r3, #32
 800af50:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800af58:	461a      	mov	r2, r3
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	6013      	str	r3, [r2, #0]
}
 800af5e:	bf00      	nop
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d101      	bne.n	800af7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e11f      	b.n	800b1ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d106      	bne.n	800af94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f7fb fa74 	bl	800647c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2224      	movs	r2, #36	; 0x24
 800af98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f022 0201 	bic.w	r2, r2, #1
 800afaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800afcc:	f001 f982 	bl	800c2d4 <HAL_RCC_GetPCLK1Freq>
 800afd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	4a7b      	ldr	r2, [pc, #492]	; (800b1c4 <HAL_I2C_Init+0x25c>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d807      	bhi.n	800afec <HAL_I2C_Init+0x84>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4a7a      	ldr	r2, [pc, #488]	; (800b1c8 <HAL_I2C_Init+0x260>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	bf94      	ite	ls
 800afe4:	2301      	movls	r3, #1
 800afe6:	2300      	movhi	r3, #0
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	e006      	b.n	800affa <HAL_I2C_Init+0x92>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	4a77      	ldr	r2, [pc, #476]	; (800b1cc <HAL_I2C_Init+0x264>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	bf94      	ite	ls
 800aff4:	2301      	movls	r3, #1
 800aff6:	2300      	movhi	r3, #0
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e0db      	b.n	800b1ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	4a72      	ldr	r2, [pc, #456]	; (800b1d0 <HAL_I2C_Init+0x268>)
 800b006:	fba2 2303 	umull	r2, r3, r2, r3
 800b00a:	0c9b      	lsrs	r3, r3, #18
 800b00c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6a1b      	ldr	r3, [r3, #32]
 800b028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	4a64      	ldr	r2, [pc, #400]	; (800b1c4 <HAL_I2C_Init+0x25c>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d802      	bhi.n	800b03c <HAL_I2C_Init+0xd4>
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	3301      	adds	r3, #1
 800b03a:	e009      	b.n	800b050 <HAL_I2C_Init+0xe8>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b042:	fb02 f303 	mul.w	r3, r2, r3
 800b046:	4a63      	ldr	r2, [pc, #396]	; (800b1d4 <HAL_I2C_Init+0x26c>)
 800b048:	fba2 2303 	umull	r2, r3, r2, r3
 800b04c:	099b      	lsrs	r3, r3, #6
 800b04e:	3301      	adds	r3, #1
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6812      	ldr	r2, [r2, #0]
 800b054:	430b      	orrs	r3, r1
 800b056:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	69db      	ldr	r3, [r3, #28]
 800b05e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b062:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	4956      	ldr	r1, [pc, #344]	; (800b1c4 <HAL_I2C_Init+0x25c>)
 800b06c:	428b      	cmp	r3, r1
 800b06e:	d80d      	bhi.n	800b08c <HAL_I2C_Init+0x124>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	1e59      	subs	r1, r3, #1
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b07e:	3301      	adds	r3, #1
 800b080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b084:	2b04      	cmp	r3, #4
 800b086:	bf38      	it	cc
 800b088:	2304      	movcc	r3, #4
 800b08a:	e04f      	b.n	800b12c <HAL_I2C_Init+0x1c4>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d111      	bne.n	800b0b8 <HAL_I2C_Init+0x150>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	1e58      	subs	r0, r3, #1
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6859      	ldr	r1, [r3, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	005b      	lsls	r3, r3, #1
 800b0a0:	440b      	add	r3, r1
 800b0a2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2301      	moveq	r3, #1
 800b0b2:	2300      	movne	r3, #0
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	e012      	b.n	800b0de <HAL_I2C_Init+0x176>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	1e58      	subs	r0, r3, #1
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6859      	ldr	r1, [r3, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	440b      	add	r3, r1
 800b0c6:	0099      	lsls	r1, r3, #2
 800b0c8:	440b      	add	r3, r1
 800b0ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bf0c      	ite	eq
 800b0d8:	2301      	moveq	r3, #1
 800b0da:	2300      	movne	r3, #0
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <HAL_I2C_Init+0x17e>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e022      	b.n	800b12c <HAL_I2C_Init+0x1c4>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10e      	bne.n	800b10c <HAL_I2C_Init+0x1a4>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	1e58      	subs	r0, r3, #1
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6859      	ldr	r1, [r3, #4]
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	005b      	lsls	r3, r3, #1
 800b0fa:	440b      	add	r3, r1
 800b0fc:	fbb0 f3f3 	udiv	r3, r0, r3
 800b100:	3301      	adds	r3, #1
 800b102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b10a:	e00f      	b.n	800b12c <HAL_I2C_Init+0x1c4>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	1e58      	subs	r0, r3, #1
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6859      	ldr	r1, [r3, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	440b      	add	r3, r1
 800b11a:	0099      	lsls	r1, r3, #2
 800b11c:	440b      	add	r3, r1
 800b11e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b122:	3301      	adds	r3, #1
 800b124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	6809      	ldr	r1, [r1, #0]
 800b130:	4313      	orrs	r3, r2
 800b132:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	69da      	ldr	r2, [r3, #28]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b15a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	6911      	ldr	r1, [r2, #16]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	68d2      	ldr	r2, [r2, #12]
 800b166:	4311      	orrs	r1, r2
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	6812      	ldr	r2, [r2, #0]
 800b16c:	430b      	orrs	r3, r1
 800b16e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	695a      	ldr	r2, [r3, #20]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	699b      	ldr	r3, [r3, #24]
 800b182:	431a      	orrs	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	430a      	orrs	r2, r1
 800b18a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f042 0201 	orr.w	r2, r2, #1
 800b19a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1b8:	2300      	movs	r3, #0
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	000186a0 	.word	0x000186a0
 800b1c8:	001e847f 	.word	0x001e847f
 800b1cc:	003d08ff 	.word	0x003d08ff
 800b1d0:	431bde83 	.word	0x431bde83
 800b1d4:	10624dd3 	.word	0x10624dd3

0800b1d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	d129      	bne.n	800b242 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2224      	movs	r2, #36	; 0x24
 800b1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f022 0201 	bic.w	r2, r2, #1
 800b204:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0210 	bic.w	r2, r2, #16
 800b214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f042 0201 	orr.w	r2, r2, #1
 800b234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2220      	movs	r2, #32
 800b23a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	e000      	b.n	800b244 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800b242:	2302      	movs	r3, #2
  }
}
 800b244:	4618      	mov	r0, r3
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b20      	cmp	r3, #32
 800b268:	d12a      	bne.n	800b2c0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2224      	movs	r2, #36	; 0x24
 800b26e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 0201 	bic.w	r2, r2, #1
 800b280:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800b28a:	89fb      	ldrh	r3, [r7, #14]
 800b28c:	f023 030f 	bic.w	r3, r3, #15
 800b290:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	b29a      	uxth	r2, r3
 800b296:	89fb      	ldrh	r3, [r7, #14]
 800b298:	4313      	orrs	r3, r2
 800b29a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	89fa      	ldrh	r2, [r7, #14]
 800b2a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f042 0201 	orr.w	r2, r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e000      	b.n	800b2c2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800b2c0:	2302      	movs	r3, #2
  }
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3714      	adds	r7, #20
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
	...

0800b2d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e0bf      	b.n	800b462 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7fb f92a 	bl	8006550 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2202      	movs	r2, #2
 800b300:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	699a      	ldr	r2, [r3, #24]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800b312:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6999      	ldr	r1, [r3, #24]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b328:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	691b      	ldr	r3, [r3, #16]
 800b32e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	430a      	orrs	r2, r1
 800b336:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	6899      	ldr	r1, [r3, #8]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	4b4a      	ldr	r3, [pc, #296]	; (800b46c <HAL_LTDC_Init+0x19c>)
 800b344:	400b      	ands	r3, r1
 800b346:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	695b      	ldr	r3, [r3, #20]
 800b34c:	041b      	lsls	r3, r3, #16
 800b34e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6899      	ldr	r1, [r3, #8]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	699a      	ldr	r2, [r3, #24]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	431a      	orrs	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	68d9      	ldr	r1, [r3, #12]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	4b3e      	ldr	r3, [pc, #248]	; (800b46c <HAL_LTDC_Init+0x19c>)
 800b372:	400b      	ands	r3, r1
 800b374:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	041b      	lsls	r3, r3, #16
 800b37c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68d9      	ldr	r1, [r3, #12]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a1a      	ldr	r2, [r3, #32]
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	431a      	orrs	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	430a      	orrs	r2, r1
 800b392:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6919      	ldr	r1, [r3, #16]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4b33      	ldr	r3, [pc, #204]	; (800b46c <HAL_LTDC_Init+0x19c>)
 800b3a0:	400b      	ands	r3, r1
 800b3a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a8:	041b      	lsls	r3, r3, #16
 800b3aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6919      	ldr	r1, [r3, #16]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6959      	ldr	r1, [r3, #20]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	4b27      	ldr	r3, [pc, #156]	; (800b46c <HAL_LTDC_Init+0x19c>)
 800b3ce:	400b      	ands	r3, r1
 800b3d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d6:	041b      	lsls	r3, r3, #16
 800b3d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6959      	ldr	r1, [r3, #20]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b3f6:	021b      	lsls	r3, r3, #8
 800b3f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b400:	041b      	lsls	r3, r3, #16
 800b402:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800b412:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800b426:	431a      	orrs	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	430a      	orrs	r2, r1
 800b42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f042 0206 	orr.w	r2, r2, #6
 800b43e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f042 0201 	orr.w	r2, r2, #1
 800b44e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	f000f800 	.word	0xf000f800

0800b470 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b486:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f003 0304 	and.w	r3, r3, #4
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d023      	beq.n	800b4da <HAL_LTDC_IRQHandler+0x6a>
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	f003 0304 	and.w	r3, r3, #4
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01e      	beq.n	800b4da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f022 0204 	bic.w	r2, r2, #4
 800b4aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2204      	movs	r2, #4
 800b4b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4ba:	f043 0201 	orr.w	r2, r3, #1
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2204      	movs	r2, #4
 800b4c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f86f 	bl	800b5b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f003 0302 	and.w	r3, r3, #2
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d023      	beq.n	800b52c <HAL_LTDC_IRQHandler+0xbc>
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f003 0302 	and.w	r3, r3, #2
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d01e      	beq.n	800b52c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f022 0202 	bic.w	r2, r2, #2
 800b4fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2202      	movs	r2, #2
 800b504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b50c:	f043 0202 	orr.w	r2, r3, #2
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2204      	movs	r2, #4
 800b51a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f846 	bl	800b5b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d01b      	beq.n	800b56e <HAL_LTDC_IRQHandler+0xfe>
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d016      	beq.n	800b56e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f022 0201 	bic.w	r2, r2, #1
 800b54e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2201      	movs	r2, #1
 800b556:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f82f 	bl	800b5cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f003 0308 	and.w	r3, r3, #8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01b      	beq.n	800b5b0 <HAL_LTDC_IRQHandler+0x140>
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f003 0308 	and.w	r3, r3, #8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d016      	beq.n	800b5b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f022 0208 	bic.w	r2, r2, #8
 800b590:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2208      	movs	r2, #8
 800b598:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f818 	bl	800b5e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800b5b0:	bf00      	nop
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b083      	sub	sp, #12
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b5f4:	b5b0      	push	{r4, r5, r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b606:	2b01      	cmp	r3, #1
 800b608:	d101      	bne.n	800b60e <HAL_LTDC_ConfigLayer+0x1a>
 800b60a:	2302      	movs	r3, #2
 800b60c:	e02c      	b.n	800b668 <HAL_LTDC_ConfigLayer+0x74>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2201      	movs	r2, #1
 800b612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2202      	movs	r2, #2
 800b61a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2134      	movs	r1, #52	; 0x34
 800b624:	fb01 f303 	mul.w	r3, r1, r3
 800b628:	4413      	add	r3, r2
 800b62a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	4614      	mov	r4, r2
 800b632:	461d      	mov	r5, r3
 800b634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b63a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b63c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b63e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f000 f871 	bl	800b730 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2201      	movs	r2, #1
 800b654:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b666:	2300      	movs	r3, #0
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bdb0      	pop	{r4, r5, r7, pc}

0800b670 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d101      	bne.n	800b686 <HAL_LTDC_EnableDither+0x16>
 800b682:	2302      	movs	r3, #2
 800b684:	e016      	b.n	800b6b4 <HAL_LTDC_EnableDither+0x44>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2202      	movs	r2, #2
 800b692:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800b696:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <HAL_LTDC_EnableDither+0x50>)
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	4a09      	ldr	r2, [pc, #36]	; (800b6c0 <HAL_LTDC_EnableDither+0x50>)
 800b69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6a0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	40016800 	.word	0x40016800

0800b6c4 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d101      	bne.n	800b6de <HAL_LTDC_SetAlpha+0x1a>
 800b6da:	2302      	movs	r3, #2
 800b6dc:	e024      	b.n	800b728 <HAL_LTDC_SetAlpha+0x64>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2234      	movs	r2, #52	; 0x34
 800b6f2:	fb02 f303 	mul.w	r3, r2, r3
 800b6f6:	3338      	adds	r3, #56	; 0x38
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	6979      	ldr	r1, [r7, #20]
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 f811 	bl	800b730 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	2201      	movs	r2, #1
 800b714:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800b730:	b480      	push	{r7}
 800b732:	b089      	sub	sp, #36	; 0x24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	685a      	ldr	r2, [r3, #4]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	0c1b      	lsrs	r3, r3, #16
 800b748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b74c:	4413      	add	r3, r2
 800b74e:	041b      	lsls	r3, r3, #16
 800b750:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	01db      	lsls	r3, r3, #7
 800b75c:	4413      	add	r3, r2
 800b75e:	3384      	adds	r3, #132	; 0x84
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	6812      	ldr	r2, [r2, #0]
 800b766:	4611      	mov	r1, r2
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	01d2      	lsls	r2, r2, #7
 800b76c:	440a      	add	r2, r1
 800b76e:	3284      	adds	r2, #132	; 0x84
 800b770:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b774:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	0c1b      	lsrs	r3, r3, #16
 800b782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b786:	4413      	add	r3, r2
 800b788:	1c5a      	adds	r2, r3, #1
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4619      	mov	r1, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	01db      	lsls	r3, r3, #7
 800b794:	440b      	add	r3, r1
 800b796:	3384      	adds	r3, #132	; 0x84
 800b798:	4619      	mov	r1, r3
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	68da      	ldr	r2, [r3, #12]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7ae:	4413      	add	r3, r2
 800b7b0:	041b      	lsls	r3, r3, #16
 800b7b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	01db      	lsls	r3, r3, #7
 800b7be:	4413      	add	r3, r2
 800b7c0:	3384      	adds	r3, #132	; 0x84
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	6812      	ldr	r2, [r2, #0]
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	01d2      	lsls	r2, r2, #7
 800b7ce:	440a      	add	r2, r1
 800b7d0:	3284      	adds	r2, #132	; 0x84
 800b7d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b7d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	689a      	ldr	r2, [r3, #8]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7e6:	4413      	add	r3, r2
 800b7e8:	1c5a      	adds	r2, r3, #1
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	01db      	lsls	r3, r3, #7
 800b7f4:	440b      	add	r3, r1
 800b7f6:	3384      	adds	r3, #132	; 0x84
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	01db      	lsls	r3, r3, #7
 800b80a:	4413      	add	r3, r2
 800b80c:	3384      	adds	r3, #132	; 0x84
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	6812      	ldr	r2, [r2, #0]
 800b814:	4611      	mov	r1, r2
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	01d2      	lsls	r2, r2, #7
 800b81a:	440a      	add	r2, r1
 800b81c:	3284      	adds	r2, #132	; 0x84
 800b81e:	f023 0307 	bic.w	r3, r3, #7
 800b822:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	461a      	mov	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	01db      	lsls	r3, r3, #7
 800b82e:	4413      	add	r3, r2
 800b830:	3384      	adds	r3, #132	; 0x84
 800b832:	461a      	mov	r2, r3
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b840:	021b      	lsls	r3, r3, #8
 800b842:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b84a:	041b      	lsls	r3, r3, #16
 800b84c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	061b      	lsls	r3, r3, #24
 800b854:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	01db      	lsls	r3, r3, #7
 800b860:	4413      	add	r3, r2
 800b862:	3384      	adds	r3, #132	; 0x84
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	01db      	lsls	r3, r3, #7
 800b870:	4413      	add	r3, r2
 800b872:	3384      	adds	r3, #132	; 0x84
 800b874:	461a      	mov	r2, r3
 800b876:	2300      	movs	r3, #0
 800b878:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b880:	461a      	mov	r2, r3
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	431a      	orrs	r2, r3
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	431a      	orrs	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4619      	mov	r1, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	01db      	lsls	r3, r3, #7
 800b894:	440b      	add	r3, r1
 800b896:	3384      	adds	r3, #132	; 0x84
 800b898:	4619      	mov	r1, r3
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	01db      	lsls	r3, r3, #7
 800b8aa:	4413      	add	r3, r2
 800b8ac:	3384      	adds	r3, #132	; 0x84
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	01d2      	lsls	r2, r2, #7
 800b8ba:	440a      	add	r2, r1
 800b8bc:	3284      	adds	r2, #132	; 0x84
 800b8be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b8c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	01db      	lsls	r3, r3, #7
 800b8ce:	4413      	add	r3, r2
 800b8d0:	3384      	adds	r3, #132	; 0x84
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	695b      	ldr	r3, [r3, #20]
 800b8d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	01db      	lsls	r3, r3, #7
 800b8e4:	4413      	add	r3, r2
 800b8e6:	3384      	adds	r3, #132	; 0x84
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	4611      	mov	r1, r2
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	01d2      	lsls	r2, r2, #7
 800b8f4:	440a      	add	r2, r1
 800b8f6:	3284      	adds	r2, #132	; 0x84
 800b8f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b8fc:	f023 0307 	bic.w	r3, r3, #7
 800b900:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	69da      	ldr	r2, [r3, #28]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	68f9      	ldr	r1, [r7, #12]
 800b90c:	6809      	ldr	r1, [r1, #0]
 800b90e:	4608      	mov	r0, r1
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	01c9      	lsls	r1, r1, #7
 800b914:	4401      	add	r1, r0
 800b916:	3184      	adds	r1, #132	; 0x84
 800b918:	4313      	orrs	r3, r2
 800b91a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	461a      	mov	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	01db      	lsls	r3, r3, #7
 800b926:	4413      	add	r3, r2
 800b928:	3384      	adds	r3, #132	; 0x84
 800b92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	461a      	mov	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	01db      	lsls	r3, r3, #7
 800b936:	4413      	add	r3, r2
 800b938:	3384      	adds	r3, #132	; 0x84
 800b93a:	461a      	mov	r2, r3
 800b93c:	2300      	movs	r3, #0
 800b93e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	461a      	mov	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	01db      	lsls	r3, r3, #7
 800b94a:	4413      	add	r3, r2
 800b94c:	3384      	adds	r3, #132	; 0x84
 800b94e:	461a      	mov	r2, r3
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d102      	bne.n	800b964 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800b95e:	2304      	movs	r3, #4
 800b960:	61fb      	str	r3, [r7, #28]
 800b962:	e01b      	b.n	800b99c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d102      	bne.n	800b972 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800b96c:	2303      	movs	r3, #3
 800b96e:	61fb      	str	r3, [r7, #28]
 800b970:	e014      	b.n	800b99c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	2b04      	cmp	r3, #4
 800b978:	d00b      	beq.n	800b992 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b97e:	2b02      	cmp	r3, #2
 800b980:	d007      	beq.n	800b992 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b986:	2b03      	cmp	r3, #3
 800b988:	d003      	beq.n	800b992 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b98e:	2b07      	cmp	r3, #7
 800b990:	d102      	bne.n	800b998 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800b992:	2302      	movs	r3, #2
 800b994:	61fb      	str	r3, [r7, #28]
 800b996:	e001      	b.n	800b99c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800b998:	2301      	movs	r3, #1
 800b99a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	01db      	lsls	r3, r3, #7
 800b9a6:	4413      	add	r3, r2
 800b9a8:	3384      	adds	r3, #132	; 0x84
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	6812      	ldr	r2, [r2, #0]
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	01d2      	lsls	r2, r2, #7
 800b9b6:	440a      	add	r2, r1
 800b9b8:	3284      	adds	r2, #132	; 0x84
 800b9ba:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800b9be:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c4:	69fa      	ldr	r2, [r7, #28]
 800b9c6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ca:	041a      	lsls	r2, r3, #16
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	6859      	ldr	r1, [r3, #4]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	1acb      	subs	r3, r1, r3
 800b9d6:	69f9      	ldr	r1, [r7, #28]
 800b9d8:	fb01 f303 	mul.w	r3, r1, r3
 800b9dc:	3303      	adds	r3, #3
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	6809      	ldr	r1, [r1, #0]
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	01c9      	lsls	r1, r1, #7
 800b9e8:	4401      	add	r1, r0
 800b9ea:	3184      	adds	r1, #132	; 0x84
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	01db      	lsls	r3, r3, #7
 800b9fa:	4413      	add	r3, r2
 800b9fc:	3384      	adds	r3, #132	; 0x84
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	6812      	ldr	r2, [r2, #0]
 800ba04:	4611      	mov	r1, r2
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	01d2      	lsls	r2, r2, #7
 800ba0a:	440a      	add	r2, r1
 800ba0c:	3284      	adds	r2, #132	; 0x84
 800ba0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba12:	f023 0307 	bic.w	r3, r3, #7
 800ba16:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	01db      	lsls	r3, r3, #7
 800ba22:	4413      	add	r3, r2
 800ba24:	3384      	adds	r3, #132	; 0x84
 800ba26:	461a      	mov	r2, r3
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	01db      	lsls	r3, r3, #7
 800ba38:	4413      	add	r3, r2
 800ba3a:	3384      	adds	r3, #132	; 0x84
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	6812      	ldr	r2, [r2, #0]
 800ba42:	4611      	mov	r1, r2
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	01d2      	lsls	r2, r2, #7
 800ba48:	440a      	add	r2, r1
 800ba4a:	3284      	adds	r2, #132	; 0x84
 800ba4c:	f043 0301 	orr.w	r3, r3, #1
 800ba50:	6013      	str	r3, [r2, #0]
}
 800ba52:	bf00      	nop
 800ba54:	3724      	adds	r7, #36	; 0x24
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
	...

0800ba60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d101      	bne.n	800ba72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e25b      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d075      	beq.n	800bb6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ba7e:	4ba3      	ldr	r3, [pc, #652]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f003 030c 	and.w	r3, r3, #12
 800ba86:	2b04      	cmp	r3, #4
 800ba88:	d00c      	beq.n	800baa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba8a:	4ba0      	ldr	r3, [pc, #640]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ba92:	2b08      	cmp	r3, #8
 800ba94:	d112      	bne.n	800babc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba96:	4b9d      	ldr	r3, [pc, #628]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baa2:	d10b      	bne.n	800babc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800baa4:	4b99      	ldr	r3, [pc, #612]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baac:	2b00      	cmp	r3, #0
 800baae:	d05b      	beq.n	800bb68 <HAL_RCC_OscConfig+0x108>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d157      	bne.n	800bb68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e236      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bac4:	d106      	bne.n	800bad4 <HAL_RCC_OscConfig+0x74>
 800bac6:	4b91      	ldr	r3, [pc, #580]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a90      	ldr	r2, [pc, #576]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bacc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bad0:	6013      	str	r3, [r2, #0]
 800bad2:	e01d      	b.n	800bb10 <HAL_RCC_OscConfig+0xb0>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800badc:	d10c      	bne.n	800baf8 <HAL_RCC_OscConfig+0x98>
 800bade:	4b8b      	ldr	r3, [pc, #556]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a8a      	ldr	r2, [pc, #552]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	4b88      	ldr	r3, [pc, #544]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a87      	ldr	r2, [pc, #540]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800baf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	e00b      	b.n	800bb10 <HAL_RCC_OscConfig+0xb0>
 800baf8:	4b84      	ldr	r3, [pc, #528]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a83      	ldr	r2, [pc, #524]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bafe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	4b81      	ldr	r3, [pc, #516]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a80      	ldr	r2, [pc, #512]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d013      	beq.n	800bb40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb18:	f7fc fe64 	bl	80087e4 <HAL_GetTick>
 800bb1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb1e:	e008      	b.n	800bb32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb20:	f7fc fe60 	bl	80087e4 <HAL_GetTick>
 800bb24:	4602      	mov	r2, r0
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	1ad3      	subs	r3, r2, r3
 800bb2a:	2b64      	cmp	r3, #100	; 0x64
 800bb2c:	d901      	bls.n	800bb32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	e1fb      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb32:	4b76      	ldr	r3, [pc, #472]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d0f0      	beq.n	800bb20 <HAL_RCC_OscConfig+0xc0>
 800bb3e:	e014      	b.n	800bb6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb40:	f7fc fe50 	bl	80087e4 <HAL_GetTick>
 800bb44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb46:	e008      	b.n	800bb5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bb48:	f7fc fe4c 	bl	80087e4 <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	2b64      	cmp	r3, #100	; 0x64
 800bb54:	d901      	bls.n	800bb5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	e1e7      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bb5a:	4b6c      	ldr	r3, [pc, #432]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1f0      	bne.n	800bb48 <HAL_RCC_OscConfig+0xe8>
 800bb66:	e000      	b.n	800bb6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0302 	and.w	r3, r3, #2
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d063      	beq.n	800bc3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bb76:	4b65      	ldr	r3, [pc, #404]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	f003 030c 	and.w	r3, r3, #12
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00b      	beq.n	800bb9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb82:	4b62      	ldr	r3, [pc, #392]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bb8a:	2b08      	cmp	r3, #8
 800bb8c:	d11c      	bne.n	800bbc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb8e:	4b5f      	ldr	r3, [pc, #380]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d116      	bne.n	800bbc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb9a:	4b5c      	ldr	r3, [pc, #368]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d005      	beq.n	800bbb2 <HAL_RCC_OscConfig+0x152>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d001      	beq.n	800bbb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e1bb      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbb2:	4b56      	ldr	r3, [pc, #344]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	00db      	lsls	r3, r3, #3
 800bbc0:	4952      	ldr	r1, [pc, #328]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbc6:	e03a      	b.n	800bc3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d020      	beq.n	800bc12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bbd0:	4b4f      	ldr	r3, [pc, #316]	; (800bd10 <HAL_RCC_OscConfig+0x2b0>)
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd6:	f7fc fe05 	bl	80087e4 <HAL_GetTick>
 800bbda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbdc:	e008      	b.n	800bbf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbde:	f7fc fe01 	bl	80087e4 <HAL_GetTick>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	1ad3      	subs	r3, r2, r3
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d901      	bls.n	800bbf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e19c      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bbf0:	4b46      	ldr	r3, [pc, #280]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0302 	and.w	r3, r3, #2
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0f0      	beq.n	800bbde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbfc:	4b43      	ldr	r3, [pc, #268]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	00db      	lsls	r3, r3, #3
 800bc0a:	4940      	ldr	r1, [pc, #256]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	600b      	str	r3, [r1, #0]
 800bc10:	e015      	b.n	800bc3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc12:	4b3f      	ldr	r3, [pc, #252]	; (800bd10 <HAL_RCC_OscConfig+0x2b0>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc18:	f7fc fde4 	bl	80087e4 <HAL_GetTick>
 800bc1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc1e:	e008      	b.n	800bc32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc20:	f7fc fde0 	bl	80087e4 <HAL_GetTick>
 800bc24:	4602      	mov	r2, r0
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d901      	bls.n	800bc32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e17b      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc32:	4b36      	ldr	r3, [pc, #216]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f003 0302 	and.w	r3, r3, #2
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1f0      	bne.n	800bc20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 0308 	and.w	r3, r3, #8
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d030      	beq.n	800bcac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d016      	beq.n	800bc80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc52:	4b30      	ldr	r3, [pc, #192]	; (800bd14 <HAL_RCC_OscConfig+0x2b4>)
 800bc54:	2201      	movs	r2, #1
 800bc56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc58:	f7fc fdc4 	bl	80087e4 <HAL_GetTick>
 800bc5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc5e:	e008      	b.n	800bc72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc60:	f7fc fdc0 	bl	80087e4 <HAL_GetTick>
 800bc64:	4602      	mov	r2, r0
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d901      	bls.n	800bc72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	e15b      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc72:	4b26      	ldr	r3, [pc, #152]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bc74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc76:	f003 0302 	and.w	r3, r3, #2
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0f0      	beq.n	800bc60 <HAL_RCC_OscConfig+0x200>
 800bc7e:	e015      	b.n	800bcac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc80:	4b24      	ldr	r3, [pc, #144]	; (800bd14 <HAL_RCC_OscConfig+0x2b4>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bc86:	f7fc fdad 	bl	80087e4 <HAL_GetTick>
 800bc8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc8c:	e008      	b.n	800bca0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc8e:	f7fc fda9 	bl	80087e4 <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d901      	bls.n	800bca0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e144      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bca0:	4b1a      	ldr	r3, [pc, #104]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bca4:	f003 0302 	and.w	r3, r3, #2
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1f0      	bne.n	800bc8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 80a0 	beq.w	800bdfa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bcbe:	4b13      	ldr	r3, [pc, #76]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10f      	bne.n	800bcea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bcca:	2300      	movs	r3, #0
 800bccc:	60bb      	str	r3, [r7, #8]
 800bcce:	4b0f      	ldr	r3, [pc, #60]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd2:	4a0e      	ldr	r2, [pc, #56]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bcd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcd8:	6413      	str	r3, [r2, #64]	; 0x40
 800bcda:	4b0c      	ldr	r3, [pc, #48]	; (800bd0c <HAL_RCC_OscConfig+0x2ac>)
 800bcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bce2:	60bb      	str	r3, [r7, #8]
 800bce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bce6:	2301      	movs	r3, #1
 800bce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcea:	4b0b      	ldr	r3, [pc, #44]	; (800bd18 <HAL_RCC_OscConfig+0x2b8>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d121      	bne.n	800bd3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bcf6:	4b08      	ldr	r3, [pc, #32]	; (800bd18 <HAL_RCC_OscConfig+0x2b8>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a07      	ldr	r2, [pc, #28]	; (800bd18 <HAL_RCC_OscConfig+0x2b8>)
 800bcfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd02:	f7fc fd6f 	bl	80087e4 <HAL_GetTick>
 800bd06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd08:	e011      	b.n	800bd2e <HAL_RCC_OscConfig+0x2ce>
 800bd0a:	bf00      	nop
 800bd0c:	40023800 	.word	0x40023800
 800bd10:	42470000 	.word	0x42470000
 800bd14:	42470e80 	.word	0x42470e80
 800bd18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd1c:	f7fc fd62 	bl	80087e4 <HAL_GetTick>
 800bd20:	4602      	mov	r2, r0
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	2b02      	cmp	r3, #2
 800bd28:	d901      	bls.n	800bd2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e0fd      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd2e:	4b81      	ldr	r3, [pc, #516]	; (800bf34 <HAL_RCC_OscConfig+0x4d4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0f0      	beq.n	800bd1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	689b      	ldr	r3, [r3, #8]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d106      	bne.n	800bd50 <HAL_RCC_OscConfig+0x2f0>
 800bd42:	4b7d      	ldr	r3, [pc, #500]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd46:	4a7c      	ldr	r2, [pc, #496]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd48:	f043 0301 	orr.w	r3, r3, #1
 800bd4c:	6713      	str	r3, [r2, #112]	; 0x70
 800bd4e:	e01c      	b.n	800bd8a <HAL_RCC_OscConfig+0x32a>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	2b05      	cmp	r3, #5
 800bd56:	d10c      	bne.n	800bd72 <HAL_RCC_OscConfig+0x312>
 800bd58:	4b77      	ldr	r3, [pc, #476]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd5c:	4a76      	ldr	r2, [pc, #472]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd5e:	f043 0304 	orr.w	r3, r3, #4
 800bd62:	6713      	str	r3, [r2, #112]	; 0x70
 800bd64:	4b74      	ldr	r3, [pc, #464]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd68:	4a73      	ldr	r2, [pc, #460]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd6a:	f043 0301 	orr.w	r3, r3, #1
 800bd6e:	6713      	str	r3, [r2, #112]	; 0x70
 800bd70:	e00b      	b.n	800bd8a <HAL_RCC_OscConfig+0x32a>
 800bd72:	4b71      	ldr	r3, [pc, #452]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd76:	4a70      	ldr	r2, [pc, #448]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd78:	f023 0301 	bic.w	r3, r3, #1
 800bd7c:	6713      	str	r3, [r2, #112]	; 0x70
 800bd7e:	4b6e      	ldr	r3, [pc, #440]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd82:	4a6d      	ldr	r2, [pc, #436]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bd84:	f023 0304 	bic.w	r3, r3, #4
 800bd88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d015      	beq.n	800bdbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd92:	f7fc fd27 	bl	80087e4 <HAL_GetTick>
 800bd96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd98:	e00a      	b.n	800bdb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd9a:	f7fc fd23 	bl	80087e4 <HAL_GetTick>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	1ad3      	subs	r3, r2, r3
 800bda4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d901      	bls.n	800bdb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800bdac:	2303      	movs	r3, #3
 800bdae:	e0bc      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdb0:	4b61      	ldr	r3, [pc, #388]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0ee      	beq.n	800bd9a <HAL_RCC_OscConfig+0x33a>
 800bdbc:	e014      	b.n	800bde8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdbe:	f7fc fd11 	bl	80087e4 <HAL_GetTick>
 800bdc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bdc4:	e00a      	b.n	800bddc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdc6:	f7fc fd0d 	bl	80087e4 <HAL_GetTick>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d901      	bls.n	800bddc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	e0a6      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bddc:	4b56      	ldr	r3, [pc, #344]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bdde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde0:	f003 0302 	and.w	r3, r3, #2
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1ee      	bne.n	800bdc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d105      	bne.n	800bdfa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdee:	4b52      	ldr	r3, [pc, #328]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	4a51      	ldr	r2, [pc, #324]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bdf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdf8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f000 8092 	beq.w	800bf28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800be04:	4b4c      	ldr	r3, [pc, #304]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	f003 030c 	and.w	r3, r3, #12
 800be0c:	2b08      	cmp	r3, #8
 800be0e:	d05c      	beq.n	800beca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	2b02      	cmp	r3, #2
 800be16:	d141      	bne.n	800be9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be18:	4b48      	ldr	r3, [pc, #288]	; (800bf3c <HAL_RCC_OscConfig+0x4dc>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be1e:	f7fc fce1 	bl	80087e4 <HAL_GetTick>
 800be22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be24:	e008      	b.n	800be38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be26:	f7fc fcdd 	bl	80087e4 <HAL_GetTick>
 800be2a:	4602      	mov	r2, r0
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	2b02      	cmp	r3, #2
 800be32:	d901      	bls.n	800be38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800be34:	2303      	movs	r3, #3
 800be36:	e078      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be38:	4b3f      	ldr	r3, [pc, #252]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1f0      	bne.n	800be26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	69da      	ldr	r2, [r3, #28]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a1b      	ldr	r3, [r3, #32]
 800be4c:	431a      	orrs	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be52:	019b      	lsls	r3, r3, #6
 800be54:	431a      	orrs	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be5a:	085b      	lsrs	r3, r3, #1
 800be5c:	3b01      	subs	r3, #1
 800be5e:	041b      	lsls	r3, r3, #16
 800be60:	431a      	orrs	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	061b      	lsls	r3, r3, #24
 800be68:	4933      	ldr	r1, [pc, #204]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be6e:	4b33      	ldr	r3, [pc, #204]	; (800bf3c <HAL_RCC_OscConfig+0x4dc>)
 800be70:	2201      	movs	r2, #1
 800be72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be74:	f7fc fcb6 	bl	80087e4 <HAL_GetTick>
 800be78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be7a:	e008      	b.n	800be8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be7c:	f7fc fcb2 	bl	80087e4 <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b02      	cmp	r3, #2
 800be88:	d901      	bls.n	800be8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e04d      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be8e:	4b2a      	ldr	r3, [pc, #168]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0f0      	beq.n	800be7c <HAL_RCC_OscConfig+0x41c>
 800be9a:	e045      	b.n	800bf28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be9c:	4b27      	ldr	r3, [pc, #156]	; (800bf3c <HAL_RCC_OscConfig+0x4dc>)
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bea2:	f7fc fc9f 	bl	80087e4 <HAL_GetTick>
 800bea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bea8:	e008      	b.n	800bebc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800beaa:	f7fc fc9b 	bl	80087e4 <HAL_GetTick>
 800beae:	4602      	mov	r2, r0
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	1ad3      	subs	r3, r2, r3
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	d901      	bls.n	800bebc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800beb8:	2303      	movs	r3, #3
 800beba:	e036      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bebc:	4b1e      	ldr	r3, [pc, #120]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d1f0      	bne.n	800beaa <HAL_RCC_OscConfig+0x44a>
 800bec8:	e02e      	b.n	800bf28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	699b      	ldr	r3, [r3, #24]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d101      	bne.n	800bed6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	e029      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bed6:	4b18      	ldr	r3, [pc, #96]	; (800bf38 <HAL_RCC_OscConfig+0x4d8>)
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d11c      	bne.n	800bf24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d115      	bne.n	800bf24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800befe:	4013      	ands	r3, r2
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d10d      	bne.n	800bf24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d106      	bne.n	800bf24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d001      	beq.n	800bf28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e000      	b.n	800bf2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	40007000 	.word	0x40007000
 800bf38:	40023800 	.word	0x40023800
 800bf3c:	42470060 	.word	0x42470060

0800bf40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	e0cc      	b.n	800c0ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf54:	4b68      	ldr	r3, [pc, #416]	; (800c0f8 <HAL_RCC_ClockConfig+0x1b8>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d90c      	bls.n	800bf7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf62:	4b65      	ldr	r3, [pc, #404]	; (800c0f8 <HAL_RCC_ClockConfig+0x1b8>)
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	b2d2      	uxtb	r2, r2
 800bf68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf6a:	4b63      	ldr	r3, [pc, #396]	; (800c0f8 <HAL_RCC_ClockConfig+0x1b8>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 030f 	and.w	r3, r3, #15
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d001      	beq.n	800bf7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e0b8      	b.n	800c0ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f003 0302 	and.w	r3, r3, #2
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d020      	beq.n	800bfca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d005      	beq.n	800bfa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf94:	4b59      	ldr	r3, [pc, #356]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	4a58      	ldr	r2, [pc, #352]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800bf9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bf9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f003 0308 	and.w	r3, r3, #8
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d005      	beq.n	800bfb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bfac:	4b53      	ldr	r3, [pc, #332]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	4a52      	ldr	r2, [pc, #328]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800bfb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bfb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfb8:	4b50      	ldr	r3, [pc, #320]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	494d      	ldr	r1, [pc, #308]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 0301 	and.w	r3, r3, #1
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d044      	beq.n	800c060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d107      	bne.n	800bfee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfde:	4b47      	ldr	r3, [pc, #284]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d119      	bne.n	800c01e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e07f      	b.n	800c0ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d003      	beq.n	800bffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bffa:	2b03      	cmp	r3, #3
 800bffc:	d107      	bne.n	800c00e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bffe:	4b3f      	ldr	r3, [pc, #252]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d109      	bne.n	800c01e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e06f      	b.n	800c0ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c00e:	4b3b      	ldr	r3, [pc, #236]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0302 	and.w	r3, r3, #2
 800c016:	2b00      	cmp	r3, #0
 800c018:	d101      	bne.n	800c01e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e067      	b.n	800c0ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c01e:	4b37      	ldr	r3, [pc, #220]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f023 0203 	bic.w	r2, r3, #3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	4934      	ldr	r1, [pc, #208]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c02c:	4313      	orrs	r3, r2
 800c02e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c030:	f7fc fbd8 	bl	80087e4 <HAL_GetTick>
 800c034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c036:	e00a      	b.n	800c04e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c038:	f7fc fbd4 	bl	80087e4 <HAL_GetTick>
 800c03c:	4602      	mov	r2, r0
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	f241 3288 	movw	r2, #5000	; 0x1388
 800c046:	4293      	cmp	r3, r2
 800c048:	d901      	bls.n	800c04e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c04a:	2303      	movs	r3, #3
 800c04c:	e04f      	b.n	800c0ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c04e:	4b2b      	ldr	r3, [pc, #172]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f003 020c 	and.w	r2, r3, #12
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d1eb      	bne.n	800c038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c060:	4b25      	ldr	r3, [pc, #148]	; (800c0f8 <HAL_RCC_ClockConfig+0x1b8>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 030f 	and.w	r3, r3, #15
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d20c      	bcs.n	800c088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c06e:	4b22      	ldr	r3, [pc, #136]	; (800c0f8 <HAL_RCC_ClockConfig+0x1b8>)
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	b2d2      	uxtb	r2, r2
 800c074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c076:	4b20      	ldr	r3, [pc, #128]	; (800c0f8 <HAL_RCC_ClockConfig+0x1b8>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 030f 	and.w	r3, r3, #15
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	429a      	cmp	r2, r3
 800c082:	d001      	beq.n	800c088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e032      	b.n	800c0ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b00      	cmp	r3, #0
 800c092:	d008      	beq.n	800c0a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c094:	4b19      	ldr	r3, [pc, #100]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	4916      	ldr	r1, [pc, #88]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0308 	and.w	r3, r3, #8
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d009      	beq.n	800c0c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c0b2:	4b12      	ldr	r3, [pc, #72]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	490e      	ldr	r1, [pc, #56]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c0c6:	f000 f821 	bl	800c10c <HAL_RCC_GetSysClockFreq>
 800c0ca:	4601      	mov	r1, r0
 800c0cc:	4b0b      	ldr	r3, [pc, #44]	; (800c0fc <HAL_RCC_ClockConfig+0x1bc>)
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	091b      	lsrs	r3, r3, #4
 800c0d2:	f003 030f 	and.w	r3, r3, #15
 800c0d6:	4a0a      	ldr	r2, [pc, #40]	; (800c100 <HAL_RCC_ClockConfig+0x1c0>)
 800c0d8:	5cd3      	ldrb	r3, [r2, r3]
 800c0da:	fa21 f303 	lsr.w	r3, r1, r3
 800c0de:	4a09      	ldr	r2, [pc, #36]	; (800c104 <HAL_RCC_ClockConfig+0x1c4>)
 800c0e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c0e2:	4b09      	ldr	r3, [pc, #36]	; (800c108 <HAL_RCC_ClockConfig+0x1c8>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fa fcfc 	bl	8006ae4 <HAL_InitTick>

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	40023c00 	.word	0x40023c00
 800c0fc:	40023800 	.word	0x40023800
 800c100:	080128d8 	.word	0x080128d8
 800c104:	20000000 	.word	0x20000000
 800c108:	20000044 	.word	0x20000044

0800c10c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	607b      	str	r3, [r7, #4]
 800c116:	2300      	movs	r3, #0
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	2300      	movs	r3, #0
 800c11c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c122:	4b63      	ldr	r3, [pc, #396]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	f003 030c 	and.w	r3, r3, #12
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	d007      	beq.n	800c13e <HAL_RCC_GetSysClockFreq+0x32>
 800c12e:	2b08      	cmp	r3, #8
 800c130:	d008      	beq.n	800c144 <HAL_RCC_GetSysClockFreq+0x38>
 800c132:	2b00      	cmp	r3, #0
 800c134:	f040 80b4 	bne.w	800c2a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c138:	4b5e      	ldr	r3, [pc, #376]	; (800c2b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c13a:	60bb      	str	r3, [r7, #8]
       break;
 800c13c:	e0b3      	b.n	800c2a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c13e:	4b5e      	ldr	r3, [pc, #376]	; (800c2b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800c140:	60bb      	str	r3, [r7, #8]
      break;
 800c142:	e0b0      	b.n	800c2a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c144:	4b5a      	ldr	r3, [pc, #360]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c14c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c14e:	4b58      	ldr	r3, [pc, #352]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c156:	2b00      	cmp	r3, #0
 800c158:	d04a      	beq.n	800c1f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c15a:	4b55      	ldr	r3, [pc, #340]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	099b      	lsrs	r3, r3, #6
 800c160:	f04f 0400 	mov.w	r4, #0
 800c164:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c168:	f04f 0200 	mov.w	r2, #0
 800c16c:	ea03 0501 	and.w	r5, r3, r1
 800c170:	ea04 0602 	and.w	r6, r4, r2
 800c174:	4629      	mov	r1, r5
 800c176:	4632      	mov	r2, r6
 800c178:	f04f 0300 	mov.w	r3, #0
 800c17c:	f04f 0400 	mov.w	r4, #0
 800c180:	0154      	lsls	r4, r2, #5
 800c182:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c186:	014b      	lsls	r3, r1, #5
 800c188:	4619      	mov	r1, r3
 800c18a:	4622      	mov	r2, r4
 800c18c:	1b49      	subs	r1, r1, r5
 800c18e:	eb62 0206 	sbc.w	r2, r2, r6
 800c192:	f04f 0300 	mov.w	r3, #0
 800c196:	f04f 0400 	mov.w	r4, #0
 800c19a:	0194      	lsls	r4, r2, #6
 800c19c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c1a0:	018b      	lsls	r3, r1, #6
 800c1a2:	1a5b      	subs	r3, r3, r1
 800c1a4:	eb64 0402 	sbc.w	r4, r4, r2
 800c1a8:	f04f 0100 	mov.w	r1, #0
 800c1ac:	f04f 0200 	mov.w	r2, #0
 800c1b0:	00e2      	lsls	r2, r4, #3
 800c1b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c1b6:	00d9      	lsls	r1, r3, #3
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4614      	mov	r4, r2
 800c1bc:	195b      	adds	r3, r3, r5
 800c1be:	eb44 0406 	adc.w	r4, r4, r6
 800c1c2:	f04f 0100 	mov.w	r1, #0
 800c1c6:	f04f 0200 	mov.w	r2, #0
 800c1ca:	0262      	lsls	r2, r4, #9
 800c1cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800c1d0:	0259      	lsls	r1, r3, #9
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	4621      	mov	r1, r4
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f04f 0400 	mov.w	r4, #0
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	4623      	mov	r3, r4
 800c1e4:	f7f9 fd80 	bl	8005ce8 <__aeabi_uldivmod>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	60fb      	str	r3, [r7, #12]
 800c1ee:	e049      	b.n	800c284 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c1f0:	4b2f      	ldr	r3, [pc, #188]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	099b      	lsrs	r3, r3, #6
 800c1f6:	f04f 0400 	mov.w	r4, #0
 800c1fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c1fe:	f04f 0200 	mov.w	r2, #0
 800c202:	ea03 0501 	and.w	r5, r3, r1
 800c206:	ea04 0602 	and.w	r6, r4, r2
 800c20a:	4629      	mov	r1, r5
 800c20c:	4632      	mov	r2, r6
 800c20e:	f04f 0300 	mov.w	r3, #0
 800c212:	f04f 0400 	mov.w	r4, #0
 800c216:	0154      	lsls	r4, r2, #5
 800c218:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c21c:	014b      	lsls	r3, r1, #5
 800c21e:	4619      	mov	r1, r3
 800c220:	4622      	mov	r2, r4
 800c222:	1b49      	subs	r1, r1, r5
 800c224:	eb62 0206 	sbc.w	r2, r2, r6
 800c228:	f04f 0300 	mov.w	r3, #0
 800c22c:	f04f 0400 	mov.w	r4, #0
 800c230:	0194      	lsls	r4, r2, #6
 800c232:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c236:	018b      	lsls	r3, r1, #6
 800c238:	1a5b      	subs	r3, r3, r1
 800c23a:	eb64 0402 	sbc.w	r4, r4, r2
 800c23e:	f04f 0100 	mov.w	r1, #0
 800c242:	f04f 0200 	mov.w	r2, #0
 800c246:	00e2      	lsls	r2, r4, #3
 800c248:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c24c:	00d9      	lsls	r1, r3, #3
 800c24e:	460b      	mov	r3, r1
 800c250:	4614      	mov	r4, r2
 800c252:	195b      	adds	r3, r3, r5
 800c254:	eb44 0406 	adc.w	r4, r4, r6
 800c258:	f04f 0100 	mov.w	r1, #0
 800c25c:	f04f 0200 	mov.w	r2, #0
 800c260:	02a2      	lsls	r2, r4, #10
 800c262:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c266:	0299      	lsls	r1, r3, #10
 800c268:	460b      	mov	r3, r1
 800c26a:	4614      	mov	r4, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	4621      	mov	r1, r4
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f04f 0400 	mov.w	r4, #0
 800c276:	461a      	mov	r2, r3
 800c278:	4623      	mov	r3, r4
 800c27a:	f7f9 fd35 	bl	8005ce8 <__aeabi_uldivmod>
 800c27e:	4603      	mov	r3, r0
 800c280:	460c      	mov	r4, r1
 800c282:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c284:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	0c1b      	lsrs	r3, r3, #16
 800c28a:	f003 0303 	and.w	r3, r3, #3
 800c28e:	3301      	adds	r3, #1
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	fbb2 f3f3 	udiv	r3, r2, r3
 800c29c:	60bb      	str	r3, [r7, #8]
      break;
 800c29e:	e002      	b.n	800c2a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c2a0:	4b04      	ldr	r3, [pc, #16]	; (800c2b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c2a2:	60bb      	str	r3, [r7, #8]
      break;
 800c2a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c2a6:	68bb      	ldr	r3, [r7, #8]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b0:	40023800 	.word	0x40023800
 800c2b4:	00f42400 	.word	0x00f42400
 800c2b8:	007a1200 	.word	0x007a1200

0800c2bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c2c0:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	20000000 	.word	0x20000000

0800c2d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c2d8:	f7ff fff0 	bl	800c2bc <HAL_RCC_GetHCLKFreq>
 800c2dc:	4601      	mov	r1, r0
 800c2de:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	0a9b      	lsrs	r3, r3, #10
 800c2e4:	f003 0307 	and.w	r3, r3, #7
 800c2e8:	4a03      	ldr	r2, [pc, #12]	; (800c2f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2ea:	5cd3      	ldrb	r3, [r2, r3]
 800c2ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	40023800 	.word	0x40023800
 800c2f8:	080128e8 	.word	0x080128e8

0800c2fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c300:	f7ff ffdc 	bl	800c2bc <HAL_RCC_GetHCLKFreq>
 800c304:	4601      	mov	r1, r0
 800c306:	4b05      	ldr	r3, [pc, #20]	; (800c31c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	0b5b      	lsrs	r3, r3, #13
 800c30c:	f003 0307 	and.w	r3, r3, #7
 800c310:	4a03      	ldr	r2, [pc, #12]	; (800c320 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c312:	5cd3      	ldrb	r3, [r2, r3]
 800c314:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c318:	4618      	mov	r0, r3
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	40023800 	.word	0x40023800
 800c320:	080128e8 	.word	0x080128e8

0800c324 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	220f      	movs	r2, #15
 800c332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c334:	4b12      	ldr	r3, [pc, #72]	; (800c380 <HAL_RCC_GetClockConfig+0x5c>)
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	f003 0203 	and.w	r2, r3, #3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c340:	4b0f      	ldr	r3, [pc, #60]	; (800c380 <HAL_RCC_GetClockConfig+0x5c>)
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c34c:	4b0c      	ldr	r3, [pc, #48]	; (800c380 <HAL_RCC_GetClockConfig+0x5c>)
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c358:	4b09      	ldr	r3, [pc, #36]	; (800c380 <HAL_RCC_GetClockConfig+0x5c>)
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	08db      	lsrs	r3, r3, #3
 800c35e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c366:	4b07      	ldr	r3, [pc, #28]	; (800c384 <HAL_RCC_GetClockConfig+0x60>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 020f 	and.w	r2, r3, #15
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	601a      	str	r2, [r3, #0]
}
 800c372:	bf00      	nop
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop
 800c380:	40023800 	.word	0x40023800
 800c384:	40023c00 	.word	0x40023c00

0800c388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c390:	2300      	movs	r3, #0
 800c392:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c394:	2300      	movs	r3, #0
 800c396:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10b      	bne.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d105      	bne.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d075      	beq.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c3bc:	4bad      	ldr	r3, [pc, #692]	; (800c674 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3c2:	f7fc fa0f 	bl	80087e4 <HAL_GetTick>
 800c3c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3c8:	e008      	b.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3ca:	f7fc fa0b 	bl	80087e4 <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d901      	bls.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e18b      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c3dc:	4ba6      	ldr	r3, [pc, #664]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1f0      	bne.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f003 0301 	and.w	r3, r3, #1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d009      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	019a      	lsls	r2, r3, #6
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	071b      	lsls	r3, r3, #28
 800c400:	499d      	ldr	r1, [pc, #628]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c402:	4313      	orrs	r3, r2
 800c404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0302 	and.w	r3, r3, #2
 800c410:	2b00      	cmp	r3, #0
 800c412:	d01f      	beq.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c414:	4b98      	ldr	r3, [pc, #608]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c41a:	0f1b      	lsrs	r3, r3, #28
 800c41c:	f003 0307 	and.w	r3, r3, #7
 800c420:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	019a      	lsls	r2, r3, #6
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	061b      	lsls	r3, r3, #24
 800c42e:	431a      	orrs	r2, r3
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	071b      	lsls	r3, r3, #28
 800c434:	4990      	ldr	r1, [pc, #576]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c436:	4313      	orrs	r3, r2
 800c438:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c43c:	4b8e      	ldr	r3, [pc, #568]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c43e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c442:	f023 021f 	bic.w	r2, r3, #31
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	498a      	ldr	r1, [pc, #552]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00d      	beq.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	019a      	lsls	r2, r3, #6
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	061b      	lsls	r3, r3, #24
 800c46c:	431a      	orrs	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	071b      	lsls	r3, r3, #28
 800c474:	4980      	ldr	r1, [pc, #512]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c476:	4313      	orrs	r3, r2
 800c478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c47c:	4b7d      	ldr	r3, [pc, #500]	; (800c674 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800c47e:	2201      	movs	r2, #1
 800c480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c482:	f7fc f9af 	bl	80087e4 <HAL_GetTick>
 800c486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c488:	e008      	b.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c48a:	f7fc f9ab 	bl	80087e4 <HAL_GetTick>
 800c48e:	4602      	mov	r2, r0
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	2b02      	cmp	r3, #2
 800c496:	d901      	bls.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c498:	2303      	movs	r3, #3
 800c49a:	e12b      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c49c:	4b76      	ldr	r3, [pc, #472]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0f0      	beq.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d079      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c4c0:	4b6e      	ldr	r3, [pc, #440]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c4c6:	f7fc f98d 	bl	80087e4 <HAL_GetTick>
 800c4ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c4cc:	e008      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c4ce:	f7fc f989 	bl	80087e4 <HAL_GetTick>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d901      	bls.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	e109      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c4e0:	4b65      	ldr	r3, [pc, #404]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ec:	d0ef      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0304 	and.w	r3, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d020      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c4fa:	4b5f      	ldr	r3, [pc, #380]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c500:	0f1b      	lsrs	r3, r3, #28
 800c502:	f003 0307 	and.w	r3, r3, #7
 800c506:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	019a      	lsls	r2, r3, #6
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	061b      	lsls	r3, r3, #24
 800c514:	431a      	orrs	r2, r3
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	071b      	lsls	r3, r3, #28
 800c51a:	4957      	ldr	r1, [pc, #348]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c51c:	4313      	orrs	r3, r2
 800c51e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c522:	4b55      	ldr	r3, [pc, #340]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c528:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a1b      	ldr	r3, [r3, #32]
 800c530:	3b01      	subs	r3, #1
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	4950      	ldr	r1, [pc, #320]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c536:	4313      	orrs	r3, r2
 800c538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f003 0308 	and.w	r3, r3, #8
 800c544:	2b00      	cmp	r3, #0
 800c546:	d01e      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c548:	4b4b      	ldr	r3, [pc, #300]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c54e:	0e1b      	lsrs	r3, r3, #24
 800c550:	f003 030f 	and.w	r3, r3, #15
 800c554:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	019a      	lsls	r2, r3, #6
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	061b      	lsls	r3, r3, #24
 800c560:	431a      	orrs	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	071b      	lsls	r3, r3, #28
 800c568:	4943      	ldr	r1, [pc, #268]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c570:	4b41      	ldr	r3, [pc, #260]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c57e:	493e      	ldr	r1, [pc, #248]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c580:	4313      	orrs	r3, r2
 800c582:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c586:	4b3d      	ldr	r3, [pc, #244]	; (800c67c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c588:	2201      	movs	r2, #1
 800c58a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c58c:	f7fc f92a 	bl	80087e4 <HAL_GetTick>
 800c590:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c592:	e008      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c594:	f7fc f926 	bl	80087e4 <HAL_GetTick>
 800c598:	4602      	mov	r2, r0
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d901      	bls.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	e0a6      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5a6:	4b34      	ldr	r3, [pc, #208]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5b2:	d1ef      	bne.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0320 	and.w	r3, r3, #32
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f000 808d 	beq.w	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
 800c5c6:	4b2c      	ldr	r3, [pc, #176]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ca:	4a2b      	ldr	r2, [pc, #172]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d0:	6413      	str	r3, [r2, #64]	; 0x40
 800c5d2:	4b29      	ldr	r3, [pc, #164]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c5de:	4b28      	ldr	r3, [pc, #160]	; (800c680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a27      	ldr	r2, [pc, #156]	; (800c680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c5e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c5ea:	f7fc f8fb 	bl	80087e4 <HAL_GetTick>
 800c5ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c5f0:	e008      	b.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c5f2:	f7fc f8f7 	bl	80087e4 <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d901      	bls.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e077      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c604:	4b1e      	ldr	r3, [pc, #120]	; (800c680 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0f0      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c610:	4b19      	ldr	r3, [pc, #100]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c618:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d039      	beq.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d032      	beq.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c62e:	4b12      	ldr	r3, [pc, #72]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c636:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c638:	4b12      	ldr	r3, [pc, #72]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c63a:	2201      	movs	r2, #1
 800c63c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c63e:	4b11      	ldr	r3, [pc, #68]	; (800c684 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800c640:	2200      	movs	r2, #0
 800c642:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c644:	4a0c      	ldr	r2, [pc, #48]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c64a:	4b0b      	ldr	r3, [pc, #44]	; (800c678 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800c64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c64e:	f003 0301 	and.w	r3, r3, #1
 800c652:	2b01      	cmp	r3, #1
 800c654:	d11e      	bne.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c656:	f7fc f8c5 	bl	80087e4 <HAL_GetTick>
 800c65a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c65c:	e014      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c65e:	f7fc f8c1 	bl	80087e4 <HAL_GetTick>
 800c662:	4602      	mov	r2, r0
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d90b      	bls.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800c670:	2303      	movs	r3, #3
 800c672:	e03f      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800c674:	42470068 	.word	0x42470068
 800c678:	40023800 	.word	0x40023800
 800c67c:	42470070 	.word	0x42470070
 800c680:	40007000 	.word	0x40007000
 800c684:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c688:	4b1c      	ldr	r3, [pc, #112]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68c:	f003 0302 	and.w	r3, r3, #2
 800c690:	2b00      	cmp	r3, #0
 800c692:	d0e4      	beq.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c69c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6a0:	d10d      	bne.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0x336>
 800c6a2:	4b16      	ldr	r3, [pc, #88]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c6a4:	689b      	ldr	r3, [r3, #8]
 800c6a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c6b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6b6:	4911      	ldr	r1, [pc, #68]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	608b      	str	r3, [r1, #8]
 800c6bc:	e005      	b.n	800c6ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c6be:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	4a0e      	ldr	r2, [pc, #56]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c6c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c6c8:	6093      	str	r3, [r2, #8]
 800c6ca:	4b0c      	ldr	r3, [pc, #48]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c6cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6d6:	4909      	ldr	r1, [pc, #36]	; (800c6fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0310 	and.w	r3, r3, #16
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d004      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800c6ee:	4b04      	ldr	r3, [pc, #16]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800c6f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3718      	adds	r7, #24
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	40023800 	.word	0x40023800
 800c700:	424711e0 	.word	0x424711e0

0800c704 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	e025      	b.n	800c764 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b00      	cmp	r3, #0
 800c722:	d106      	bne.n	800c732 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7f9 fd4b 	bl	80061c8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2202      	movs	r2, #2
 800c736:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3304      	adds	r3, #4
 800c742:	4619      	mov	r1, r3
 800c744:	4610      	mov	r0, r2
 800c746:	f001 fdb1 	bl	800e2ac <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6818      	ldr	r0, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	461a      	mov	r2, r3
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	f001 fe1c 	bl	800e392 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b02      	cmp	r3, #2
 800c782:	d101      	bne.n	800c788 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800c784:	2302      	movs	r3, #2
 800c786:	e018      	b.n	800c7ba <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2202      	movs	r2, #2
 800c78c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	68b9      	ldr	r1, [r7, #8]
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 fe79 	bl	800e490 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d104      	bne.n	800c7b0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2205      	movs	r2, #5
 800c7aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800c7ae:	e003      	b.n	800c7b8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b082      	sub	sp, #8
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d101      	bne.n	800c7dc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c7d8:	2302      	movs	r3, #2
 800c7da:	e00e      	b.n	800c7fa <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2202      	movs	r2, #2
 800c7e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f001 fe8c 	bl	800e508 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c802:	b580      	push	{r7, lr}
 800c804:	b082      	sub	sp, #8
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e056      	b.n	800c8c2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c820:	b2db      	uxtb	r3, r3
 800c822:	2b00      	cmp	r3, #0
 800c824:	d106      	bne.n	800c834 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7fa f8ca 	bl	80069c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2202      	movs	r2, #2
 800c838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c84a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	431a      	orrs	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	691b      	ldr	r3, [r3, #16]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	431a      	orrs	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c870:	431a      	orrs	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	69db      	ldr	r3, [r3, #28]
 800c876:	431a      	orrs	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6a1b      	ldr	r3, [r3, #32]
 800c87c:	ea42 0103 	orr.w	r1, r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	430a      	orrs	r2, r1
 800c88a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	0c1b      	lsrs	r3, r3, #16
 800c892:	f003 0104 	and.w	r1, r3, #4
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	69da      	ldr	r2, [r3, #28]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c8b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3708      	adds	r7, #8
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b082      	sub	sp, #8
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e01a      	b.n	800c912 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2202      	movs	r2, #2
 800c8e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681a      	ldr	r2, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8f2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f7fa f8af 	bl	8006a58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b088      	sub	sp, #32
 800c91e:	af00      	add	r7, sp, #0
 800c920:	60f8      	str	r0, [r7, #12]
 800c922:	60b9      	str	r1, [r7, #8]
 800c924:	603b      	str	r3, [r7, #0]
 800c926:	4613      	mov	r3, r2
 800c928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c934:	2b01      	cmp	r3, #1
 800c936:	d101      	bne.n	800c93c <HAL_SPI_Transmit+0x22>
 800c938:	2302      	movs	r3, #2
 800c93a:	e11e      	b.n	800cb7a <HAL_SPI_Transmit+0x260>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c944:	f7fb ff4e 	bl	80087e4 <HAL_GetTick>
 800c948:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c94a:	88fb      	ldrh	r3, [r7, #6]
 800c94c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b01      	cmp	r3, #1
 800c958:	d002      	beq.n	800c960 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c95a:	2302      	movs	r3, #2
 800c95c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c95e:	e103      	b.n	800cb68 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <HAL_SPI_Transmit+0x52>
 800c966:	88fb      	ldrh	r3, [r7, #6]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d102      	bne.n	800c972 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c96c:	2301      	movs	r3, #1
 800c96e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c970:	e0fa      	b.n	800cb68 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2203      	movs	r2, #3
 800c976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2200      	movs	r2, #0
 800c97e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	88fa      	ldrh	r2, [r7, #6]
 800c98a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	88fa      	ldrh	r2, [r7, #6]
 800c990:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2200      	movs	r2, #0
 800c996:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2200      	movs	r2, #0
 800c99c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9b8:	d107      	bne.n	800c9ca <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d4:	2b40      	cmp	r3, #64	; 0x40
 800c9d6:	d007      	beq.n	800c9e8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9f0:	d14b      	bne.n	800ca8a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d002      	beq.n	800ca00 <HAL_SPI_Transmit+0xe6>
 800c9fa:	8afb      	ldrh	r3, [r7, #22]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d13e      	bne.n	800ca7e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca04:	881a      	ldrh	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca10:	1c9a      	adds	r2, r3, #2
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ca24:	e02b      	b.n	800ca7e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f003 0302 	and.w	r3, r3, #2
 800ca30:	2b02      	cmp	r3, #2
 800ca32:	d112      	bne.n	800ca5a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca38:	881a      	ldrh	r2, [r3, #0]
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca44:	1c9a      	adds	r2, r3, #2
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	3b01      	subs	r3, #1
 800ca52:	b29a      	uxth	r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	86da      	strh	r2, [r3, #54]	; 0x36
 800ca58:	e011      	b.n	800ca7e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca5a:	f7fb fec3 	bl	80087e4 <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d803      	bhi.n	800ca72 <HAL_SPI_Transmit+0x158>
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca70:	d102      	bne.n	800ca78 <HAL_SPI_Transmit+0x15e>
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d102      	bne.n	800ca7e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ca78:	2303      	movs	r3, #3
 800ca7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ca7c:	e074      	b.n	800cb68 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1ce      	bne.n	800ca26 <HAL_SPI_Transmit+0x10c>
 800ca88:	e04c      	b.n	800cb24 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d002      	beq.n	800ca98 <HAL_SPI_Transmit+0x17e>
 800ca92:	8afb      	ldrh	r3, [r7, #22]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d140      	bne.n	800cb1a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	330c      	adds	r3, #12
 800caa2:	7812      	ldrb	r2, [r2, #0]
 800caa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	3b01      	subs	r3, #1
 800cab8:	b29a      	uxth	r2, r3
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cabe:	e02c      	b.n	800cb1a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	f003 0302 	and.w	r3, r3, #2
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d113      	bne.n	800caf6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	330c      	adds	r3, #12
 800cad8:	7812      	ldrb	r2, [r2, #0]
 800cada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae0:	1c5a      	adds	r2, r3, #1
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800caea:	b29b      	uxth	r3, r3
 800caec:	3b01      	subs	r3, #1
 800caee:	b29a      	uxth	r2, r3
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	86da      	strh	r2, [r3, #54]	; 0x36
 800caf4:	e011      	b.n	800cb1a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800caf6:	f7fb fe75 	bl	80087e4 <HAL_GetTick>
 800cafa:	4602      	mov	r2, r0
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d803      	bhi.n	800cb0e <HAL_SPI_Transmit+0x1f4>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0c:	d102      	bne.n	800cb14 <HAL_SPI_Transmit+0x1fa>
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d102      	bne.n	800cb1a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800cb14:	2303      	movs	r3, #3
 800cb16:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cb18:	e026      	b.n	800cb68 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1cd      	bne.n	800cac0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cb24:	69ba      	ldr	r2, [r7, #24]
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 fbb3 	bl	800d294 <SPI_EndRxTxTransaction>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d002      	beq.n	800cb3a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2220      	movs	r2, #32
 800cb38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10a      	bne.n	800cb58 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cb42:	2300      	movs	r3, #0
 800cb44:	613b      	str	r3, [r7, #16]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	613b      	str	r3, [r7, #16]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	689b      	ldr	r3, [r3, #8]
 800cb54:	613b      	str	r3, [r7, #16]
 800cb56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	77fb      	strb	r3, [r7, #31]
 800cb64:	e000      	b.n	800cb68 <HAL_SPI_Transmit+0x24e>
  }

error:
 800cb66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cb78:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3720      	adds	r7, #32
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b088      	sub	sp, #32
 800cb86:	af02      	add	r7, sp, #8
 800cb88:	60f8      	str	r0, [r7, #12]
 800cb8a:	60b9      	str	r1, [r7, #8]
 800cb8c:	603b      	str	r3, [r7, #0]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb9e:	d112      	bne.n	800cbc6 <HAL_SPI_Receive+0x44>
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10e      	bne.n	800cbc6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2204      	movs	r2, #4
 800cbac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cbb0:	88fa      	ldrh	r2, [r7, #6]
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f000 f8e9 	bl	800cd94 <HAL_SPI_TransmitReceive>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	e0e2      	b.n	800cd8c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d101      	bne.n	800cbd4 <HAL_SPI_Receive+0x52>
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	e0db      	b.n	800cd8c <HAL_SPI_Receive+0x20a>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cbdc:	f7fb fe02 	bl	80087e4 <HAL_GetTick>
 800cbe0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d002      	beq.n	800cbf4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800cbee:	2302      	movs	r3, #2
 800cbf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cbf2:	e0c2      	b.n	800cd7a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d002      	beq.n	800cc00 <HAL_SPI_Receive+0x7e>
 800cbfa:	88fb      	ldrh	r3, [r7, #6]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d102      	bne.n	800cc06 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc04:	e0b9      	b.n	800cd7a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2204      	movs	r2, #4
 800cc0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	88fa      	ldrh	r2, [r7, #6]
 800cc1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	88fa      	ldrh	r2, [r7, #6]
 800cc24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2200      	movs	r2, #0
 800cc36:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2200      	movs	r2, #0
 800cc42:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc4c:	d107      	bne.n	800cc5e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cc5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc68:	2b40      	cmp	r3, #64	; 0x40
 800cc6a:	d007      	beq.n	800cc7c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d162      	bne.n	800cd4a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cc84:	e02e      	b.n	800cce4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	f003 0301 	and.w	r3, r3, #1
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d115      	bne.n	800ccc0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f103 020c 	add.w	r2, r3, #12
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca0:	7812      	ldrb	r2, [r2, #0]
 800cca2:	b2d2      	uxtb	r2, r2
 800cca4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccaa:	1c5a      	adds	r2, r3, #1
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ccbe:	e011      	b.n	800cce4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ccc0:	f7fb fd90 	bl	80087e4 <HAL_GetTick>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d803      	bhi.n	800ccd8 <HAL_SPI_Receive+0x156>
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccd6:	d102      	bne.n	800ccde <HAL_SPI_Receive+0x15c>
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d102      	bne.n	800cce4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ccde:	2303      	movs	r3, #3
 800cce0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cce2:	e04a      	b.n	800cd7a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1cb      	bne.n	800cc86 <HAL_SPI_Receive+0x104>
 800ccee:	e031      	b.n	800cd54 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d113      	bne.n	800cd26 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68da      	ldr	r2, [r3, #12]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd08:	b292      	uxth	r2, r2
 800cd0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd10:	1c9a      	adds	r2, r3, #2
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cd24:	e011      	b.n	800cd4a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd26:	f7fb fd5d 	bl	80087e4 <HAL_GetTick>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	683a      	ldr	r2, [r7, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d803      	bhi.n	800cd3e <HAL_SPI_Receive+0x1bc>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3c:	d102      	bne.n	800cd44 <HAL_SPI_Receive+0x1c2>
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d102      	bne.n	800cd4a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800cd44:	2303      	movs	r3, #3
 800cd46:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cd48:	e017      	b.n	800cd7a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1cd      	bne.n	800ccf0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cd54:	693a      	ldr	r2, [r7, #16]
 800cd56:	6839      	ldr	r1, [r7, #0]
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 fa35 	bl	800d1c8 <SPI_EndRxTransaction>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d002      	beq.n	800cd6a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2220      	movs	r2, #32
 800cd68:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	75fb      	strb	r3, [r7, #23]
 800cd76:	e000      	b.n	800cd7a <HAL_SPI_Receive+0x1f8>
  }

error :
 800cd78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b08c      	sub	sp, #48	; 0x30
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	60f8      	str	r0, [r7, #12]
 800cd9c:	60b9      	str	r1, [r7, #8]
 800cd9e:	607a      	str	r2, [r7, #4]
 800cda0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cda2:	2301      	movs	r3, #1
 800cda4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cda6:	2300      	movs	r3, #0
 800cda8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d101      	bne.n	800cdba <HAL_SPI_TransmitReceive+0x26>
 800cdb6:	2302      	movs	r3, #2
 800cdb8:	e18a      	b.n	800d0d0 <HAL_SPI_TransmitReceive+0x33c>
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cdc2:	f7fb fd0f 	bl	80087e4 <HAL_GetTick>
 800cdc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cdce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cdd8:	887b      	ldrh	r3, [r7, #2]
 800cdda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d00f      	beq.n	800ce04 <HAL_SPI_TransmitReceive+0x70>
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cdea:	d107      	bne.n	800cdfc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d103      	bne.n	800cdfc <HAL_SPI_TransmitReceive+0x68>
 800cdf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cdf8:	2b04      	cmp	r3, #4
 800cdfa:	d003      	beq.n	800ce04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ce02:	e15b      	b.n	800d0bc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d005      	beq.n	800ce16 <HAL_SPI_TransmitReceive+0x82>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d002      	beq.n	800ce16 <HAL_SPI_TransmitReceive+0x82>
 800ce10:	887b      	ldrh	r3, [r7, #2]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d103      	bne.n	800ce1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ce1c:	e14e      	b.n	800d0bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d003      	beq.n	800ce32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2205      	movs	r2, #5
 800ce2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	887a      	ldrh	r2, [r7, #2]
 800ce42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	887a      	ldrh	r2, [r7, #2]
 800ce48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	68ba      	ldr	r2, [r7, #8]
 800ce4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	887a      	ldrh	r2, [r7, #2]
 800ce54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	887a      	ldrh	r2, [r7, #2]
 800ce5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce72:	2b40      	cmp	r3, #64	; 0x40
 800ce74:	d007      	beq.n	800ce86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce8e:	d178      	bne.n	800cf82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <HAL_SPI_TransmitReceive+0x10a>
 800ce98:	8b7b      	ldrh	r3, [r7, #26]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d166      	bne.n	800cf6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea2:	881a      	ldrh	r2, [r3, #0]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceae:	1c9a      	adds	r2, r3, #2
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	3b01      	subs	r3, #1
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cec2:	e053      	b.n	800cf6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	f003 0302 	and.w	r3, r3, #2
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d11b      	bne.n	800cf0a <HAL_SPI_TransmitReceive+0x176>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d016      	beq.n	800cf0a <HAL_SPI_TransmitReceive+0x176>
 800cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d113      	bne.n	800cf0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cee6:	881a      	ldrh	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cef2:	1c9a      	adds	r2, r3, #2
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	3b01      	subs	r3, #1
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cf06:	2300      	movs	r3, #0
 800cf08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	f003 0301 	and.w	r3, r3, #1
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d119      	bne.n	800cf4c <HAL_SPI_TransmitReceive+0x1b8>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d014      	beq.n	800cf4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68da      	ldr	r2, [r3, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2c:	b292      	uxth	r2, r2
 800cf2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf34:	1c9a      	adds	r2, r3, #2
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	3b01      	subs	r3, #1
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cf4c:	f7fb fc4a 	bl	80087e4 <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d807      	bhi.n	800cf6c <HAL_SPI_TransmitReceive+0x1d8>
 800cf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf62:	d003      	beq.n	800cf6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800cf64:	2303      	movs	r3, #3
 800cf66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cf6a:	e0a7      	b.n	800d0bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1a6      	bne.n	800cec4 <HAL_SPI_TransmitReceive+0x130>
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1a1      	bne.n	800cec4 <HAL_SPI_TransmitReceive+0x130>
 800cf80:	e07c      	b.n	800d07c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <HAL_SPI_TransmitReceive+0x1fc>
 800cf8a:	8b7b      	ldrh	r3, [r7, #26]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d16b      	bne.n	800d068 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	330c      	adds	r3, #12
 800cf9a:	7812      	ldrb	r2, [r2, #0]
 800cf9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cfb6:	e057      	b.n	800d068 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	f003 0302 	and.w	r3, r3, #2
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	d11c      	bne.n	800d000 <HAL_SPI_TransmitReceive+0x26c>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d017      	beq.n	800d000 <HAL_SPI_TransmitReceive+0x26c>
 800cfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d114      	bne.n	800d000 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	330c      	adds	r3, #12
 800cfe0:	7812      	ldrb	r2, [r2, #0]
 800cfe2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	3b01      	subs	r3, #1
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cffc:	2300      	movs	r3, #0
 800cffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d119      	bne.n	800d042 <HAL_SPI_TransmitReceive+0x2ae>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d012:	b29b      	uxth	r3, r3
 800d014:	2b00      	cmp	r3, #0
 800d016:	d014      	beq.n	800d042 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68da      	ldr	r2, [r3, #12]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	b2d2      	uxtb	r2, r2
 800d024:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	1c5a      	adds	r2, r3, #1
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d034:	b29b      	uxth	r3, r3
 800d036:	3b01      	subs	r3, #1
 800d038:	b29a      	uxth	r2, r3
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d03e:	2301      	movs	r3, #1
 800d040:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d042:	f7fb fbcf 	bl	80087e4 <HAL_GetTick>
 800d046:	4602      	mov	r2, r0
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d04e:	429a      	cmp	r2, r3
 800d050:	d803      	bhi.n	800d05a <HAL_SPI_TransmitReceive+0x2c6>
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d058:	d102      	bne.n	800d060 <HAL_SPI_TransmitReceive+0x2cc>
 800d05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d103      	bne.n	800d068 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d060:	2303      	movs	r3, #3
 800d062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d066:	e029      	b.n	800d0bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1a2      	bne.n	800cfb8 <HAL_SPI_TransmitReceive+0x224>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d076:	b29b      	uxth	r3, r3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d19d      	bne.n	800cfb8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d07e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f000 f907 	bl	800d294 <SPI_EndRxTxTransaction>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d006      	beq.n	800d09a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2220      	movs	r2, #32
 800d096:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d098:	e010      	b.n	800d0bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10b      	bne.n	800d0ba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	617b      	str	r3, [r7, #20]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	e000      	b.n	800d0bc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d0ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d0cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3730      	adds	r7, #48	; 0x30
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0e6:	b2db      	uxtb	r3, r3
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	603b      	str	r3, [r7, #0]
 800d100:	4613      	mov	r3, r2
 800d102:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d104:	e04c      	b.n	800d1a0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10c:	d048      	beq.n	800d1a0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d10e:	f7fb fb69 	bl	80087e4 <HAL_GetTick>
 800d112:	4602      	mov	r2, r0
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d902      	bls.n	800d124 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d13d      	bne.n	800d1a0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d13c:	d111      	bne.n	800d162 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d146:	d004      	beq.n	800d152 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d150:	d107      	bne.n	800d162 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d16a:	d10f      	bne.n	800d18c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d17a:	601a      	str	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d18a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e00f      	b.n	800d1c0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	689a      	ldr	r2, [r3, #8]
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	bf0c      	ite	eq
 800d1b0:	2301      	moveq	r3, #1
 800d1b2:	2300      	movne	r3, #0
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d1a3      	bne.n	800d106 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af02      	add	r7, sp, #8
 800d1ce:	60f8      	str	r0, [r7, #12]
 800d1d0:	60b9      	str	r1, [r7, #8]
 800d1d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1dc:	d111      	bne.n	800d202 <SPI_EndRxTransaction+0x3a>
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1e6:	d004      	beq.n	800d1f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1f0:	d107      	bne.n	800d202 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d200:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d20a:	d12a      	bne.n	800d262 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d214:	d012      	beq.n	800d23c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	2200      	movs	r2, #0
 800d21e:	2180      	movs	r1, #128	; 0x80
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7ff ff67 	bl	800d0f4 <SPI_WaitFlagStateUntilTimeout>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d02d      	beq.n	800d288 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d230:	f043 0220 	orr.w	r2, r3, #32
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d238:	2303      	movs	r3, #3
 800d23a:	e026      	b.n	800d28a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	2200      	movs	r2, #0
 800d244:	2101      	movs	r1, #1
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7ff ff54 	bl	800d0f4 <SPI_WaitFlagStateUntilTimeout>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d01a      	beq.n	800d288 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d256:	f043 0220 	orr.w	r2, r3, #32
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d25e:	2303      	movs	r3, #3
 800d260:	e013      	b.n	800d28a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2200      	movs	r2, #0
 800d26a:	2101      	movs	r1, #1
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f7ff ff41 	bl	800d0f4 <SPI_WaitFlagStateUntilTimeout>
 800d272:	4603      	mov	r3, r0
 800d274:	2b00      	cmp	r3, #0
 800d276:	d007      	beq.n	800d288 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d27c:	f043 0220 	orr.w	r2, r3, #32
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d284:	2303      	movs	r3, #3
 800d286:	e000      	b.n	800d28a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d288:	2300      	movs	r3, #0
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3710      	adds	r7, #16
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}
	...

0800d294 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b088      	sub	sp, #32
 800d298:	af02      	add	r7, sp, #8
 800d29a:	60f8      	str	r0, [r7, #12]
 800d29c:	60b9      	str	r1, [r7, #8]
 800d29e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d2a0:	4b1b      	ldr	r3, [pc, #108]	; (800d310 <SPI_EndRxTxTransaction+0x7c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a1b      	ldr	r2, [pc, #108]	; (800d314 <SPI_EndRxTxTransaction+0x80>)
 800d2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2aa:	0d5b      	lsrs	r3, r3, #21
 800d2ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d2b0:	fb02 f303 	mul.w	r3, r2, r3
 800d2b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d2be:	d112      	bne.n	800d2e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	2180      	movs	r1, #128	; 0x80
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7ff ff12 	bl	800d0f4 <SPI_WaitFlagStateUntilTimeout>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d016      	beq.n	800d304 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2da:	f043 0220 	orr.w	r2, r3, #32
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d2e2:	2303      	movs	r3, #3
 800d2e4:	e00f      	b.n	800d306 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00a      	beq.n	800d302 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2fc:	2b80      	cmp	r3, #128	; 0x80
 800d2fe:	d0f2      	beq.n	800d2e6 <SPI_EndRxTxTransaction+0x52>
 800d300:	e000      	b.n	800d304 <SPI_EndRxTxTransaction+0x70>
        break;
 800d302:	bf00      	nop
  }

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	20000000 	.word	0x20000000
 800d314:	165e9f81 	.word	0x165e9f81

0800d318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	e01d      	b.n	800d366 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d106      	bne.n	800d344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7f9 fce0 	bl	8006d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2202      	movs	r2, #2
 800d348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	3304      	adds	r3, #4
 800d354:	4619      	mov	r1, r3
 800d356:	4610      	mov	r0, r2
 800d358:	f000 fa14 	bl	800d784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d36e:	b480      	push	{r7}
 800d370:	b085      	sub	sp, #20
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	68da      	ldr	r2, [r3, #12]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f042 0201 	orr.w	r2, r2, #1
 800d384:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	f003 0307 	and.w	r3, r3, #7
 800d390:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b06      	cmp	r3, #6
 800d396:	d007      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f042 0201 	orr.w	r2, r2, #1
 800d3a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3714      	adds	r7, #20
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr

0800d3b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b082      	sub	sp, #8
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	f003 0302 	and.w	r3, r3, #2
 800d3c8:	2b02      	cmp	r3, #2
 800d3ca:	d122      	bne.n	800d412 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f003 0302 	and.w	r3, r3, #2
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d11b      	bne.n	800d412 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f06f 0202 	mvn.w	r2, #2
 800d3e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	f003 0303 	and.w	r3, r3, #3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d003      	beq.n	800d400 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f9a5 	bl	800d748 <HAL_TIM_IC_CaptureCallback>
 800d3fe:	e005      	b.n	800d40c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f997 	bl	800d734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f9a8 	bl	800d75c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b04      	cmp	r3, #4
 800d41e:	d122      	bne.n	800d466 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	f003 0304 	and.w	r3, r3, #4
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	d11b      	bne.n	800d466 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f06f 0204 	mvn.w	r2, #4
 800d436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2202      	movs	r2, #2
 800d43c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	699b      	ldr	r3, [r3, #24]
 800d444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d003      	beq.n	800d454 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 f97b 	bl	800d748 <HAL_TIM_IC_CaptureCallback>
 800d452:	e005      	b.n	800d460 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 f96d 	bl	800d734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 f97e 	bl	800d75c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f003 0308 	and.w	r3, r3, #8
 800d470:	2b08      	cmp	r3, #8
 800d472:	d122      	bne.n	800d4ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	f003 0308 	and.w	r3, r3, #8
 800d47e:	2b08      	cmp	r3, #8
 800d480:	d11b      	bne.n	800d4ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f06f 0208 	mvn.w	r2, #8
 800d48a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2204      	movs	r2, #4
 800d490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	69db      	ldr	r3, [r3, #28]
 800d498:	f003 0303 	and.w	r3, r3, #3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d003      	beq.n	800d4a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 f951 	bl	800d748 <HAL_TIM_IC_CaptureCallback>
 800d4a6:	e005      	b.n	800d4b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 f943 	bl	800d734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f954 	bl	800d75c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	f003 0310 	and.w	r3, r3, #16
 800d4c4:	2b10      	cmp	r3, #16
 800d4c6:	d122      	bne.n	800d50e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	f003 0310 	and.w	r3, r3, #16
 800d4d2:	2b10      	cmp	r3, #16
 800d4d4:	d11b      	bne.n	800d50e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f06f 0210 	mvn.w	r2, #16
 800d4de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2208      	movs	r2, #8
 800d4e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	69db      	ldr	r3, [r3, #28]
 800d4ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f927 	bl	800d748 <HAL_TIM_IC_CaptureCallback>
 800d4fa:	e005      	b.n	800d508 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 f919 	bl	800d734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 f92a 	bl	800d75c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	f003 0301 	and.w	r3, r3, #1
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d10e      	bne.n	800d53a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b01      	cmp	r3, #1
 800d528:	d107      	bne.n	800d53a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f06f 0201 	mvn.w	r2, #1
 800d532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7f9 f9f7 	bl	8006928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d544:	2b80      	cmp	r3, #128	; 0x80
 800d546:	d10e      	bne.n	800d566 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d552:	2b80      	cmp	r3, #128	; 0x80
 800d554:	d107      	bne.n	800d566 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 facf 	bl	800db04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d570:	2b40      	cmp	r3, #64	; 0x40
 800d572:	d10e      	bne.n	800d592 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d57e:	2b40      	cmp	r3, #64	; 0x40
 800d580:	d107      	bne.n	800d592 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d58a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 f8ef 	bl	800d770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	691b      	ldr	r3, [r3, #16]
 800d598:	f003 0320 	and.w	r3, r3, #32
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	d10e      	bne.n	800d5be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	f003 0320 	and.w	r3, r3, #32
 800d5aa:	2b20      	cmp	r3, #32
 800d5ac:	d107      	bne.n	800d5be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f06f 0220 	mvn.w	r2, #32
 800d5b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fa99 	bl	800daf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5be:	bf00      	nop
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b084      	sub	sp, #16
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d101      	bne.n	800d5de <HAL_TIM_ConfigClockSource+0x18>
 800d5da:	2302      	movs	r3, #2
 800d5dc:	e0a6      	b.n	800d72c <HAL_TIM_ConfigClockSource+0x166>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2202      	movs	r2, #2
 800d5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d5fc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d604:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b40      	cmp	r3, #64	; 0x40
 800d614:	d067      	beq.n	800d6e6 <HAL_TIM_ConfigClockSource+0x120>
 800d616:	2b40      	cmp	r3, #64	; 0x40
 800d618:	d80b      	bhi.n	800d632 <HAL_TIM_ConfigClockSource+0x6c>
 800d61a:	2b10      	cmp	r3, #16
 800d61c:	d073      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x140>
 800d61e:	2b10      	cmp	r3, #16
 800d620:	d802      	bhi.n	800d628 <HAL_TIM_ConfigClockSource+0x62>
 800d622:	2b00      	cmp	r3, #0
 800d624:	d06f      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d626:	e078      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d628:	2b20      	cmp	r3, #32
 800d62a:	d06c      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x140>
 800d62c:	2b30      	cmp	r3, #48	; 0x30
 800d62e:	d06a      	beq.n	800d706 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d630:	e073      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d632:	2b70      	cmp	r3, #112	; 0x70
 800d634:	d00d      	beq.n	800d652 <HAL_TIM_ConfigClockSource+0x8c>
 800d636:	2b70      	cmp	r3, #112	; 0x70
 800d638:	d804      	bhi.n	800d644 <HAL_TIM_ConfigClockSource+0x7e>
 800d63a:	2b50      	cmp	r3, #80	; 0x50
 800d63c:	d033      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0xe0>
 800d63e:	2b60      	cmp	r3, #96	; 0x60
 800d640:	d041      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d642:	e06a      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d648:	d066      	beq.n	800d718 <HAL_TIM_ConfigClockSource+0x152>
 800d64a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d64e:	d017      	beq.n	800d680 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d650:	e063      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6818      	ldr	r0, [r3, #0]
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	6899      	ldr	r1, [r3, #8]
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	685a      	ldr	r2, [r3, #4]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	f000 f9a9 	bl	800d9b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d674:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	609a      	str	r2, [r3, #8]
      break;
 800d67e:	e04c      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6818      	ldr	r0, [r3, #0]
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	6899      	ldr	r1, [r3, #8]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	f000 f992 	bl	800d9b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	689a      	ldr	r2, [r3, #8]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d6a2:	609a      	str	r2, [r3, #8]
      break;
 800d6a4:	e039      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6818      	ldr	r0, [r3, #0]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	6859      	ldr	r1, [r3, #4]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f000 f906 	bl	800d8c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2150      	movs	r1, #80	; 0x50
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 f95f 	bl	800d982 <TIM_ITRx_SetConfig>
      break;
 800d6c4:	e029      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6818      	ldr	r0, [r3, #0]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	6859      	ldr	r1, [r3, #4]
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	f000 f925 	bl	800d922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2160      	movs	r1, #96	; 0x60
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 f94f 	bl	800d982 <TIM_ITRx_SetConfig>
      break;
 800d6e4:	e019      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6818      	ldr	r0, [r3, #0]
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	6859      	ldr	r1, [r3, #4]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f000 f8e6 	bl	800d8c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2140      	movs	r1, #64	; 0x40
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 f93f 	bl	800d982 <TIM_ITRx_SetConfig>
      break;
 800d704:	e009      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4619      	mov	r1, r3
 800d710:	4610      	mov	r0, r2
 800d712:	f000 f936 	bl	800d982 <TIM_ITRx_SetConfig>
      break;
 800d716:	e000      	b.n	800d71a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d718:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d72a:	2300      	movs	r3, #0
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d73c:	bf00      	nop
 800d73e:	370c      	adds	r7, #12
 800d740:	46bd      	mov	sp, r7
 800d742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d746:	4770      	bx	lr

0800d748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d748:	b480      	push	{r7}
 800d74a:	b083      	sub	sp, #12
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d750:	bf00      	nop
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d770:	b480      	push	{r7}
 800d772:	b083      	sub	sp, #12
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d784:	b480      	push	{r7}
 800d786:	b085      	sub	sp, #20
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	4a40      	ldr	r2, [pc, #256]	; (800d898 <TIM_Base_SetConfig+0x114>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d013      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7a2:	d00f      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	4a3d      	ldr	r2, [pc, #244]	; (800d89c <TIM_Base_SetConfig+0x118>)
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d00b      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a3c      	ldr	r2, [pc, #240]	; (800d8a0 <TIM_Base_SetConfig+0x11c>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d007      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a3b      	ldr	r2, [pc, #236]	; (800d8a4 <TIM_Base_SetConfig+0x120>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d003      	beq.n	800d7c4 <TIM_Base_SetConfig+0x40>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a3a      	ldr	r2, [pc, #232]	; (800d8a8 <TIM_Base_SetConfig+0x124>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d108      	bne.n	800d7d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a2f      	ldr	r2, [pc, #188]	; (800d898 <TIM_Base_SetConfig+0x114>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d02b      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7e4:	d027      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a2c      	ldr	r2, [pc, #176]	; (800d89c <TIM_Base_SetConfig+0x118>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d023      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a2b      	ldr	r2, [pc, #172]	; (800d8a0 <TIM_Base_SetConfig+0x11c>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d01f      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a2a      	ldr	r2, [pc, #168]	; (800d8a4 <TIM_Base_SetConfig+0x120>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d01b      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a29      	ldr	r2, [pc, #164]	; (800d8a8 <TIM_Base_SetConfig+0x124>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d017      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a28      	ldr	r2, [pc, #160]	; (800d8ac <TIM_Base_SetConfig+0x128>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d013      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a27      	ldr	r2, [pc, #156]	; (800d8b0 <TIM_Base_SetConfig+0x12c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d00f      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	4a26      	ldr	r2, [pc, #152]	; (800d8b4 <TIM_Base_SetConfig+0x130>)
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d00b      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a25      	ldr	r2, [pc, #148]	; (800d8b8 <TIM_Base_SetConfig+0x134>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d007      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	4a24      	ldr	r2, [pc, #144]	; (800d8bc <TIM_Base_SetConfig+0x138>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d003      	beq.n	800d836 <TIM_Base_SetConfig+0xb2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a23      	ldr	r2, [pc, #140]	; (800d8c0 <TIM_Base_SetConfig+0x13c>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d108      	bne.n	800d848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d83c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	4313      	orrs	r3, r2
 800d846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	695b      	ldr	r3, [r3, #20]
 800d852:	4313      	orrs	r3, r2
 800d854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	689a      	ldr	r2, [r3, #8]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	4a0a      	ldr	r2, [pc, #40]	; (800d898 <TIM_Base_SetConfig+0x114>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d003      	beq.n	800d87c <TIM_Base_SetConfig+0xf8>
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a0c      	ldr	r2, [pc, #48]	; (800d8a8 <TIM_Base_SetConfig+0x124>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d103      	bne.n	800d884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	691a      	ldr	r2, [r3, #16]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2201      	movs	r2, #1
 800d888:	615a      	str	r2, [r3, #20]
}
 800d88a:	bf00      	nop
 800d88c:	3714      	adds	r7, #20
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	40010000 	.word	0x40010000
 800d89c:	40000400 	.word	0x40000400
 800d8a0:	40000800 	.word	0x40000800
 800d8a4:	40000c00 	.word	0x40000c00
 800d8a8:	40010400 	.word	0x40010400
 800d8ac:	40014000 	.word	0x40014000
 800d8b0:	40014400 	.word	0x40014400
 800d8b4:	40014800 	.word	0x40014800
 800d8b8:	40001800 	.word	0x40001800
 800d8bc:	40001c00 	.word	0x40001c00
 800d8c0:	40002000 	.word	0x40002000

0800d8c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b087      	sub	sp, #28
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	60f8      	str	r0, [r7, #12]
 800d8cc:	60b9      	str	r1, [r7, #8]
 800d8ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6a1b      	ldr	r3, [r3, #32]
 800d8da:	f023 0201 	bic.w	r2, r3, #1
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	699b      	ldr	r3, [r3, #24]
 800d8e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	011b      	lsls	r3, r3, #4
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f023 030a 	bic.w	r3, r3, #10
 800d900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	4313      	orrs	r3, r2
 800d908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	693a      	ldr	r2, [r7, #16]
 800d90e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	621a      	str	r2, [r3, #32]
}
 800d916:	bf00      	nop
 800d918:	371c      	adds	r7, #28
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr

0800d922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d922:	b480      	push	{r7}
 800d924:	b087      	sub	sp, #28
 800d926:	af00      	add	r7, sp, #0
 800d928:	60f8      	str	r0, [r7, #12]
 800d92a:	60b9      	str	r1, [r7, #8]
 800d92c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	f023 0210 	bic.w	r2, r3, #16
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d94c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	031b      	lsls	r3, r3, #12
 800d952:	697a      	ldr	r2, [r7, #20]
 800d954:	4313      	orrs	r3, r2
 800d956:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d95e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	011b      	lsls	r3, r3, #4
 800d964:	693a      	ldr	r2, [r7, #16]
 800d966:	4313      	orrs	r3, r2
 800d968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	621a      	str	r2, [r3, #32]
}
 800d976:	bf00      	nop
 800d978:	371c      	adds	r7, #28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d982:	b480      	push	{r7}
 800d984:	b085      	sub	sp, #20
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d99a:	683a      	ldr	r2, [r7, #0]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	f043 0307 	orr.w	r3, r3, #7
 800d9a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	68fa      	ldr	r2, [r7, #12]
 800d9aa:	609a      	str	r2, [r3, #8]
}
 800d9ac:	bf00      	nop
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	021a      	lsls	r2, r3, #8
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	609a      	str	r2, [r3, #8]
}
 800d9ec:	bf00      	nop
 800d9ee:	371c      	adds	r7, #28
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d101      	bne.n	800da10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da0c:	2302      	movs	r3, #2
 800da0e:	e05a      	b.n	800dac6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2202      	movs	r2, #2
 800da1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	4313      	orrs	r3, r2
 800da40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a21      	ldr	r2, [pc, #132]	; (800dad4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d022      	beq.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da5c:	d01d      	beq.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a1d      	ldr	r2, [pc, #116]	; (800dad8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d018      	beq.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a1b      	ldr	r2, [pc, #108]	; (800dadc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d013      	beq.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a1a      	ldr	r2, [pc, #104]	; (800dae0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d00e      	beq.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a18      	ldr	r2, [pc, #96]	; (800dae4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d009      	beq.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a17      	ldr	r2, [pc, #92]	; (800dae8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d004      	beq.n	800da9a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a15      	ldr	r2, [pc, #84]	; (800daec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d10c      	bne.n	800dab4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
 800dad2:	bf00      	nop
 800dad4:	40010000 	.word	0x40010000
 800dad8:	40000400 	.word	0x40000400
 800dadc:	40000800 	.word	0x40000800
 800dae0:	40000c00 	.word	0x40000c00
 800dae4:	40010400 	.word	0x40010400
 800dae8:	40014000 	.word	0x40014000
 800daec:	40001800 	.word	0x40001800

0800daf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d101      	bne.n	800db2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e03f      	b.n	800dbaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d106      	bne.n	800db44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7f9 f92c 	bl	8006d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2224      	movs	r2, #36	; 0x24
 800db48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f000 f829 	bl	800dbb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	691a      	ldr	r2, [r3, #16]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	695a      	ldr	r2, [r3, #20]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	68da      	ldr	r2, [r3, #12]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800db90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2200      	movs	r2, #0
 800db96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2220      	movs	r2, #32
 800db9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2220      	movs	r2, #32
 800dba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3708      	adds	r7, #8
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb8:	b085      	sub	sp, #20
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	691b      	ldr	r3, [r3, #16]
 800dbc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	68da      	ldr	r2, [r3, #12]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	430a      	orrs	r2, r1
 800dbd2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	689a      	ldr	r2, [r3, #8]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	691b      	ldr	r3, [r3, #16]
 800dbdc:	431a      	orrs	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	431a      	orrs	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	69db      	ldr	r3, [r3, #28]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68db      	ldr	r3, [r3, #12]
 800dbf2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dbf6:	f023 030c 	bic.w	r3, r3, #12
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	6812      	ldr	r2, [r2, #0]
 800dbfe:	68f9      	ldr	r1, [r7, #12]
 800dc00:	430b      	orrs	r3, r1
 800dc02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	695b      	ldr	r3, [r3, #20]
 800dc0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	699a      	ldr	r2, [r3, #24]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	430a      	orrs	r2, r1
 800dc18:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	69db      	ldr	r3, [r3, #28]
 800dc1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc22:	f040 818b 	bne.w	800df3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4ac1      	ldr	r2, [pc, #772]	; (800df30 <UART_SetConfig+0x37c>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d005      	beq.n	800dc3c <UART_SetConfig+0x88>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4abf      	ldr	r2, [pc, #764]	; (800df34 <UART_SetConfig+0x380>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	f040 80bd 	bne.w	800ddb6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dc3c:	f7fe fb5e 	bl	800c2fc <HAL_RCC_GetPCLK2Freq>
 800dc40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	461d      	mov	r5, r3
 800dc46:	f04f 0600 	mov.w	r6, #0
 800dc4a:	46a8      	mov	r8, r5
 800dc4c:	46b1      	mov	r9, r6
 800dc4e:	eb18 0308 	adds.w	r3, r8, r8
 800dc52:	eb49 0409 	adc.w	r4, r9, r9
 800dc56:	4698      	mov	r8, r3
 800dc58:	46a1      	mov	r9, r4
 800dc5a:	eb18 0805 	adds.w	r8, r8, r5
 800dc5e:	eb49 0906 	adc.w	r9, r9, r6
 800dc62:	f04f 0100 	mov.w	r1, #0
 800dc66:	f04f 0200 	mov.w	r2, #0
 800dc6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dc6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dc72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dc76:	4688      	mov	r8, r1
 800dc78:	4691      	mov	r9, r2
 800dc7a:	eb18 0005 	adds.w	r0, r8, r5
 800dc7e:	eb49 0106 	adc.w	r1, r9, r6
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	461d      	mov	r5, r3
 800dc88:	f04f 0600 	mov.w	r6, #0
 800dc8c:	196b      	adds	r3, r5, r5
 800dc8e:	eb46 0406 	adc.w	r4, r6, r6
 800dc92:	461a      	mov	r2, r3
 800dc94:	4623      	mov	r3, r4
 800dc96:	f7f8 f827 	bl	8005ce8 <__aeabi_uldivmod>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	460c      	mov	r4, r1
 800dc9e:	461a      	mov	r2, r3
 800dca0:	4ba5      	ldr	r3, [pc, #660]	; (800df38 <UART_SetConfig+0x384>)
 800dca2:	fba3 2302 	umull	r2, r3, r3, r2
 800dca6:	095b      	lsrs	r3, r3, #5
 800dca8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	461d      	mov	r5, r3
 800dcb0:	f04f 0600 	mov.w	r6, #0
 800dcb4:	46a9      	mov	r9, r5
 800dcb6:	46b2      	mov	sl, r6
 800dcb8:	eb19 0309 	adds.w	r3, r9, r9
 800dcbc:	eb4a 040a 	adc.w	r4, sl, sl
 800dcc0:	4699      	mov	r9, r3
 800dcc2:	46a2      	mov	sl, r4
 800dcc4:	eb19 0905 	adds.w	r9, r9, r5
 800dcc8:	eb4a 0a06 	adc.w	sl, sl, r6
 800dccc:	f04f 0100 	mov.w	r1, #0
 800dcd0:	f04f 0200 	mov.w	r2, #0
 800dcd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dcd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dcdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dce0:	4689      	mov	r9, r1
 800dce2:	4692      	mov	sl, r2
 800dce4:	eb19 0005 	adds.w	r0, r9, r5
 800dce8:	eb4a 0106 	adc.w	r1, sl, r6
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	461d      	mov	r5, r3
 800dcf2:	f04f 0600 	mov.w	r6, #0
 800dcf6:	196b      	adds	r3, r5, r5
 800dcf8:	eb46 0406 	adc.w	r4, r6, r6
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	4623      	mov	r3, r4
 800dd00:	f7f7 fff2 	bl	8005ce8 <__aeabi_uldivmod>
 800dd04:	4603      	mov	r3, r0
 800dd06:	460c      	mov	r4, r1
 800dd08:	461a      	mov	r2, r3
 800dd0a:	4b8b      	ldr	r3, [pc, #556]	; (800df38 <UART_SetConfig+0x384>)
 800dd0c:	fba3 1302 	umull	r1, r3, r3, r2
 800dd10:	095b      	lsrs	r3, r3, #5
 800dd12:	2164      	movs	r1, #100	; 0x64
 800dd14:	fb01 f303 	mul.w	r3, r1, r3
 800dd18:	1ad3      	subs	r3, r2, r3
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	3332      	adds	r3, #50	; 0x32
 800dd1e:	4a86      	ldr	r2, [pc, #536]	; (800df38 <UART_SetConfig+0x384>)
 800dd20:	fba2 2303 	umull	r2, r3, r2, r3
 800dd24:	095b      	lsrs	r3, r3, #5
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dd2c:	4498      	add	r8, r3
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	461d      	mov	r5, r3
 800dd32:	f04f 0600 	mov.w	r6, #0
 800dd36:	46a9      	mov	r9, r5
 800dd38:	46b2      	mov	sl, r6
 800dd3a:	eb19 0309 	adds.w	r3, r9, r9
 800dd3e:	eb4a 040a 	adc.w	r4, sl, sl
 800dd42:	4699      	mov	r9, r3
 800dd44:	46a2      	mov	sl, r4
 800dd46:	eb19 0905 	adds.w	r9, r9, r5
 800dd4a:	eb4a 0a06 	adc.w	sl, sl, r6
 800dd4e:	f04f 0100 	mov.w	r1, #0
 800dd52:	f04f 0200 	mov.w	r2, #0
 800dd56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd62:	4689      	mov	r9, r1
 800dd64:	4692      	mov	sl, r2
 800dd66:	eb19 0005 	adds.w	r0, r9, r5
 800dd6a:	eb4a 0106 	adc.w	r1, sl, r6
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	461d      	mov	r5, r3
 800dd74:	f04f 0600 	mov.w	r6, #0
 800dd78:	196b      	adds	r3, r5, r5
 800dd7a:	eb46 0406 	adc.w	r4, r6, r6
 800dd7e:	461a      	mov	r2, r3
 800dd80:	4623      	mov	r3, r4
 800dd82:	f7f7 ffb1 	bl	8005ce8 <__aeabi_uldivmod>
 800dd86:	4603      	mov	r3, r0
 800dd88:	460c      	mov	r4, r1
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	4b6a      	ldr	r3, [pc, #424]	; (800df38 <UART_SetConfig+0x384>)
 800dd8e:	fba3 1302 	umull	r1, r3, r3, r2
 800dd92:	095b      	lsrs	r3, r3, #5
 800dd94:	2164      	movs	r1, #100	; 0x64
 800dd96:	fb01 f303 	mul.w	r3, r1, r3
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	00db      	lsls	r3, r3, #3
 800dd9e:	3332      	adds	r3, #50	; 0x32
 800dda0:	4a65      	ldr	r2, [pc, #404]	; (800df38 <UART_SetConfig+0x384>)
 800dda2:	fba2 2303 	umull	r2, r3, r2, r3
 800dda6:	095b      	lsrs	r3, r3, #5
 800dda8:	f003 0207 	and.w	r2, r3, #7
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4442      	add	r2, r8
 800ddb2:	609a      	str	r2, [r3, #8]
 800ddb4:	e26f      	b.n	800e296 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ddb6:	f7fe fa8d 	bl	800c2d4 <HAL_RCC_GetPCLK1Freq>
 800ddba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	461d      	mov	r5, r3
 800ddc0:	f04f 0600 	mov.w	r6, #0
 800ddc4:	46a8      	mov	r8, r5
 800ddc6:	46b1      	mov	r9, r6
 800ddc8:	eb18 0308 	adds.w	r3, r8, r8
 800ddcc:	eb49 0409 	adc.w	r4, r9, r9
 800ddd0:	4698      	mov	r8, r3
 800ddd2:	46a1      	mov	r9, r4
 800ddd4:	eb18 0805 	adds.w	r8, r8, r5
 800ddd8:	eb49 0906 	adc.w	r9, r9, r6
 800dddc:	f04f 0100 	mov.w	r1, #0
 800dde0:	f04f 0200 	mov.w	r2, #0
 800dde4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dde8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ddec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ddf0:	4688      	mov	r8, r1
 800ddf2:	4691      	mov	r9, r2
 800ddf4:	eb18 0005 	adds.w	r0, r8, r5
 800ddf8:	eb49 0106 	adc.w	r1, r9, r6
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	461d      	mov	r5, r3
 800de02:	f04f 0600 	mov.w	r6, #0
 800de06:	196b      	adds	r3, r5, r5
 800de08:	eb46 0406 	adc.w	r4, r6, r6
 800de0c:	461a      	mov	r2, r3
 800de0e:	4623      	mov	r3, r4
 800de10:	f7f7 ff6a 	bl	8005ce8 <__aeabi_uldivmod>
 800de14:	4603      	mov	r3, r0
 800de16:	460c      	mov	r4, r1
 800de18:	461a      	mov	r2, r3
 800de1a:	4b47      	ldr	r3, [pc, #284]	; (800df38 <UART_SetConfig+0x384>)
 800de1c:	fba3 2302 	umull	r2, r3, r3, r2
 800de20:	095b      	lsrs	r3, r3, #5
 800de22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	461d      	mov	r5, r3
 800de2a:	f04f 0600 	mov.w	r6, #0
 800de2e:	46a9      	mov	r9, r5
 800de30:	46b2      	mov	sl, r6
 800de32:	eb19 0309 	adds.w	r3, r9, r9
 800de36:	eb4a 040a 	adc.w	r4, sl, sl
 800de3a:	4699      	mov	r9, r3
 800de3c:	46a2      	mov	sl, r4
 800de3e:	eb19 0905 	adds.w	r9, r9, r5
 800de42:	eb4a 0a06 	adc.w	sl, sl, r6
 800de46:	f04f 0100 	mov.w	r1, #0
 800de4a:	f04f 0200 	mov.w	r2, #0
 800de4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800de56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800de5a:	4689      	mov	r9, r1
 800de5c:	4692      	mov	sl, r2
 800de5e:	eb19 0005 	adds.w	r0, r9, r5
 800de62:	eb4a 0106 	adc.w	r1, sl, r6
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	461d      	mov	r5, r3
 800de6c:	f04f 0600 	mov.w	r6, #0
 800de70:	196b      	adds	r3, r5, r5
 800de72:	eb46 0406 	adc.w	r4, r6, r6
 800de76:	461a      	mov	r2, r3
 800de78:	4623      	mov	r3, r4
 800de7a:	f7f7 ff35 	bl	8005ce8 <__aeabi_uldivmod>
 800de7e:	4603      	mov	r3, r0
 800de80:	460c      	mov	r4, r1
 800de82:	461a      	mov	r2, r3
 800de84:	4b2c      	ldr	r3, [pc, #176]	; (800df38 <UART_SetConfig+0x384>)
 800de86:	fba3 1302 	umull	r1, r3, r3, r2
 800de8a:	095b      	lsrs	r3, r3, #5
 800de8c:	2164      	movs	r1, #100	; 0x64
 800de8e:	fb01 f303 	mul.w	r3, r1, r3
 800de92:	1ad3      	subs	r3, r2, r3
 800de94:	00db      	lsls	r3, r3, #3
 800de96:	3332      	adds	r3, #50	; 0x32
 800de98:	4a27      	ldr	r2, [pc, #156]	; (800df38 <UART_SetConfig+0x384>)
 800de9a:	fba2 2303 	umull	r2, r3, r2, r3
 800de9e:	095b      	lsrs	r3, r3, #5
 800dea0:	005b      	lsls	r3, r3, #1
 800dea2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dea6:	4498      	add	r8, r3
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	461d      	mov	r5, r3
 800deac:	f04f 0600 	mov.w	r6, #0
 800deb0:	46a9      	mov	r9, r5
 800deb2:	46b2      	mov	sl, r6
 800deb4:	eb19 0309 	adds.w	r3, r9, r9
 800deb8:	eb4a 040a 	adc.w	r4, sl, sl
 800debc:	4699      	mov	r9, r3
 800debe:	46a2      	mov	sl, r4
 800dec0:	eb19 0905 	adds.w	r9, r9, r5
 800dec4:	eb4a 0a06 	adc.w	sl, sl, r6
 800dec8:	f04f 0100 	mov.w	r1, #0
 800decc:	f04f 0200 	mov.w	r2, #0
 800ded0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ded4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ded8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dedc:	4689      	mov	r9, r1
 800dede:	4692      	mov	sl, r2
 800dee0:	eb19 0005 	adds.w	r0, r9, r5
 800dee4:	eb4a 0106 	adc.w	r1, sl, r6
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	461d      	mov	r5, r3
 800deee:	f04f 0600 	mov.w	r6, #0
 800def2:	196b      	adds	r3, r5, r5
 800def4:	eb46 0406 	adc.w	r4, r6, r6
 800def8:	461a      	mov	r2, r3
 800defa:	4623      	mov	r3, r4
 800defc:	f7f7 fef4 	bl	8005ce8 <__aeabi_uldivmod>
 800df00:	4603      	mov	r3, r0
 800df02:	460c      	mov	r4, r1
 800df04:	461a      	mov	r2, r3
 800df06:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <UART_SetConfig+0x384>)
 800df08:	fba3 1302 	umull	r1, r3, r3, r2
 800df0c:	095b      	lsrs	r3, r3, #5
 800df0e:	2164      	movs	r1, #100	; 0x64
 800df10:	fb01 f303 	mul.w	r3, r1, r3
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	3332      	adds	r3, #50	; 0x32
 800df1a:	4a07      	ldr	r2, [pc, #28]	; (800df38 <UART_SetConfig+0x384>)
 800df1c:	fba2 2303 	umull	r2, r3, r2, r3
 800df20:	095b      	lsrs	r3, r3, #5
 800df22:	f003 0207 	and.w	r2, r3, #7
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4442      	add	r2, r8
 800df2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800df2e:	e1b2      	b.n	800e296 <UART_SetConfig+0x6e2>
 800df30:	40011000 	.word	0x40011000
 800df34:	40011400 	.word	0x40011400
 800df38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4ad7      	ldr	r2, [pc, #860]	; (800e2a0 <UART_SetConfig+0x6ec>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d005      	beq.n	800df52 <UART_SetConfig+0x39e>
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4ad6      	ldr	r2, [pc, #856]	; (800e2a4 <UART_SetConfig+0x6f0>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	f040 80d1 	bne.w	800e0f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800df52:	f7fe f9d3 	bl	800c2fc <HAL_RCC_GetPCLK2Freq>
 800df56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	469a      	mov	sl, r3
 800df5c:	f04f 0b00 	mov.w	fp, #0
 800df60:	46d0      	mov	r8, sl
 800df62:	46d9      	mov	r9, fp
 800df64:	eb18 0308 	adds.w	r3, r8, r8
 800df68:	eb49 0409 	adc.w	r4, r9, r9
 800df6c:	4698      	mov	r8, r3
 800df6e:	46a1      	mov	r9, r4
 800df70:	eb18 080a 	adds.w	r8, r8, sl
 800df74:	eb49 090b 	adc.w	r9, r9, fp
 800df78:	f04f 0100 	mov.w	r1, #0
 800df7c:	f04f 0200 	mov.w	r2, #0
 800df80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800df84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800df88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800df8c:	4688      	mov	r8, r1
 800df8e:	4691      	mov	r9, r2
 800df90:	eb1a 0508 	adds.w	r5, sl, r8
 800df94:	eb4b 0609 	adc.w	r6, fp, r9
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	4619      	mov	r1, r3
 800df9e:	f04f 0200 	mov.w	r2, #0
 800dfa2:	f04f 0300 	mov.w	r3, #0
 800dfa6:	f04f 0400 	mov.w	r4, #0
 800dfaa:	0094      	lsls	r4, r2, #2
 800dfac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dfb0:	008b      	lsls	r3, r1, #2
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	4623      	mov	r3, r4
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	4631      	mov	r1, r6
 800dfba:	f7f7 fe95 	bl	8005ce8 <__aeabi_uldivmod>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	4bb8      	ldr	r3, [pc, #736]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800dfc6:	fba3 2302 	umull	r2, r3, r3, r2
 800dfca:	095b      	lsrs	r3, r3, #5
 800dfcc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	469b      	mov	fp, r3
 800dfd4:	f04f 0c00 	mov.w	ip, #0
 800dfd8:	46d9      	mov	r9, fp
 800dfda:	46e2      	mov	sl, ip
 800dfdc:	eb19 0309 	adds.w	r3, r9, r9
 800dfe0:	eb4a 040a 	adc.w	r4, sl, sl
 800dfe4:	4699      	mov	r9, r3
 800dfe6:	46a2      	mov	sl, r4
 800dfe8:	eb19 090b 	adds.w	r9, r9, fp
 800dfec:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dff0:	f04f 0100 	mov.w	r1, #0
 800dff4:	f04f 0200 	mov.w	r2, #0
 800dff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dffc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e000:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e004:	4689      	mov	r9, r1
 800e006:	4692      	mov	sl, r2
 800e008:	eb1b 0509 	adds.w	r5, fp, r9
 800e00c:	eb4c 060a 	adc.w	r6, ip, sl
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	4619      	mov	r1, r3
 800e016:	f04f 0200 	mov.w	r2, #0
 800e01a:	f04f 0300 	mov.w	r3, #0
 800e01e:	f04f 0400 	mov.w	r4, #0
 800e022:	0094      	lsls	r4, r2, #2
 800e024:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e028:	008b      	lsls	r3, r1, #2
 800e02a:	461a      	mov	r2, r3
 800e02c:	4623      	mov	r3, r4
 800e02e:	4628      	mov	r0, r5
 800e030:	4631      	mov	r1, r6
 800e032:	f7f7 fe59 	bl	8005ce8 <__aeabi_uldivmod>
 800e036:	4603      	mov	r3, r0
 800e038:	460c      	mov	r4, r1
 800e03a:	461a      	mov	r2, r3
 800e03c:	4b9a      	ldr	r3, [pc, #616]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e03e:	fba3 1302 	umull	r1, r3, r3, r2
 800e042:	095b      	lsrs	r3, r3, #5
 800e044:	2164      	movs	r1, #100	; 0x64
 800e046:	fb01 f303 	mul.w	r3, r1, r3
 800e04a:	1ad3      	subs	r3, r2, r3
 800e04c:	011b      	lsls	r3, r3, #4
 800e04e:	3332      	adds	r3, #50	; 0x32
 800e050:	4a95      	ldr	r2, [pc, #596]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e052:	fba2 2303 	umull	r2, r3, r2, r3
 800e056:	095b      	lsrs	r3, r3, #5
 800e058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e05c:	4498      	add	r8, r3
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	469b      	mov	fp, r3
 800e062:	f04f 0c00 	mov.w	ip, #0
 800e066:	46d9      	mov	r9, fp
 800e068:	46e2      	mov	sl, ip
 800e06a:	eb19 0309 	adds.w	r3, r9, r9
 800e06e:	eb4a 040a 	adc.w	r4, sl, sl
 800e072:	4699      	mov	r9, r3
 800e074:	46a2      	mov	sl, r4
 800e076:	eb19 090b 	adds.w	r9, r9, fp
 800e07a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e07e:	f04f 0100 	mov.w	r1, #0
 800e082:	f04f 0200 	mov.w	r2, #0
 800e086:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e08a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e08e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e092:	4689      	mov	r9, r1
 800e094:	4692      	mov	sl, r2
 800e096:	eb1b 0509 	adds.w	r5, fp, r9
 800e09a:	eb4c 060a 	adc.w	r6, ip, sl
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	4619      	mov	r1, r3
 800e0a4:	f04f 0200 	mov.w	r2, #0
 800e0a8:	f04f 0300 	mov.w	r3, #0
 800e0ac:	f04f 0400 	mov.w	r4, #0
 800e0b0:	0094      	lsls	r4, r2, #2
 800e0b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e0b6:	008b      	lsls	r3, r1, #2
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	4623      	mov	r3, r4
 800e0bc:	4628      	mov	r0, r5
 800e0be:	4631      	mov	r1, r6
 800e0c0:	f7f7 fe12 	bl	8005ce8 <__aeabi_uldivmod>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	4b77      	ldr	r3, [pc, #476]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e0cc:	fba3 1302 	umull	r1, r3, r3, r2
 800e0d0:	095b      	lsrs	r3, r3, #5
 800e0d2:	2164      	movs	r1, #100	; 0x64
 800e0d4:	fb01 f303 	mul.w	r3, r1, r3
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	011b      	lsls	r3, r3, #4
 800e0dc:	3332      	adds	r3, #50	; 0x32
 800e0de:	4a72      	ldr	r2, [pc, #456]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e4:	095b      	lsrs	r3, r3, #5
 800e0e6:	f003 020f 	and.w	r2, r3, #15
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4442      	add	r2, r8
 800e0f0:	609a      	str	r2, [r3, #8]
 800e0f2:	e0d0      	b.n	800e296 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e0f4:	f7fe f8ee 	bl	800c2d4 <HAL_RCC_GetPCLK1Freq>
 800e0f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	469a      	mov	sl, r3
 800e0fe:	f04f 0b00 	mov.w	fp, #0
 800e102:	46d0      	mov	r8, sl
 800e104:	46d9      	mov	r9, fp
 800e106:	eb18 0308 	adds.w	r3, r8, r8
 800e10a:	eb49 0409 	adc.w	r4, r9, r9
 800e10e:	4698      	mov	r8, r3
 800e110:	46a1      	mov	r9, r4
 800e112:	eb18 080a 	adds.w	r8, r8, sl
 800e116:	eb49 090b 	adc.w	r9, r9, fp
 800e11a:	f04f 0100 	mov.w	r1, #0
 800e11e:	f04f 0200 	mov.w	r2, #0
 800e122:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e126:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e12a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e12e:	4688      	mov	r8, r1
 800e130:	4691      	mov	r9, r2
 800e132:	eb1a 0508 	adds.w	r5, sl, r8
 800e136:	eb4b 0609 	adc.w	r6, fp, r9
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	4619      	mov	r1, r3
 800e140:	f04f 0200 	mov.w	r2, #0
 800e144:	f04f 0300 	mov.w	r3, #0
 800e148:	f04f 0400 	mov.w	r4, #0
 800e14c:	0094      	lsls	r4, r2, #2
 800e14e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e152:	008b      	lsls	r3, r1, #2
 800e154:	461a      	mov	r2, r3
 800e156:	4623      	mov	r3, r4
 800e158:	4628      	mov	r0, r5
 800e15a:	4631      	mov	r1, r6
 800e15c:	f7f7 fdc4 	bl	8005ce8 <__aeabi_uldivmod>
 800e160:	4603      	mov	r3, r0
 800e162:	460c      	mov	r4, r1
 800e164:	461a      	mov	r2, r3
 800e166:	4b50      	ldr	r3, [pc, #320]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e168:	fba3 2302 	umull	r2, r3, r3, r2
 800e16c:	095b      	lsrs	r3, r3, #5
 800e16e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	469b      	mov	fp, r3
 800e176:	f04f 0c00 	mov.w	ip, #0
 800e17a:	46d9      	mov	r9, fp
 800e17c:	46e2      	mov	sl, ip
 800e17e:	eb19 0309 	adds.w	r3, r9, r9
 800e182:	eb4a 040a 	adc.w	r4, sl, sl
 800e186:	4699      	mov	r9, r3
 800e188:	46a2      	mov	sl, r4
 800e18a:	eb19 090b 	adds.w	r9, r9, fp
 800e18e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e192:	f04f 0100 	mov.w	r1, #0
 800e196:	f04f 0200 	mov.w	r2, #0
 800e19a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e19e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1a6:	4689      	mov	r9, r1
 800e1a8:	4692      	mov	sl, r2
 800e1aa:	eb1b 0509 	adds.w	r5, fp, r9
 800e1ae:	eb4c 060a 	adc.w	r6, ip, sl
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	4619      	mov	r1, r3
 800e1b8:	f04f 0200 	mov.w	r2, #0
 800e1bc:	f04f 0300 	mov.w	r3, #0
 800e1c0:	f04f 0400 	mov.w	r4, #0
 800e1c4:	0094      	lsls	r4, r2, #2
 800e1c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e1ca:	008b      	lsls	r3, r1, #2
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4623      	mov	r3, r4
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	f7f7 fd88 	bl	8005ce8 <__aeabi_uldivmod>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	460c      	mov	r4, r1
 800e1dc:	461a      	mov	r2, r3
 800e1de:	4b32      	ldr	r3, [pc, #200]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e1e0:	fba3 1302 	umull	r1, r3, r3, r2
 800e1e4:	095b      	lsrs	r3, r3, #5
 800e1e6:	2164      	movs	r1, #100	; 0x64
 800e1e8:	fb01 f303 	mul.w	r3, r1, r3
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	011b      	lsls	r3, r3, #4
 800e1f0:	3332      	adds	r3, #50	; 0x32
 800e1f2:	4a2d      	ldr	r2, [pc, #180]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f8:	095b      	lsrs	r3, r3, #5
 800e1fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1fe:	4498      	add	r8, r3
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	469b      	mov	fp, r3
 800e204:	f04f 0c00 	mov.w	ip, #0
 800e208:	46d9      	mov	r9, fp
 800e20a:	46e2      	mov	sl, ip
 800e20c:	eb19 0309 	adds.w	r3, r9, r9
 800e210:	eb4a 040a 	adc.w	r4, sl, sl
 800e214:	4699      	mov	r9, r3
 800e216:	46a2      	mov	sl, r4
 800e218:	eb19 090b 	adds.w	r9, r9, fp
 800e21c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e220:	f04f 0100 	mov.w	r1, #0
 800e224:	f04f 0200 	mov.w	r2, #0
 800e228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e22c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e230:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e234:	4689      	mov	r9, r1
 800e236:	4692      	mov	sl, r2
 800e238:	eb1b 0509 	adds.w	r5, fp, r9
 800e23c:	eb4c 060a 	adc.w	r6, ip, sl
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	4619      	mov	r1, r3
 800e246:	f04f 0200 	mov.w	r2, #0
 800e24a:	f04f 0300 	mov.w	r3, #0
 800e24e:	f04f 0400 	mov.w	r4, #0
 800e252:	0094      	lsls	r4, r2, #2
 800e254:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e258:	008b      	lsls	r3, r1, #2
 800e25a:	461a      	mov	r2, r3
 800e25c:	4623      	mov	r3, r4
 800e25e:	4628      	mov	r0, r5
 800e260:	4631      	mov	r1, r6
 800e262:	f7f7 fd41 	bl	8005ce8 <__aeabi_uldivmod>
 800e266:	4603      	mov	r3, r0
 800e268:	460c      	mov	r4, r1
 800e26a:	461a      	mov	r2, r3
 800e26c:	4b0e      	ldr	r3, [pc, #56]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e26e:	fba3 1302 	umull	r1, r3, r3, r2
 800e272:	095b      	lsrs	r3, r3, #5
 800e274:	2164      	movs	r1, #100	; 0x64
 800e276:	fb01 f303 	mul.w	r3, r1, r3
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	011b      	lsls	r3, r3, #4
 800e27e:	3332      	adds	r3, #50	; 0x32
 800e280:	4a09      	ldr	r2, [pc, #36]	; (800e2a8 <UART_SetConfig+0x6f4>)
 800e282:	fba2 2303 	umull	r2, r3, r2, r3
 800e286:	095b      	lsrs	r3, r3, #5
 800e288:	f003 020f 	and.w	r2, r3, #15
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4442      	add	r2, r8
 800e292:	609a      	str	r2, [r3, #8]
}
 800e294:	e7ff      	b.n	800e296 <UART_SetConfig+0x6e2>
 800e296:	bf00      	nop
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a0:	40011000 	.word	0x40011000
 800e2a4:	40011400 	.word	0x40011400
 800e2a8:	51eb851f 	.word	0x51eb851f

0800e2ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d029      	beq.n	800e31a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800e2d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e2d6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e2e0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800e2e6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800e2ec:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800e2f2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800e2f8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800e2fe:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800e304:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800e30a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	4313      	orrs	r3, r2
 800e310:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	601a      	str	r2, [r3, #0]
 800e318:	e034      	b.n	800e384 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e326:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e330:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800e336:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800e338:	68fa      	ldr	r2, [r7, #12]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800e34a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e34e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e358:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800e35e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800e364:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800e36a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800e370:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800e372:	68ba      	ldr	r2, [r7, #8]
 800e374:	4313      	orrs	r3, r2
 800e376:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68fa      	ldr	r2, [r7, #12]
 800e37c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e392:	b480      	push	{r7}
 800e394:	b087      	sub	sp, #28
 800e396:	af00      	add	r7, sp, #0
 800e398:	60f8      	str	r0, [r7, #12]
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d02e      	beq.n	800e40a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e3b8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800e3c8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800e3d2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	3b01      	subs	r3, #1
 800e3da:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800e3dc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800e3e6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	695b      	ldr	r3, [r3, #20]
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800e3f0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	699b      	ldr	r3, [r3, #24]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	697a      	ldr	r2, [r7, #20]
 800e3fe:	4313      	orrs	r3, r2
 800e400:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	697a      	ldr	r2, [r7, #20]
 800e406:	609a      	str	r2, [r3, #8]
 800e408:	e03b      	b.n	800e482 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e41a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	3b01      	subs	r3, #1
 800e422:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	695b      	ldr	r3, [r3, #20]
 800e428:	3b01      	subs	r3, #1
 800e42a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800e42c:	4313      	orrs	r3, r2
 800e42e:	697a      	ldr	r2, [r7, #20]
 800e430:	4313      	orrs	r3, r2
 800e432:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	68db      	ldr	r3, [r3, #12]
 800e438:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e440:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800e450:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	689b      	ldr	r3, [r3, #8]
 800e456:	3b01      	subs	r3, #1
 800e458:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800e45a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	3b01      	subs	r3, #1
 800e462:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800e464:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	699b      	ldr	r3, [r3, #24]
 800e46a:	3b01      	subs	r3, #1
 800e46c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800e46e:	4313      	orrs	r3, r2
 800e470:	693a      	ldr	r2, [r7, #16]
 800e472:	4313      	orrs	r3, r2
 800e474:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	697a      	ldr	r2, [r7, #20]
 800e47a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	693a      	ldr	r2, [r7, #16]
 800e480:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	371c      	adds	r7, #28
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800e49c:	2300      	movs	r3, #0
 800e49e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e4ac:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	689b      	ldr	r3, [r3, #8]
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800e4b6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800e4c8:	f7fa f98c 	bl	80087e4 <HAL_GetTick>
 800e4cc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800e4ce:	e010      	b.n	800e4f2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d6:	d00c      	beq.n	800e4f2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d007      	beq.n	800e4ee <FMC_SDRAM_SendCommand+0x5e>
 800e4de:	f7fa f981 	bl	80087e4 <HAL_GetTick>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	1ad3      	subs	r3, r2, r3
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d201      	bcs.n	800e4f2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	e006      	b.n	800e500 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	f003 0320 	and.w	r3, r3, #32
 800e4fa:	2b20      	cmp	r3, #32
 800e4fc:	d0e8      	beq.n	800e4d0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	695a      	ldr	r2, [r3, #20]
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	431a      	orrs	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800e520:	2300      	movs	r3, #0
}
 800e522:	4618      	mov	r0, r3
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e52e:	b084      	sub	sp, #16
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	f107 001c 	add.w	r0, r7, #28
 800e53c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e542:	2b01      	cmp	r3, #1
 800e544:	d122      	bne.n	800e58c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e55a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e570:	2b01      	cmp	r3, #1
 800e572:	d105      	bne.n	800e580 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f903 	bl	800e78c <USB_CoreReset>
 800e586:	4603      	mov	r3, r0
 800e588:	73fb      	strb	r3, [r7, #15]
 800e58a:	e01a      	b.n	800e5c2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f8f7 	bl	800e78c <USB_CoreReset>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d106      	bne.n	800e5b6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	639a      	str	r2, [r3, #56]	; 0x38
 800e5b4:	e005      	b.n	800e5c2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d10b      	bne.n	800e5e0 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	f043 0206 	orr.w	r2, r3, #6
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	689b      	ldr	r3, [r3, #8]
 800e5d8:	f043 0220 	orr.w	r2, r3, #32
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5ec:	b004      	add	sp, #16
 800e5ee:	4770      	bx	lr

0800e5f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	f023 0201 	bic.w	r2, r3, #1
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b082      	sub	sp, #8
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	460b      	mov	r3, r1
 800e61c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e62a:	78fb      	ldrb	r3, [r7, #3]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d106      	bne.n	800e63e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	60da      	str	r2, [r3, #12]
 800e63c:	e00b      	b.n	800e656 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e63e:	78fb      	ldrb	r3, [r7, #3]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d106      	bne.n	800e652 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	60da      	str	r2, [r3, #12]
 800e650:	e001      	b.n	800e656 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e652:	2301      	movs	r3, #1
 800e654:	e003      	b.n	800e65e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e656:	2032      	movs	r0, #50	; 0x32
 800e658:	f7fa f8d0 	bl	80087fc <HAL_Delay>

  return HAL_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
	...

0800e668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e668:	b480      	push	{r7}
 800e66a:	b085      	sub	sp, #20
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e672:	2300      	movs	r3, #0
 800e674:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	019b      	lsls	r3, r3, #6
 800e67a:	f043 0220 	orr.w	r2, r3, #32
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	3301      	adds	r3, #1
 800e686:	60fb      	str	r3, [r7, #12]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	4a09      	ldr	r2, [pc, #36]	; (800e6b0 <USB_FlushTxFifo+0x48>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d901      	bls.n	800e694 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e690:	2303      	movs	r3, #3
 800e692:	e006      	b.n	800e6a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	f003 0320 	and.w	r3, r3, #32
 800e69c:	2b20      	cmp	r3, #32
 800e69e:	d0f0      	beq.n	800e682 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	00030d40 	.word	0x00030d40

0800e6b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2210      	movs	r2, #16
 800e6c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	60fb      	str	r3, [r7, #12]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	4a09      	ldr	r2, [pc, #36]	; (800e6f4 <USB_FlushRxFifo+0x40>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d901      	bls.n	800e6d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	e006      	b.n	800e6e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	691b      	ldr	r3, [r3, #16]
 800e6dc:	f003 0310 	and.w	r3, r3, #16
 800e6e0:	2b10      	cmp	r3, #16
 800e6e2:	d0f0      	beq.n	800e6c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3714      	adds	r7, #20
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
 800e6f2:	bf00      	nop
 800e6f4:	00030d40 	.word	0x00030d40

0800e6f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b089      	sub	sp, #36	; 0x24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	4613      	mov	r3, r2
 800e704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e70e:	88fb      	ldrh	r3, [r7, #6]
 800e710:	3303      	adds	r3, #3
 800e712:	089b      	lsrs	r3, r3, #2
 800e714:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e716:	2300      	movs	r3, #0
 800e718:	61bb      	str	r3, [r7, #24]
 800e71a:	e00b      	b.n	800e734 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	601a      	str	r2, [r3, #0]
    pDest++;
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	3304      	adds	r3, #4
 800e72c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	3301      	adds	r3, #1
 800e732:	61bb      	str	r3, [r7, #24]
 800e734:	69ba      	ldr	r2, [r7, #24]
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d3ef      	bcc.n	800e71c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e73c:	69fb      	ldr	r3, [r7, #28]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3724      	adds	r7, #36	; 0x24
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e74a:	b480      	push	{r7}
 800e74c:	b085      	sub	sp, #20
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	695b      	ldr	r3, [r3, #20]
 800e756:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	4013      	ands	r3, r2
 800e760:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e762:	68fb      	ldr	r3, [r7, #12]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e770:	b480      	push	{r7}
 800e772:	b083      	sub	sp, #12
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	695b      	ldr	r3, [r3, #20]
 800e77c:	f003 0301 	and.w	r3, r3, #1
}
 800e780:	4618      	mov	r0, r3
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e794:	2300      	movs	r3, #0
 800e796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	3301      	adds	r3, #1
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	4a13      	ldr	r2, [pc, #76]	; (800e7f0 <USB_CoreReset+0x64>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d901      	bls.n	800e7aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	e01b      	b.n	800e7e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	daf2      	bge.n	800e798 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	f043 0201 	orr.w	r2, r3, #1
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	60fb      	str	r3, [r7, #12]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	4a09      	ldr	r2, [pc, #36]	; (800e7f0 <USB_CoreReset+0x64>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d901      	bls.n	800e7d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	e006      	b.n	800e7e2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d0f0      	beq.n	800e7c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3714      	adds	r7, #20
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr
 800e7ee:	bf00      	nop
 800e7f0:	00030d40 	.word	0x00030d40

0800e7f4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	f107 001c 	add.w	r0, r7, #28
 800e802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e810:	461a      	mov	r2, r3
 800e812:	2300      	movs	r3, #0
 800e814:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e826:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e832:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e842:	2b00      	cmp	r3, #0
 800e844:	d018      	beq.n	800e878 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d10a      	bne.n	800e862 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e85a:	f043 0304 	orr.w	r3, r3, #4
 800e85e:	6013      	str	r3, [r2, #0]
 800e860:	e014      	b.n	800e88c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e870:	f023 0304 	bic.w	r3, r3, #4
 800e874:	6013      	str	r3, [r2, #0]
 800e876:	e009      	b.n	800e88c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68ba      	ldr	r2, [r7, #8]
 800e882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e886:	f023 0304 	bic.w	r3, r3, #4
 800e88a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800e88c:	2110      	movs	r1, #16
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff feea 	bl	800e668 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff ff0d 	bl	800e6b4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e89a:	2300      	movs	r3, #0
 800e89c:	60fb      	str	r3, [r7, #12]
 800e89e:	e015      	b.n	800e8cc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	60fb      	str	r3, [r7, #12]
 800e8cc:	6a3b      	ldr	r3, [r7, #32]
 800e8ce:	68fa      	ldr	r2, [r7, #12]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d3e5      	bcc.n	800e8a0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800e8d4:	2101      	movs	r1, #1
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f882 	bl	800e9e0 <USB_DriveVbus>

  HAL_Delay(200U);
 800e8dc:	20c8      	movs	r0, #200	; 0xc8
 800e8de:	f7f9 ff8d 	bl	80087fc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ee:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00b      	beq.n	800e914 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e902:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	4a14      	ldr	r2, [pc, #80]	; (800e958 <USB_HostInit+0x164>)
 800e908:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	4a13      	ldr	r2, [pc, #76]	; (800e95c <USB_HostInit+0x168>)
 800e90e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e912:	e009      	b.n	800e928 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2280      	movs	r2, #128	; 0x80
 800e918:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	4a10      	ldr	r2, [pc, #64]	; (800e960 <USB_HostInit+0x16c>)
 800e91e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a10      	ldr	r2, [pc, #64]	; (800e964 <USB_HostInit+0x170>)
 800e924:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d105      	bne.n	800e93a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	f043 0210 	orr.w	r2, r3, #16
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	699a      	ldr	r2, [r3, #24]
 800e93e:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <USB_HostInit+0x174>)
 800e940:	4313      	orrs	r3, r2
 800e942:	687a      	ldr	r2, [r7, #4]
 800e944:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3710      	adds	r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e952:	b004      	add	sp, #16
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	01000200 	.word	0x01000200
 800e95c:	00e00300 	.word	0x00e00300
 800e960:	00600080 	.word	0x00600080
 800e964:	004000e0 	.word	0x004000e0
 800e968:	a3200008 	.word	0xa3200008

0800e96c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e98a:	f023 0303 	bic.w	r3, r3, #3
 800e98e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	78fb      	ldrb	r3, [r7, #3]
 800e99a:	f003 0303 	and.w	r3, r3, #3
 800e99e:	68f9      	ldr	r1, [r7, #12]
 800e9a0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e9a8:	78fb      	ldrb	r3, [r7, #3]
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d107      	bne.n	800e9be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e9ba:	6053      	str	r3, [r2, #4]
 800e9bc:	e009      	b.n	800e9d2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800e9be:	78fb      	ldrb	r3, [r7, #3]
 800e9c0:	2b02      	cmp	r3, #2
 800e9c2:	d106      	bne.n	800e9d2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	f241 7370 	movw	r3, #6000	; 0x1770
 800e9d0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ea04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d109      	bne.n	800ea24 <USB_DriveVbus+0x44>
 800ea10:	78fb      	ldrb	r3, [r7, #3]
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d106      	bne.n	800ea24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ea1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea2e:	d109      	bne.n	800ea44 <USB_DriveVbus+0x64>
 800ea30:	78fb      	ldrb	r3, [r7, #3]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d106      	bne.n	800ea44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ea3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ea52:	b480      	push	{r7}
 800ea54:	b085      	sub	sp, #20
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	b29b      	uxth	r3, r3
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3714      	adds	r7, #20
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b087      	sub	sp, #28
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ea84:	78fb      	ldrb	r3, [r7, #3]
 800ea86:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	015a      	lsls	r2, r3, #5
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	4413      	add	r3, r2
 800ea94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	0c9b      	lsrs	r3, r3, #18
 800ea9c:	f003 0303 	and.w	r3, r3, #3
 800eaa0:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <USB_HC_Halt+0x3a>
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d16c      	bne.n	800eb88 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	015a      	lsls	r2, r3, #5
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	4413      	add	r3, r2
 800eab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	0151      	lsls	r1, r2, #5
 800eac0:	693a      	ldr	r2, [r7, #16]
 800eac2:	440a      	add	r2, r1
 800eac4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eacc:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d143      	bne.n	800eb62 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68fa      	ldr	r2, [r7, #12]
 800eaea:	0151      	lsls	r1, r2, #5
 800eaec:	693a      	ldr	r2, [r7, #16]
 800eaee:	440a      	add	r2, r1
 800eaf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eaf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eaf8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	015a      	lsls	r2, r3, #5
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	4413      	add	r3, r2
 800eb02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	0151      	lsls	r1, r2, #5
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	440a      	add	r2, r1
 800eb10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eb14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb18:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	015a      	lsls	r2, r3, #5
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	4413      	add	r3, r2
 800eb22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	0151      	lsls	r1, r2, #5
 800eb2c:	693a      	ldr	r2, [r7, #16]
 800eb2e:	440a      	add	r2, r1
 800eb30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eb34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eb38:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	617b      	str	r3, [r7, #20]
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb46:	d81d      	bhi.n	800eb84 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	015a      	lsls	r2, r3, #5
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	4413      	add	r3, r2
 800eb50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb5e:	d0ec      	beq.n	800eb3a <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800eb60:	e080      	b.n	800ec64 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	015a      	lsls	r2, r3, #5
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	4413      	add	r3, r2
 800eb6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	0151      	lsls	r1, r2, #5
 800eb74:	693a      	ldr	r2, [r7, #16]
 800eb76:	440a      	add	r2, r1
 800eb78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eb7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb80:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800eb82:	e06f      	b.n	800ec64 <USB_HC_Halt+0x1f0>
          break;
 800eb84:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800eb86:	e06d      	b.n	800ec64 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	015a      	lsls	r2, r3, #5
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	4413      	add	r3, r2
 800eb90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	0151      	lsls	r1, r2, #5
 800eb9a:	693a      	ldr	r2, [r7, #16]
 800eb9c:	440a      	add	r2, r1
 800eb9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eba6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ebae:	691b      	ldr	r3, [r3, #16]
 800ebb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d143      	bne.n	800ec40 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	015a      	lsls	r2, r3, #5
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	0151      	lsls	r1, r2, #5
 800ebca:	693a      	ldr	r2, [r7, #16]
 800ebcc:	440a      	add	r2, r1
 800ebce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ebd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	015a      	lsls	r2, r3, #5
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	4413      	add	r3, r2
 800ebe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	0151      	lsls	r1, r2, #5
 800ebea:	693a      	ldr	r2, [r7, #16]
 800ebec:	440a      	add	r2, r1
 800ebee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ebf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ebf6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	015a      	lsls	r2, r3, #5
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	4413      	add	r3, r2
 800ec00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	68fa      	ldr	r2, [r7, #12]
 800ec08:	0151      	lsls	r1, r2, #5
 800ec0a:	693a      	ldr	r2, [r7, #16]
 800ec0c:	440a      	add	r2, r1
 800ec0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ec12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ec16:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	617b      	str	r3, [r7, #20]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec24:	d81d      	bhi.n	800ec62 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	015a      	lsls	r2, r3, #5
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec3c:	d0ec      	beq.n	800ec18 <USB_HC_Halt+0x1a4>
 800ec3e:	e011      	b.n	800ec64 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68fa      	ldr	r2, [r7, #12]
 800ec50:	0151      	lsls	r1, r2, #5
 800ec52:	693a      	ldr	r2, [r7, #16]
 800ec54:	440a      	add	r2, r1
 800ec56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ec5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ec5e:	6013      	str	r3, [r2, #0]
 800ec60:	e000      	b.n	800ec64 <USB_HC_Halt+0x1f0>
          break;
 800ec62:	bf00      	nop
    }
  }

  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	371c      	adds	r7, #28
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
	...

0800ec74 <aiInit>:
double mapf(double x, double in_min, double in_max, double out_min, double out_max);
/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b090      	sub	sp, #64	; 0x40
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 800ec7c:	4b28      	ldr	r3, [pc, #160]	; (800ed20 <aiInit+0xac>)
 800ec7e:	60fb      	str	r3, [r7, #12]
 800ec80:	2301      	movs	r3, #1
 800ec82:	823b      	strh	r3, [r7, #16]
 800ec84:	2301      	movs	r3, #1
 800ec86:	827b      	strh	r3, [r7, #18]
 800ec88:	2301      	movs	r3, #1
 800ec8a:	82bb      	strh	r3, [r7, #20]
 800ec8c:	f240 5304 	movw	r3, #1284	; 0x504
 800ec90:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800ec92:	f000 faed 	bl	800f270 <ai_network_data_weights_get>
 800ec96:	4603      	mov	r3, r0
    const ai_network_params params = {
 800ec98:	61fb      	str	r3, [r7, #28]
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	623b      	str	r3, [r7, #32]
 800ec9e:	4b21      	ldr	r3, [pc, #132]	; (800ed24 <aiInit+0xb0>)
 800eca0:	627b      	str	r3, [r7, #36]	; 0x24
 800eca2:	2301      	movs	r3, #1
 800eca4:	853b      	strh	r3, [r7, #40]	; 0x28
 800eca6:	2301      	movs	r3, #1
 800eca8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ecaa:	2301      	movs	r3, #1
 800ecac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ecae:	2380      	movs	r3, #128	; 0x80
 800ecb0:	633b      	str	r3, [r7, #48]	; 0x30
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	637b      	str	r3, [r7, #52]	; 0x34
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800ecba:	2100      	movs	r1, #0
 800ecbc:	481a      	ldr	r0, [pc, #104]	; (800ed28 <aiInit+0xb4>)
 800ecbe:	f000 fa71 	bl	800f1a4 <ai_network_create>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 800ecc6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <aiInit+0x60>
	    return -1;
 800ecce:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd2:	e020      	b.n	800ed16 <aiInit+0xa2>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 800ecd4:	4b14      	ldr	r3, [pc, #80]	; (800ed28 <aiInit+0xb4>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f107 020c 	add.w	r2, r7, #12
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f000 fa82 	bl	800f1e8 <ai_network_init>
 800ece4:	4603      	mov	r3, r0
 800ece6:	f083 0301 	eor.w	r3, r3, #1
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d011      	beq.n	800ed14 <aiInit+0xa0>
        err = ai_network_get_error(network);
 800ecf0:	4b0d      	ldr	r3, [pc, #52]	; (800ed28 <aiInit+0xb4>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 fa49 	bl	800f18c <ai_network_get_error>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_network_destroy(network);
 800ecfe:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <aiInit+0xb4>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 fa64 	bl	800f1d0 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 800ed08:	4b07      	ldr	r3, [pc, #28]	; (800ed28 <aiInit+0xb4>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	601a      	str	r2, [r3, #0]
	    return -2;
 800ed0e:	f06f 0301 	mvn.w	r3, #1
 800ed12:	e000      	b.n	800ed16 <aiInit+0xa2>
    }

    return 0;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3740      	adds	r7, #64	; 0x40
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	40040440 	.word	0x40040440
 800ed24:	00040440 	.word	0x00040440
 800ed28:	2000088c 	.word	0x2000088c

0800ed2c <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b084      	sub	sp, #16
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d006      	beq.n	800ed4a <aiRun+0x1e>
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d003      	beq.n	800ed4a <aiRun+0x1e>
 800ed42:	4b17      	ldr	r3, [pc, #92]	; (800eda0 <aiRun+0x74>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <aiRun+0x24>
        return -1;
 800ed4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed4e:	e022      	b.n	800ed96 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 800ed50:	4b14      	ldr	r3, [pc, #80]	; (800eda4 <aiRun+0x78>)
 800ed52:	2201      	movs	r2, #1
 800ed54:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800ed56:	4a13      	ldr	r2, [pc, #76]	; (800eda4 <aiRun+0x78>)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 800ed5c:	4b12      	ldr	r3, [pc, #72]	; (800eda8 <aiRun+0x7c>)
 800ed5e:	2201      	movs	r2, #1
 800ed60:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800ed62:	4a11      	ldr	r2, [pc, #68]	; (800eda8 <aiRun+0x7c>)
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800ed68:	4b0d      	ldr	r3, [pc, #52]	; (800eda0 <aiRun+0x74>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a0e      	ldr	r2, [pc, #56]	; (800eda8 <aiRun+0x7c>)
 800ed6e:	490d      	ldr	r1, [pc, #52]	; (800eda4 <aiRun+0x78>)
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 fa6c 	bl	800f24e <ai_network_run>
 800ed76:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d00a      	beq.n	800ed94 <aiRun+0x68>
        err = ai_network_get_error(network);
 800ed7e:	4b08      	ldr	r3, [pc, #32]	; (800eda0 <aiRun+0x74>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f000 fa02 	bl	800f18c <ai_network_get_error>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800ed92:	e000      	b.n	800ed96 <aiRun+0x6a>
    }

    return 0;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	2000088c 	.word	0x2000088c
 800eda4:	2000005c 	.word	0x2000005c
 800eda8:	20000074 	.word	0x20000074

0800edac <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800edb0:	4802      	ldr	r0, [pc, #8]	; (800edbc <MX_X_CUBE_AI_Init+0x10>)
 800edb2:	f7ff ff5f 	bl	800ec74 <aiInit>
    /* USER CODE END 0 */
}
 800edb6:	bf00      	nop
 800edb8:	bd80      	pop	{r7, pc}
 800edba:	bf00      	nop
 800edbc:	20000894 	.word	0x20000894

0800edc0 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800edc0:	b590      	push	{r4, r7, lr}
 800edc2:	b08b      	sub	sp, #44	; 0x2c
 800edc4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 1 */
    float positiin = (float) inference_count/kInferencesPerCycle;
 800edc6:	4b68      	ldr	r3, [pc, #416]	; (800ef68 <MX_X_CUBE_AI_Process+0x1a8>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	ee07 3a90 	vmov	s15, r3
 800edce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800edd2:	eddf 7a66 	vldr	s15, [pc, #408]	; 800ef6c <MX_X_CUBE_AI_Process+0x1ac>
 800edd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800edda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edde:	edc7 7a08 	vstr	s15, [r7, #32]
    float x_val = positiin * kXrange;
 800ede2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800ef70 <MX_X_CUBE_AI_Process+0x1b0>
 800ede6:	edd7 7a08 	vldr	s15, [r7, #32]
 800edea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edee:	edc7 7a02 	vstr	s15, [r7, #8]
    static ai_i8 in_data[AI_NETWORK_IN_1_SIZE_BYTES];

    AI_ALIGNED(4)
    static ai_i8 out_data[AI_NETWORK_OUT_1_SIZE_BYTES];

    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800edf2:	4860      	ldr	r0, [pc, #384]	; (800ef74 <MX_X_CUBE_AI_Process+0x1b4>)
 800edf4:	f7f8 fd30 	bl	8007858 <BSP_LCD_SetTextColor>
    uint8_t* bfr = (uint8_t*)(void*)&x_val;
 800edf8:	f107 0308 	add.w	r3, r7, #8
 800edfc:	61fb      	str	r3, [r7, #28]
    for(i=0;i<4;i++){
 800edfe:	2300      	movs	r3, #0
 800ee00:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee02:	e00a      	b.n	800ee1a <MX_X_CUBE_AI_Process+0x5a>
    	in_data[i]=bfr[i];
 800ee04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee06:	69fa      	ldr	r2, [r7, #28]
 800ee08:	4413      	add	r3, r2
 800ee0a:	781a      	ldrb	r2, [r3, #0]
 800ee0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee0e:	b251      	sxtb	r1, r2
 800ee10:	4a59      	ldr	r2, [pc, #356]	; (800ef78 <MX_X_CUBE_AI_Process+0x1b8>)
 800ee12:	54d1      	strb	r1, [r2, r3]
    for(i=0;i<4;i++){
 800ee14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee16:	3301      	adds	r3, #1
 800ee18:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee1c:	2b03      	cmp	r3, #3
 800ee1e:	d9f1      	bls.n	800ee04 <MX_X_CUBE_AI_Process+0x44>
    }
     /* Perform the inference */
        res = aiRun(in_data, out_data);
 800ee20:	4956      	ldr	r1, [pc, #344]	; (800ef7c <MX_X_CUBE_AI_Process+0x1bc>)
 800ee22:	4855      	ldr	r0, [pc, #340]	; (800ef78 <MX_X_CUBE_AI_Process+0x1b8>)
 800ee24:	f7ff ff82 	bl	800ed2c <aiRun>
 800ee28:	61b8      	str	r0, [r7, #24]
        if (res) {
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d17f      	bne.n	800ef30 <MX_X_CUBE_AI_Process+0x170>
            // ...
            return;
        }

        /* Post-Process - process the output buffer */
        uint8_t* p = (uint8_t*)(void*)&y_val;
 800ee30:	1d3b      	adds	r3, r7, #4
 800ee32:	617b      	str	r3, [r7, #20]
        for(i=0;i<4;i++){
 800ee34:	2300      	movs	r3, #0
 800ee36:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee38:	e00a      	b.n	800ee50 <MX_X_CUBE_AI_Process+0x90>
        	p[i]=out_data[i];
 800ee3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee3c:	4a4f      	ldr	r2, [pc, #316]	; (800ef7c <MX_X_CUBE_AI_Process+0x1bc>)
 800ee3e:	56d1      	ldrsb	r1, [r2, r3]
 800ee40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee42:	697a      	ldr	r2, [r7, #20]
 800ee44:	4413      	add	r3, r2
 800ee46:	b2ca      	uxtb	r2, r1
 800ee48:	701a      	strb	r2, [r3, #0]
        for(i=0;i<4;i++){
 800ee4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee52:	2b03      	cmp	r3, #3
 800ee54:	d9f1      	bls.n	800ee3a <MX_X_CUBE_AI_Process+0x7a>
        }


        //Display
        pixel_x = mapf(x_val,0, 2*3.1415,0, 240);
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7f6 fc8b 	bl	8005774 <__aeabi_f2d>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	460c      	mov	r4, r1
 800ee62:	ed9f 4b35 	vldr	d4, [pc, #212]	; 800ef38 <MX_X_CUBE_AI_Process+0x178>
 800ee66:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800ef40 <MX_X_CUBE_AI_Process+0x180>
 800ee6a:	ed9f 2b37 	vldr	d2, [pc, #220]	; 800ef48 <MX_X_CUBE_AI_Process+0x188>
 800ee6e:	ed9f 1b34 	vldr	d1, [pc, #208]	; 800ef40 <MX_X_CUBE_AI_Process+0x180>
 800ee72:	ec44 3b10 	vmov	d0, r3, r4
 800ee76:	f000 f889 	bl	800ef8c <mapf>
 800ee7a:	ec54 3b10 	vmov	r3, r4, d0
 800ee7e:	4618      	mov	r0, r3
 800ee80:	4621      	mov	r1, r4
 800ee82:	f7f6 fee1 	bl	8005c48 <__aeabi_d2f>
 800ee86:	4603      	mov	r3, r0
 800ee88:	613b      	str	r3, [r7, #16]
        pixel_y = mapf(y_val,-1.75,1.75,50, 240);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f6 fc71 	bl	8005774 <__aeabi_f2d>
 800ee92:	4603      	mov	r3, r0
 800ee94:	460c      	mov	r4, r1
 800ee96:	ed9f 4b28 	vldr	d4, [pc, #160]	; 800ef38 <MX_X_CUBE_AI_Process+0x178>
 800ee9a:	ed9f 3b2d 	vldr	d3, [pc, #180]	; 800ef50 <MX_X_CUBE_AI_Process+0x190>
 800ee9e:	ed9f 2b2e 	vldr	d2, [pc, #184]	; 800ef58 <MX_X_CUBE_AI_Process+0x198>
 800eea2:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 800ef60 <MX_X_CUBE_AI_Process+0x1a0>
 800eea6:	ec44 3b10 	vmov	d0, r3, r4
 800eeaa:	f000 f86f 	bl	800ef8c <mapf>
 800eeae:	ec54 3b10 	vmov	r3, r4, d0
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	f7f6 fec7 	bl	8005c48 <__aeabi_d2f>
 800eeba:	4603      	mov	r3, r0
 800eebc:	60fb      	str	r3, [r7, #12]

        if(pixel_x==0){
 800eebe:	edd7 7a04 	vldr	s15, [r7, #16]
 800eec2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	d108      	bne.n	800eede <MX_X_CUBE_AI_Process+0x11e>
        	 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800eecc:	482c      	ldr	r0, [pc, #176]	; (800ef80 <MX_X_CUBE_AI_Process+0x1c0>)
 800eece:	f7f8 fcc3 	bl	8007858 <BSP_LCD_SetTextColor>
        	BSP_LCD_FillRect(0, 50, 240, 200);
 800eed2:	23c8      	movs	r3, #200	; 0xc8
 800eed4:	22f0      	movs	r2, #240	; 0xf0
 800eed6:	2132      	movs	r1, #50	; 0x32
 800eed8:	2000      	movs	r0, #0
 800eeda:	f7f8 ff8b 	bl	8007df4 <BSP_LCD_FillRect>
        }

        BSP_LCD_FillCircle(pixel_x, pixel_y, 2);
 800eede:	edd7 7a04 	vldr	s15, [r7, #16]
 800eee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eee6:	ee17 3a90 	vmov	r3, s15
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	edd7 7a03 	vldr	s15, [r7, #12]
 800eef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eef4:	ee17 2a90 	vmov	r2, s15
 800eef8:	b291      	uxth	r1, r2
 800eefa:	2202      	movs	r2, #2
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7f8 ffd3 	bl	8007ea8 <BSP_LCD_FillCircle>

        last_pixel_x = pixel_x;
 800ef02:	4a20      	ldr	r2, [pc, #128]	; (800ef84 <MX_X_CUBE_AI_Process+0x1c4>)
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	6013      	str	r3, [r2, #0]
        last_pixel_y = pixel_y;
 800ef08:	4a1f      	ldr	r2, [pc, #124]	; (800ef88 <MX_X_CUBE_AI_Process+0x1c8>)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6013      	str	r3, [r2, #0]


        inference_count +=1;
 800ef0e:	4b16      	ldr	r3, [pc, #88]	; (800ef68 <MX_X_CUBE_AI_Process+0x1a8>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	3301      	adds	r3, #1
 800ef14:	4a14      	ldr	r2, [pc, #80]	; (800ef68 <MX_X_CUBE_AI_Process+0x1a8>)
 800ef16:	6013      	str	r3, [r2, #0]

        if(inference_count>=kInferencesPerCycle)
 800ef18:	4b13      	ldr	r3, [pc, #76]	; (800ef68 <MX_X_CUBE_AI_Process+0x1a8>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	22c8      	movs	r2, #200	; 0xc8
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	db02      	blt.n	800ef28 <MX_X_CUBE_AI_Process+0x168>
        	inference_count=0;
 800ef22:	4b11      	ldr	r3, [pc, #68]	; (800ef68 <MX_X_CUBE_AI_Process+0x1a8>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	601a      	str	r2, [r3, #0]

        HAL_Delay(5);
 800ef28:	2005      	movs	r0, #5
 800ef2a:	f7f9 fc67 	bl	80087fc <HAL_Delay>
 800ef2e:	e000      	b.n	800ef32 <MX_X_CUBE_AI_Process+0x172>
            return;
 800ef30:	bf00      	nop
        // ...
    /* USER CODE END 1 */
}
 800ef32:	372c      	adds	r7, #44	; 0x2c
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd90      	pop	{r4, r7, pc}
 800ef38:	00000000 	.word	0x00000000
 800ef3c:	406e0000 	.word	0x406e0000
	...
 800ef48:	c083126f 	.word	0xc083126f
 800ef4c:	401921ca 	.word	0x401921ca
 800ef50:	00000000 	.word	0x00000000
 800ef54:	40490000 	.word	0x40490000
 800ef58:	00000000 	.word	0x00000000
 800ef5c:	3ffc0000 	.word	0x3ffc0000
 800ef60:	00000000 	.word	0x00000000
 800ef64:	bffc0000 	.word	0xbffc0000
 800ef68:	20000890 	.word	0x20000890
 800ef6c:	000000c8 	.word	0x000000c8
 800ef70:	40c90fdb 	.word	0x40c90fdb
 800ef74:	ffff0000 	.word	0xffff0000
 800ef78:	20000914 	.word	0x20000914
 800ef7c:	20000918 	.word	0x20000918
 800ef80:	ff0000ff 	.word	0xff0000ff
 800ef84:	2000091c 	.word	0x2000091c
 800ef88:	20000920 	.word	0x20000920

0800ef8c <mapf>:

double mapf(double x, double in_min, double in_max, double out_min, double out_max) {
 800ef8c:	b5b0      	push	{r4, r5, r7, lr}
 800ef8e:	b08a      	sub	sp, #40	; 0x28
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	ed87 0b08 	vstr	d0, [r7, #32]
 800ef96:	ed87 1b06 	vstr	d1, [r7, #24]
 800ef9a:	ed87 2b04 	vstr	d2, [r7, #16]
 800ef9e:	ed87 3b02 	vstr	d3, [r7, #8]
 800efa2:	ed87 4b00 	vstr	d4, [r7]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800efa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800efaa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800efae:	f7f6 fa81 	bl	80054b4 <__aeabi_dsub>
 800efb2:	4603      	mov	r3, r0
 800efb4:	460c      	mov	r4, r1
 800efb6:	4625      	mov	r5, r4
 800efb8:	461c      	mov	r4, r3
 800efba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800efbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800efc2:	f7f6 fa77 	bl	80054b4 <__aeabi_dsub>
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	4620      	mov	r0, r4
 800efcc:	4629      	mov	r1, r5
 800efce:	f7f6 fc29 	bl	8005824 <__aeabi_dmul>
 800efd2:	4603      	mov	r3, r0
 800efd4:	460c      	mov	r4, r1
 800efd6:	4625      	mov	r5, r4
 800efd8:	461c      	mov	r4, r3
 800efda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800efde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efe2:	f7f6 fa67 	bl	80054b4 <__aeabi_dsub>
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	4620      	mov	r0, r4
 800efec:	4629      	mov	r1, r5
 800efee:	f7f6 fd43 	bl	8005a78 <__aeabi_ddiv>
 800eff2:	4603      	mov	r3, r0
 800eff4:	460c      	mov	r4, r1
 800eff6:	4618      	mov	r0, r3
 800eff8:	4621      	mov	r1, r4
 800effa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800effe:	f7f6 fa5b 	bl	80054b8 <__adddf3>
 800f002:	4603      	mov	r3, r0
 800f004:	460c      	mov	r4, r1
 800f006:	ec44 3b17 	vmov	d7, r3, r4
}
 800f00a:	eeb0 0a47 	vmov.f32	s0, s14
 800f00e:	eef0 0a67 	vmov.f32	s1, s15
 800f012:	3728      	adds	r7, #40	; 0x28
 800f014:	46bd      	mov	sp, r7
 800f016:	bdb0      	pop	{r4, r5, r7, pc}

0800f018 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800f018:	b480      	push	{r7}
 800f01a:	b085      	sub	sp, #20
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	691b      	ldr	r3, [r3, #16]
 800f026:	3303      	adds	r3, #3
 800f028:	f023 0303 	bic.w	r3, r3, #3
 800f02c:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800f02e:	4b17      	ldr	r3, [pc, #92]	; (800f08c <network_configure_activations+0x74>)
 800f030:	2200      	movs	r2, #0
 800f032:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800f034:	4b15      	ldr	r3, [pc, #84]	; (800f08c <network_configure_activations+0x74>)
 800f036:	2200      	movs	r2, #0
 800f038:	60da      	str	r2, [r3, #12]
    dense_0_output_array.data = AI_PTR(activations + 0);
 800f03a:	4a15      	ldr	r2, [pc, #84]	; (800f090 <network_configure_activations+0x78>)
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(activations + 0);
 800f040:	4a13      	ldr	r2, [pc, #76]	; (800f090 <network_configure_activations+0x78>)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	60d3      	str	r3, [r2, #12]
    nl_0_output_array.data = AI_PTR(activations + 0);
 800f046:	4a13      	ldr	r2, [pc, #76]	; (800f094 <network_configure_activations+0x7c>)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	6093      	str	r3, [r2, #8]
    nl_0_output_array.data_start = AI_PTR(activations + 0);
 800f04c:	4a11      	ldr	r2, [pc, #68]	; (800f094 <network_configure_activations+0x7c>)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 64);
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	3340      	adds	r3, #64	; 0x40
 800f056:	4a10      	ldr	r2, [pc, #64]	; (800f098 <network_configure_activations+0x80>)
 800f058:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 64);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3340      	adds	r3, #64	; 0x40
 800f05e:	4a0e      	ldr	r2, [pc, #56]	; (800f098 <network_configure_activations+0x80>)
 800f060:	60d3      	str	r3, [r2, #12]
    nl_1_output_array.data = AI_PTR(activations + 64);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	3340      	adds	r3, #64	; 0x40
 800f066:	4a0d      	ldr	r2, [pc, #52]	; (800f09c <network_configure_activations+0x84>)
 800f068:	6093      	str	r3, [r2, #8]
    nl_1_output_array.data_start = AI_PTR(activations + 64);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	3340      	adds	r3, #64	; 0x40
 800f06e:	4a0b      	ldr	r2, [pc, #44]	; (800f09c <network_configure_activations+0x84>)
 800f070:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(NULL);
 800f072:	4b0b      	ldr	r3, [pc, #44]	; (800f0a0 <network_configure_activations+0x88>)
 800f074:	2200      	movs	r2, #0
 800f076:	609a      	str	r2, [r3, #8]
    dense_2_output_array.data_start = AI_PTR(NULL);
 800f078:	4b09      	ldr	r3, [pc, #36]	; (800f0a0 <network_configure_activations+0x88>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800f07e:	2301      	movs	r3, #1
}
 800f080:	4618      	mov	r0, r3
 800f082:	3714      	adds	r7, #20
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr
 800f08c:	20000144 	.word	0x20000144
 800f090:	20000154 	.word	0x20000154
 800f094:	20000164 	.word	0x20000164
 800f098:	20000174 	.word	0x20000174
 800f09c:	20000184 	.word	0x20000184
 800f0a0:	20000194 	.word	0x20000194

0800f0a4 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800f0b4:	4b2f      	ldr	r3, [pc, #188]	; (800f174 <network_configure_weights+0xd0>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0bc:	4a2d      	ldr	r2, [pc, #180]	; (800f174 <network_configure_weights+0xd0>)
 800f0be:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 1280);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0c6:	4a2b      	ldr	r2, [pc, #172]	; (800f174 <network_configure_weights+0xd0>)
 800f0c8:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 1280);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f0d0:	4a28      	ldr	r2, [pc, #160]	; (800f174 <network_configure_weights+0xd0>)
 800f0d2:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800f0d4:	4b28      	ldr	r3, [pc, #160]	; (800f178 <network_configure_weights+0xd4>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0dc:	4a26      	ldr	r2, [pc, #152]	; (800f178 <network_configure_weights+0xd4>)
 800f0de:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 1216);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800f0e6:	4a24      	ldr	r2, [pc, #144]	; (800f178 <network_configure_weights+0xd4>)
 800f0e8:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 1216);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800f0f0:	4a21      	ldr	r2, [pc, #132]	; (800f178 <network_configure_weights+0xd4>)
 800f0f2:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800f0f4:	4b21      	ldr	r3, [pc, #132]	; (800f17c <network_configure_weights+0xd8>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f0fc:	4a1f      	ldr	r2, [pc, #124]	; (800f17c <network_configure_weights+0xd8>)
 800f0fe:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 1152);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800f106:	4a1d      	ldr	r2, [pc, #116]	; (800f17c <network_configure_weights+0xd8>)
 800f108:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 1152);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800f110:	4a1a      	ldr	r2, [pc, #104]	; (800f17c <network_configure_weights+0xd8>)
 800f112:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800f114:	4b1a      	ldr	r3, [pc, #104]	; (800f180 <network_configure_weights+0xdc>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f11c:	4a18      	ldr	r2, [pc, #96]	; (800f180 <network_configure_weights+0xdc>)
 800f11e:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 128);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	3380      	adds	r3, #128	; 0x80
 800f124:	4a16      	ldr	r2, [pc, #88]	; (800f180 <network_configure_weights+0xdc>)
 800f126:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 128);
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	3380      	adds	r3, #128	; 0x80
 800f12c:	4a14      	ldr	r2, [pc, #80]	; (800f180 <network_configure_weights+0xdc>)
 800f12e:	60d3      	str	r3, [r2, #12]
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800f130:	4b14      	ldr	r3, [pc, #80]	; (800f184 <network_configure_weights+0xe0>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f138:	4a12      	ldr	r2, [pc, #72]	; (800f184 <network_configure_weights+0xe0>)
 800f13a:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(weights + 64);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	3340      	adds	r3, #64	; 0x40
 800f140:	4a10      	ldr	r2, [pc, #64]	; (800f184 <network_configure_weights+0xe0>)
 800f142:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(weights + 64);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	3340      	adds	r3, #64	; 0x40
 800f148:	4a0e      	ldr	r2, [pc, #56]	; (800f184 <network_configure_weights+0xe0>)
 800f14a:	60d3      	str	r3, [r2, #12]
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800f14c:	4b0e      	ldr	r3, [pc, #56]	; (800f188 <network_configure_weights+0xe4>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f154:	4a0c      	ldr	r2, [pc, #48]	; (800f188 <network_configure_weights+0xe4>)
 800f156:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(weights + 0);
 800f158:	4a0b      	ldr	r2, [pc, #44]	; (800f188 <network_configure_weights+0xe4>)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(weights + 0);
 800f15e:	4a0a      	ldr	r2, [pc, #40]	; (800f188 <network_configure_weights+0xe4>)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800f164:	2301      	movs	r3, #1
}
 800f166:	4618      	mov	r0, r3
 800f168:	3714      	adds	r7, #20
 800f16a:	46bd      	mov	sp, r7
 800f16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f170:	4770      	bx	lr
 800f172:	bf00      	nop
 800f174:	200000e4 	.word	0x200000e4
 800f178:	200000f4 	.word	0x200000f4
 800f17c:	20000104 	.word	0x20000104
 800f180:	20000114 	.word	0x20000114
 800f184:	20000124 	.word	0x20000124
 800f188:	20000134 	.word	0x20000134

0800f18c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f7f1 f926 	bl	80003e6 <ai_platform_network_get_error>
 800f19a:	4603      	mov	r3, r0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	9301      	str	r3, [sp, #4]
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4a04      	ldr	r2, [pc, #16]	; (800f1cc <ai_network_create+0x28>)
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7f1 f9fd 	bl	80005bc <ai_platform_network_create>
 800f1c2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	2000008c 	.word	0x2000008c

0800f1d0 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b082      	sub	sp, #8
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7f1 fa34 	bl	8000646 <ai_platform_network_destroy>
 800f1de:	4603      	mov	r3, r0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7f1 fa49 	bl	800068c <ai_platform_network_init>
 800f1fa:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <ai_network_init+0x1e>
 800f202:	2300      	movs	r3, #0
 800f204:	e01f      	b.n	800f246 <ai_network_init+0x5e>

  ai_bool ok = true;
 800f206:	2301      	movs	r3, #1
 800f208:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	4619      	mov	r1, r3
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f7ff ff48 	bl	800f0a4 <network_configure_weights>
 800f214:	4603      	mov	r3, r0
 800f216:	461a      	mov	r2, r3
 800f218:	7afb      	ldrb	r3, [r7, #11]
 800f21a:	4013      	ands	r3, r2
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	bf14      	ite	ne
 800f220:	2301      	movne	r3, #1
 800f222:	2300      	moveq	r3, #0
 800f224:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	3318      	adds	r3, #24
 800f22a:	4619      	mov	r1, r3
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7ff fef3 	bl	800f018 <network_configure_activations>
 800f232:	4603      	mov	r3, r0
 800f234:	461a      	mov	r2, r3
 800f236:	7afb      	ldrb	r3, [r7, #11]
 800f238:	4013      	ands	r3, r2
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bf14      	ite	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	2300      	moveq	r3, #0
 800f242:	72fb      	strb	r3, [r7, #11]

  return ok;
 800f244:	7afb      	ldrb	r3, [r7, #11]
}
 800f246:	4618      	mov	r0, r3
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b084      	sub	sp, #16
 800f252:	af00      	add	r7, sp, #0
 800f254:	60f8      	str	r0, [r7, #12]
 800f256:	60b9      	str	r1, [r7, #8]
 800f258:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	68b9      	ldr	r1, [r7, #8]
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7f1 fa70 	bl	8000744 <ai_platform_network_process>
 800f264:	4603      	mov	r3, r0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3710      	adds	r7, #16
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
	...

0800f270 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800f270:	b480      	push	{r7}
 800f272:	af00      	add	r7, sp, #0
    0x5b, 0xcb, 0x3f, 0x52, 0xb9, 0xed, 0xbe, 0x2e, 0xa7,
    0xc6, 0xbe, 0xaf, 0x0f, 0x14, 0xbf, 0xb3, 0xda, 0x59,
    0x3f, 0x02, 0xec, 0xd7, 0xbe, 0x66, 0x11, 0x1f, 0xbf
  };

  return AI_HANDLE_PTR(s_network_weights);
 800f274:	4b02      	ldr	r3, [pc, #8]	; (800f280 <ai_network_data_weights_get+0x10>)

}
 800f276:	4618      	mov	r0, r3
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	08014fb8 	.word	0x08014fb8

0800f284 <__aeabi_memclr>:
 800f284:	2200      	movs	r2, #0
 800f286:	f7f6 b8c3 	b.w	8005410 <__aeabi_memset>

0800f28a <__aeabi_memcpy>:
 800f28a:	f000 b83a 	b.w	800f302 <memcpy>
	...

0800f290 <__errno>:
 800f290:	4b01      	ldr	r3, [pc, #4]	; (800f298 <__errno+0x8>)
 800f292:	6818      	ldr	r0, [r3, #0]
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	2000065c 	.word	0x2000065c

0800f29c <__libc_init_array>:
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	4e0d      	ldr	r6, [pc, #52]	; (800f2d4 <__libc_init_array+0x38>)
 800f2a0:	4c0d      	ldr	r4, [pc, #52]	; (800f2d8 <__libc_init_array+0x3c>)
 800f2a2:	1ba4      	subs	r4, r4, r6
 800f2a4:	10a4      	asrs	r4, r4, #2
 800f2a6:	2500      	movs	r5, #0
 800f2a8:	42a5      	cmp	r5, r4
 800f2aa:	d109      	bne.n	800f2c0 <__libc_init_array+0x24>
 800f2ac:	4e0b      	ldr	r6, [pc, #44]	; (800f2dc <__libc_init_array+0x40>)
 800f2ae:	4c0c      	ldr	r4, [pc, #48]	; (800f2e0 <__libc_init_array+0x44>)
 800f2b0:	f003 fa98 	bl	80127e4 <_init>
 800f2b4:	1ba4      	subs	r4, r4, r6
 800f2b6:	10a4      	asrs	r4, r4, #2
 800f2b8:	2500      	movs	r5, #0
 800f2ba:	42a5      	cmp	r5, r4
 800f2bc:	d105      	bne.n	800f2ca <__libc_init_array+0x2e>
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f2c4:	4798      	blx	r3
 800f2c6:	3501      	adds	r5, #1
 800f2c8:	e7ee      	b.n	800f2a8 <__libc_init_array+0xc>
 800f2ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f2ce:	4798      	blx	r3
 800f2d0:	3501      	adds	r5, #1
 800f2d2:	e7f2      	b.n	800f2ba <__libc_init_array+0x1e>
 800f2d4:	0801592c 	.word	0x0801592c
 800f2d8:	0801592c 	.word	0x0801592c
 800f2dc:	0801592c 	.word	0x0801592c
 800f2e0:	08015930 	.word	0x08015930

0800f2e4 <memcmp>:
 800f2e4:	b530      	push	{r4, r5, lr}
 800f2e6:	2400      	movs	r4, #0
 800f2e8:	42a2      	cmp	r2, r4
 800f2ea:	d101      	bne.n	800f2f0 <memcmp+0xc>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	e007      	b.n	800f300 <memcmp+0x1c>
 800f2f0:	5d03      	ldrb	r3, [r0, r4]
 800f2f2:	3401      	adds	r4, #1
 800f2f4:	190d      	adds	r5, r1, r4
 800f2f6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f2fa:	42ab      	cmp	r3, r5
 800f2fc:	d0f4      	beq.n	800f2e8 <memcmp+0x4>
 800f2fe:	1b58      	subs	r0, r3, r5
 800f300:	bd30      	pop	{r4, r5, pc}

0800f302 <memcpy>:
 800f302:	b510      	push	{r4, lr}
 800f304:	1e43      	subs	r3, r0, #1
 800f306:	440a      	add	r2, r1
 800f308:	4291      	cmp	r1, r2
 800f30a:	d100      	bne.n	800f30e <memcpy+0xc>
 800f30c:	bd10      	pop	{r4, pc}
 800f30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f316:	e7f7      	b.n	800f308 <memcpy+0x6>

0800f318 <memset>:
 800f318:	4402      	add	r2, r0
 800f31a:	4603      	mov	r3, r0
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d100      	bne.n	800f322 <memset+0xa>
 800f320:	4770      	bx	lr
 800f322:	f803 1b01 	strb.w	r1, [r3], #1
 800f326:	e7f9      	b.n	800f31c <memset+0x4>

0800f328 <asinhf>:
 800f328:	b510      	push	{r4, lr}
 800f32a:	ee10 4a10 	vmov	r4, s0
 800f32e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f332:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f336:	ed2d 8b04 	vpush	{d8-d9}
 800f33a:	eeb0 8a40 	vmov.f32	s16, s0
 800f33e:	db06      	blt.n	800f34e <asinhf+0x26>
 800f340:	ee30 8a00 	vadd.f32	s16, s0, s0
 800f344:	eeb0 0a48 	vmov.f32	s0, s16
 800f348:	ecbd 8b04 	vpop	{d8-d9}
 800f34c:	bd10      	pop	{r4, pc}
 800f34e:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 800f352:	da21      	bge.n	800f398 <asinhf+0x70>
 800f354:	eddf 7a26 	vldr	s15, [pc, #152]	; 800f3f0 <asinhf+0xc8>
 800f358:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f35c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f360:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f368:	dcec      	bgt.n	800f344 <asinhf+0x1c>
 800f36a:	eeb0 0a48 	vmov.f32	s0, s16
 800f36e:	f000 fb77 	bl	800fa60 <fabsf>
 800f372:	ee68 8a08 	vmul.f32	s17, s16, s16
 800f376:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f37a:	eeb0 9a40 	vmov.f32	s18, s0
 800f37e:	ee38 0a88 	vadd.f32	s0, s17, s16
 800f382:	f002 fc11 	bl	8011ba8 <__ieee754_sqrtf>
 800f386:	ee30 8a08 	vadd.f32	s16, s0, s16
 800f38a:	ee88 0a88 	vdiv.f32	s0, s17, s16
 800f38e:	ee30 0a09 	vadd.f32	s0, s0, s18
 800f392:	f000 fbaf 	bl	800faf4 <log1pf>
 800f396:	e028      	b.n	800f3ea <asinhf+0xc2>
 800f398:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 800f39c:	dd0c      	ble.n	800f3b8 <asinhf+0x90>
 800f39e:	f000 fb5f 	bl	800fa60 <fabsf>
 800f3a2:	f001 feb9 	bl	8011118 <__ieee754_logf>
 800f3a6:	ed9f 8a13 	vldr	s16, [pc, #76]	; 800f3f4 <asinhf+0xcc>
 800f3aa:	ee30 8a08 	vadd.f32	s16, s0, s16
 800f3ae:	2c00      	cmp	r4, #0
 800f3b0:	bfd8      	it	le
 800f3b2:	eeb1 8a48 	vnegle.f32	s16, s16
 800f3b6:	e7c5      	b.n	800f344 <asinhf+0x1c>
 800f3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3bc:	ddd5      	ble.n	800f36a <asinhf+0x42>
 800f3be:	f000 fb4f 	bl	800fa60 <fabsf>
 800f3c2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800f3c6:	eef0 8a40 	vmov.f32	s17, s0
 800f3ca:	eeb0 0a49 	vmov.f32	s0, s18
 800f3ce:	eea8 0a08 	vfma.f32	s0, s16, s16
 800f3d2:	f002 fbe9 	bl	8011ba8 <__ieee754_sqrtf>
 800f3d6:	ee70 7a28 	vadd.f32	s15, s0, s17
 800f3da:	ee89 0a27 	vdiv.f32	s0, s18, s15
 800f3de:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f3e2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f3e6:	f001 fe97 	bl	8011118 <__ieee754_logf>
 800f3ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ee:	e7de      	b.n	800f3ae <asinhf+0x86>
 800f3f0:	7149f2ca 	.word	0x7149f2ca
 800f3f4:	3f317218 	.word	0x3f317218

0800f3f8 <atanf>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	ee10 5a10 	vmov	r5, s0
 800f3fe:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f402:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800f406:	eef0 7a40 	vmov.f32	s15, s0
 800f40a:	db10      	blt.n	800f42e <atanf+0x36>
 800f40c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f410:	dd04      	ble.n	800f41c <atanf+0x24>
 800f412:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f416:	eeb0 0a67 	vmov.f32	s0, s15
 800f41a:	bd38      	pop	{r3, r4, r5, pc}
 800f41c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f554 <atanf+0x15c>
 800f420:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800f558 <atanf+0x160>
 800f424:	2d00      	cmp	r5, #0
 800f426:	bfd8      	it	le
 800f428:	eef0 7a47 	vmovle.f32	s15, s14
 800f42c:	e7f3      	b.n	800f416 <atanf+0x1e>
 800f42e:	4b4b      	ldr	r3, [pc, #300]	; (800f55c <atanf+0x164>)
 800f430:	429c      	cmp	r4, r3
 800f432:	dc10      	bgt.n	800f456 <atanf+0x5e>
 800f434:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800f438:	da0a      	bge.n	800f450 <atanf+0x58>
 800f43a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800f560 <atanf+0x168>
 800f43e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f446:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44e:	dce2      	bgt.n	800f416 <atanf+0x1e>
 800f450:	f04f 33ff 	mov.w	r3, #4294967295
 800f454:	e013      	b.n	800f47e <atanf+0x86>
 800f456:	f000 fb03 	bl	800fa60 <fabsf>
 800f45a:	4b42      	ldr	r3, [pc, #264]	; (800f564 <atanf+0x16c>)
 800f45c:	429c      	cmp	r4, r3
 800f45e:	dc4f      	bgt.n	800f500 <atanf+0x108>
 800f460:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800f464:	429c      	cmp	r4, r3
 800f466:	dc41      	bgt.n	800f4ec <atanf+0xf4>
 800f468:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f46c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f470:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f474:	2300      	movs	r3, #0
 800f476:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f47a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f47e:	1c5a      	adds	r2, r3, #1
 800f480:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f484:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800f568 <atanf+0x170>
 800f488:	eddf 5a38 	vldr	s11, [pc, #224]	; 800f56c <atanf+0x174>
 800f48c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800f570 <atanf+0x178>
 800f490:	ee66 6a06 	vmul.f32	s13, s12, s12
 800f494:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f498:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800f574 <atanf+0x17c>
 800f49c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f4a0:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f578 <atanf+0x180>
 800f4a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f4a8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800f57c <atanf+0x184>
 800f4ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f4b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f580 <atanf+0x188>
 800f4b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 800f4b8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800f584 <atanf+0x18c>
 800f4bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 800f4c0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800f588 <atanf+0x190>
 800f4c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f4c8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800f58c <atanf+0x194>
 800f4cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 800f4d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800f590 <atanf+0x198>
 800f4d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 800f4d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f4dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 800f4e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f4e4:	d121      	bne.n	800f52a <atanf+0x132>
 800f4e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4ea:	e794      	b.n	800f416 <atanf+0x1e>
 800f4ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f4f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f4f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f4fe:	e7be      	b.n	800f47e <atanf+0x86>
 800f500:	4b24      	ldr	r3, [pc, #144]	; (800f594 <atanf+0x19c>)
 800f502:	429c      	cmp	r4, r3
 800f504:	dc0b      	bgt.n	800f51e <atanf+0x126>
 800f506:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800f50a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f50e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800f512:	2302      	movs	r3, #2
 800f514:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f51c:	e7af      	b.n	800f47e <atanf+0x86>
 800f51e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f522:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f526:	2303      	movs	r3, #3
 800f528:	e7a9      	b.n	800f47e <atanf+0x86>
 800f52a:	4a1b      	ldr	r2, [pc, #108]	; (800f598 <atanf+0x1a0>)
 800f52c:	491b      	ldr	r1, [pc, #108]	; (800f59c <atanf+0x1a4>)
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	441a      	add	r2, r3
 800f532:	440b      	add	r3, r1
 800f534:	edd3 6a00 	vldr	s13, [r3]
 800f538:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f53c:	2d00      	cmp	r5, #0
 800f53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f542:	ed92 7a00 	vldr	s14, [r2]
 800f546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f54a:	bfb8      	it	lt
 800f54c:	eef1 7a67 	vneglt.f32	s15, s15
 800f550:	e761      	b.n	800f416 <atanf+0x1e>
 800f552:	bf00      	nop
 800f554:	bfc90fdb 	.word	0xbfc90fdb
 800f558:	3fc90fdb 	.word	0x3fc90fdb
 800f55c:	3edfffff 	.word	0x3edfffff
 800f560:	7149f2ca 	.word	0x7149f2ca
 800f564:	3f97ffff 	.word	0x3f97ffff
 800f568:	3c8569d7 	.word	0x3c8569d7
 800f56c:	3d4bda59 	.word	0x3d4bda59
 800f570:	bd6ef16b 	.word	0xbd6ef16b
 800f574:	3d886b35 	.word	0x3d886b35
 800f578:	3dba2e6e 	.word	0x3dba2e6e
 800f57c:	3e124925 	.word	0x3e124925
 800f580:	3eaaaaab 	.word	0x3eaaaaab
 800f584:	bd15a221 	.word	0xbd15a221
 800f588:	bd9d8795 	.word	0xbd9d8795
 800f58c:	bde38e38 	.word	0xbde38e38
 800f590:	be4ccccd 	.word	0xbe4ccccd
 800f594:	401bffff 	.word	0x401bffff
 800f598:	080154bc 	.word	0x080154bc
 800f59c:	080154cc 	.word	0x080154cc

0800f5a0 <ceilf>:
 800f5a0:	ee10 3a10 	vmov	r3, s0
 800f5a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f5a8:	0dca      	lsrs	r2, r1, #23
 800f5aa:	3a7f      	subs	r2, #127	; 0x7f
 800f5ac:	2a16      	cmp	r2, #22
 800f5ae:	dc2a      	bgt.n	800f606 <ceilf+0x66>
 800f5b0:	2a00      	cmp	r2, #0
 800f5b2:	da11      	bge.n	800f5d8 <ceilf+0x38>
 800f5b4:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f618 <ceilf+0x78>
 800f5b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f5bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c4:	dd05      	ble.n	800f5d2 <ceilf+0x32>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	db23      	blt.n	800f612 <ceilf+0x72>
 800f5ca:	2900      	cmp	r1, #0
 800f5cc:	bf18      	it	ne
 800f5ce:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800f5d2:	ee00 3a10 	vmov	s0, r3
 800f5d6:	4770      	bx	lr
 800f5d8:	4910      	ldr	r1, [pc, #64]	; (800f61c <ceilf+0x7c>)
 800f5da:	4111      	asrs	r1, r2
 800f5dc:	420b      	tst	r3, r1
 800f5de:	d0fa      	beq.n	800f5d6 <ceilf+0x36>
 800f5e0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f618 <ceilf+0x78>
 800f5e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f5e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f0:	ddef      	ble.n	800f5d2 <ceilf+0x32>
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	bfc2      	ittt	gt
 800f5f6:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800f5fa:	fa40 f202 	asrgt.w	r2, r0, r2
 800f5fe:	189b      	addgt	r3, r3, r2
 800f600:	ea23 0301 	bic.w	r3, r3, r1
 800f604:	e7e5      	b.n	800f5d2 <ceilf+0x32>
 800f606:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f60a:	d3e4      	bcc.n	800f5d6 <ceilf+0x36>
 800f60c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f610:	4770      	bx	lr
 800f612:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f616:	e7dc      	b.n	800f5d2 <ceilf+0x32>
 800f618:	7149f2ca 	.word	0x7149f2ca
 800f61c:	007fffff 	.word	0x007fffff

0800f620 <cosf>:
 800f620:	ee10 3a10 	vmov	r3, s0
 800f624:	b507      	push	{r0, r1, r2, lr}
 800f626:	4a1c      	ldr	r2, [pc, #112]	; (800f698 <cosf+0x78>)
 800f628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f62c:	4293      	cmp	r3, r2
 800f62e:	dc04      	bgt.n	800f63a <cosf+0x1a>
 800f630:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800f69c <cosf+0x7c>
 800f634:	f002 fabc 	bl	8011bb0 <__kernel_cosf>
 800f638:	e004      	b.n	800f644 <cosf+0x24>
 800f63a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f63e:	db04      	blt.n	800f64a <cosf+0x2a>
 800f640:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f644:	b003      	add	sp, #12
 800f646:	f85d fb04 	ldr.w	pc, [sp], #4
 800f64a:	4668      	mov	r0, sp
 800f64c:	f002 f912 	bl	8011874 <__ieee754_rem_pio2f>
 800f650:	f000 0003 	and.w	r0, r0, #3
 800f654:	2801      	cmp	r0, #1
 800f656:	d007      	beq.n	800f668 <cosf+0x48>
 800f658:	2802      	cmp	r0, #2
 800f65a:	d00e      	beq.n	800f67a <cosf+0x5a>
 800f65c:	b9a0      	cbnz	r0, 800f688 <cosf+0x68>
 800f65e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f662:	ed9d 0a00 	vldr	s0, [sp]
 800f666:	e7e5      	b.n	800f634 <cosf+0x14>
 800f668:	eddd 0a01 	vldr	s1, [sp, #4]
 800f66c:	ed9d 0a00 	vldr	s0, [sp]
 800f670:	f002 fd7e 	bl	8012170 <__kernel_sinf>
 800f674:	eeb1 0a40 	vneg.f32	s0, s0
 800f678:	e7e4      	b.n	800f644 <cosf+0x24>
 800f67a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f67e:	ed9d 0a00 	vldr	s0, [sp]
 800f682:	f002 fa95 	bl	8011bb0 <__kernel_cosf>
 800f686:	e7f5      	b.n	800f674 <cosf+0x54>
 800f688:	2001      	movs	r0, #1
 800f68a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f68e:	ed9d 0a00 	vldr	s0, [sp]
 800f692:	f002 fd6d 	bl	8012170 <__kernel_sinf>
 800f696:	e7d5      	b.n	800f644 <cosf+0x24>
 800f698:	3f490fd8 	.word	0x3f490fd8
 800f69c:	00000000 	.word	0x00000000

0800f6a0 <erff>:
 800f6a0:	b538      	push	{r3, r4, r5, lr}
 800f6a2:	ee10 4a10 	vmov	r4, s0
 800f6a6:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 800f6aa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f6ae:	ed2d 8b06 	vpush	{d8-d10}
 800f6b2:	eef0 7a40 	vmov.f32	s15, s0
 800f6b6:	db12      	blt.n	800f6de <erff+0x3e>
 800f6b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6c0:	0fe4      	lsrs	r4, r4, #31
 800f6c2:	0064      	lsls	r4, r4, #1
 800f6c4:	f1c4 0301 	rsb	r3, r4, #1
 800f6c8:	ee00 3a10 	vmov	s0, r3
 800f6cc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f6d0:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f6d4:	ecbd 8b06 	vpop	{d8-d10}
 800f6d8:	eeb0 0a67 	vmov.f32	s0, s15
 800f6dc:	bd38      	pop	{r3, r4, r5, pc}
 800f6de:	4ba4      	ldr	r3, [pc, #656]	; (800f970 <erff+0x2d0>)
 800f6e0:	429d      	cmp	r5, r3
 800f6e2:	dc4a      	bgt.n	800f77a <erff+0xda>
 800f6e4:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 800f6e8:	da16      	bge.n	800f718 <erff+0x78>
 800f6ea:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 800f6ee:	da0e      	bge.n	800f70e <erff+0x6e>
 800f6f0:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800f974 <erff+0x2d4>
 800f6f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f6f8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800f6fc:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f700:	eef0 7a40 	vmov.f32	s15, s0
 800f704:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f708:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f70c:	e7e2      	b.n	800f6d4 <erff+0x34>
 800f70e:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800f978 <erff+0x2d8>
 800f712:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f716:	e7dd      	b.n	800f6d4 <erff+0x34>
 800f718:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f71c:	ed9f 6a97 	vldr	s12, [pc, #604]	; 800f97c <erff+0x2dc>
 800f720:	eddf 6a97 	vldr	s13, [pc, #604]	; 800f980 <erff+0x2e0>
 800f724:	eddf 5a97 	vldr	s11, [pc, #604]	; 800f984 <erff+0x2e4>
 800f728:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f72c:	ed9f 6a96 	vldr	s12, [pc, #600]	; 800f988 <erff+0x2e8>
 800f730:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f734:	eddf 6a95 	vldr	s13, [pc, #596]	; 800f98c <erff+0x2ec>
 800f738:	eee6 6a07 	vfma.f32	s13, s12, s14
 800f73c:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 800f978 <erff+0x2d8>
 800f740:	eea6 6a87 	vfma.f32	s12, s13, s14
 800f744:	eddf 6a92 	vldr	s13, [pc, #584]	; 800f990 <erff+0x2f0>
 800f748:	eee7 6a25 	vfma.f32	s13, s14, s11
 800f74c:	eddf 5a91 	vldr	s11, [pc, #580]	; 800f994 <erff+0x2f4>
 800f750:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f754:	eddf 6a90 	vldr	s13, [pc, #576]	; 800f998 <erff+0x2f8>
 800f758:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f75c:	eddf 5a8f 	vldr	s11, [pc, #572]	; 800f99c <erff+0x2fc>
 800f760:	eee6 5a87 	vfma.f32	s11, s13, s14
 800f764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f768:	eee5 6a87 	vfma.f32	s13, s11, s14
 800f76c:	eeb0 7a66 	vmov.f32	s14, s13
 800f770:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800f774:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f778:	e7ac      	b.n	800f6d4 <erff+0x34>
 800f77a:	4b89      	ldr	r3, [pc, #548]	; (800f9a0 <erff+0x300>)
 800f77c:	429d      	cmp	r5, r3
 800f77e:	dc44      	bgt.n	800f80a <erff+0x16a>
 800f780:	f000 f96e 	bl	800fa60 <fabsf>
 800f784:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f788:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f78c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800f9a4 <erff+0x304>
 800f790:	eddf 6a85 	vldr	s13, [pc, #532]	; 800f9a8 <erff+0x308>
 800f794:	ed9f 6a85 	vldr	s12, [pc, #532]	; 800f9ac <erff+0x30c>
 800f798:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f79c:	2c00      	cmp	r4, #0
 800f79e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800f9b0 <erff+0x310>
 800f7a2:	eea6 7a80 	vfma.f32	s14, s13, s0
 800f7a6:	eddf 6a83 	vldr	s13, [pc, #524]	; 800f9b4 <erff+0x314>
 800f7aa:	eee7 6a00 	vfma.f32	s13, s14, s0
 800f7ae:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800f9b8 <erff+0x318>
 800f7b2:	eea6 7a80 	vfma.f32	s14, s13, s0
 800f7b6:	eddf 6a81 	vldr	s13, [pc, #516]	; 800f9bc <erff+0x31c>
 800f7ba:	eee7 6a00 	vfma.f32	s13, s14, s0
 800f7be:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800f9c0 <erff+0x320>
 800f7c2:	eea6 7a80 	vfma.f32	s14, s13, s0
 800f7c6:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800f9c4 <erff+0x324>
 800f7ca:	eee0 6a06 	vfma.f32	s13, s0, s12
 800f7ce:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 800f9c8 <erff+0x328>
 800f7d2:	eea6 6a80 	vfma.f32	s12, s13, s0
 800f7d6:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800f9cc <erff+0x32c>
 800f7da:	eee6 6a00 	vfma.f32	s13, s12, s0
 800f7de:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 800f9d0 <erff+0x330>
 800f7e2:	eea6 6a80 	vfma.f32	s12, s13, s0
 800f7e6:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800f9d4 <erff+0x334>
 800f7ea:	eee6 6a00 	vfma.f32	s13, s12, s0
 800f7ee:	eee6 7a80 	vfma.f32	s15, s13, s0
 800f7f2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f7f6:	bfab      	itete	ge
 800f7f8:	eddf 7a77 	vldrge	s15, [pc, #476]	; 800f9d8 <erff+0x338>
 800f7fc:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 800f9dc <erff+0x33c>
 800f800:	ee70 7a27 	vaddge.f32	s15, s0, s15
 800f804:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 800f808:	e764      	b.n	800f6d4 <erff+0x34>
 800f80a:	4b75      	ldr	r3, [pc, #468]	; (800f9e0 <erff+0x340>)
 800f80c:	429d      	cmp	r5, r3
 800f80e:	dd08      	ble.n	800f822 <erff+0x182>
 800f810:	2c00      	cmp	r4, #0
 800f812:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f816:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800f81a:	bfa8      	it	ge
 800f81c:	eef0 7a40 	vmovge.f32	s15, s0
 800f820:	e758      	b.n	800f6d4 <erff+0x34>
 800f822:	f000 f91d 	bl	800fa60 <fabsf>
 800f826:	4b6f      	ldr	r3, [pc, #444]	; (800f9e4 <erff+0x344>)
 800f828:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f82c:	eeb0 9a40 	vmov.f32	s18, s0
 800f830:	429d      	cmp	r5, r3
 800f832:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f836:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800f83a:	eef0 8a40 	vmov.f32	s17, s0
 800f83e:	dc64      	bgt.n	800f90a <erff+0x26a>
 800f840:	eddf 7a69 	vldr	s15, [pc, #420]	; 800f9e8 <erff+0x348>
 800f844:	eddf 6a69 	vldr	s13, [pc, #420]	; 800f9ec <erff+0x34c>
 800f848:	eddf 9a69 	vldr	s19, [pc, #420]	; 800f9f0 <erff+0x350>
 800f84c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f850:	eddf 7a68 	vldr	s15, [pc, #416]	; 800f9f4 <erff+0x354>
 800f854:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f858:	eddf 6a67 	vldr	s13, [pc, #412]	; 800f9f8 <erff+0x358>
 800f85c:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f860:	eddf 7a66 	vldr	s15, [pc, #408]	; 800f9fc <erff+0x35c>
 800f864:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f868:	eddf 6a65 	vldr	s13, [pc, #404]	; 800fa00 <erff+0x360>
 800f86c:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f870:	eddf 7a64 	vldr	s15, [pc, #400]	; 800fa04 <erff+0x364>
 800f874:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f878:	eddf 6a63 	vldr	s13, [pc, #396]	; 800fa08 <erff+0x368>
 800f87c:	eee7 9a87 	vfma.f32	s19, s15, s14
 800f880:	eddf 7a62 	vldr	s15, [pc, #392]	; 800fa0c <erff+0x36c>
 800f884:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f888:	eddf 6a61 	vldr	s13, [pc, #388]	; 800fa10 <erff+0x370>
 800f88c:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f890:	eddf 7a60 	vldr	s15, [pc, #384]	; 800fa14 <erff+0x374>
 800f894:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f898:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fa18 <erff+0x378>
 800f89c:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f8a0:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800fa1c <erff+0x37c>
 800f8a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f8a8:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800fa20 <erff+0x380>
 800f8ac:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f8b0:	eddf 7a5c 	vldr	s15, [pc, #368]	; 800fa24 <erff+0x384>
 800f8b4:	ee19 3a10 	vmov	r3, s18
 800f8b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f8bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f8c0:	f023 030f 	bic.w	r3, r3, #15
 800f8c4:	ee08 3a10 	vmov	s16, r3
 800f8c8:	eef0 aa68 	vmov.f32	s21, s17
 800f8cc:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 800f8d0:	eee7 aa87 	vfma.f32	s21, s15, s14
 800f8d4:	eea8 0a48 	vfms.f32	s0, s16, s16
 800f8d8:	f001 fac2 	bl	8010e60 <__ieee754_expf>
 800f8dc:	eeb0 aa40 	vmov.f32	s20, s0
 800f8e0:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 800f8e4:	ee78 7a49 	vsub.f32	s15, s16, s18
 800f8e8:	ee38 8a09 	vadd.f32	s16, s16, s18
 800f8ec:	eea7 0a88 	vfma.f32	s0, s15, s16
 800f8f0:	f001 fab6 	bl	8010e60 <__ieee754_expf>
 800f8f4:	ee2a 0a00 	vmul.f32	s0, s20, s0
 800f8f8:	2c00      	cmp	r4, #0
 800f8fa:	eec0 7a09 	vdiv.f32	s15, s0, s18
 800f8fe:	bfac      	ite	ge
 800f900:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 800f904:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 800f908:	e6e4      	b.n	800f6d4 <erff+0x34>
 800f90a:	eddf 6a47 	vldr	s13, [pc, #284]	; 800fa28 <erff+0x388>
 800f90e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800fa2c <erff+0x38c>
 800f912:	eddf 9a47 	vldr	s19, [pc, #284]	; 800fa30 <erff+0x390>
 800f916:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f91a:	eddf 6a46 	vldr	s13, [pc, #280]	; 800fa34 <erff+0x394>
 800f91e:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f922:	eddf 7a45 	vldr	s15, [pc, #276]	; 800fa38 <erff+0x398>
 800f926:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f92a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800fa3c <erff+0x39c>
 800f92e:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f932:	eddf 7a43 	vldr	s15, [pc, #268]	; 800fa40 <erff+0x3a0>
 800f936:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f93a:	eddf 6a42 	vldr	s13, [pc, #264]	; 800fa44 <erff+0x3a4>
 800f93e:	eee7 9a87 	vfma.f32	s19, s15, s14
 800f942:	eddf 7a41 	vldr	s15, [pc, #260]	; 800fa48 <erff+0x3a8>
 800f946:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f94a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800fa4c <erff+0x3ac>
 800f94e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f952:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800fa50 <erff+0x3b0>
 800f956:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f95a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800fa54 <erff+0x3b4>
 800f95e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f962:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fa58 <erff+0x3b8>
 800f966:	eee7 6a87 	vfma.f32	s13, s15, s14
 800f96a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800fa5c <erff+0x3bc>
 800f96e:	e7a1      	b.n	800f8b4 <erff+0x214>
 800f970:	3f57ffff 	.word	0x3f57ffff
 800f974:	3f8375d4 	.word	0x3f8375d4
 800f978:	3e0375d4 	.word	0x3e0375d4
 800f97c:	b7c756b1 	.word	0xb7c756b1
 800f980:	bbbd1489 	.word	0xbbbd1489
 800f984:	b684e21a 	.word	0xb684e21a
 800f988:	bce9528f 	.word	0xbce9528f
 800f98c:	bea66beb 	.word	0xbea66beb
 800f990:	390aee49 	.word	0x390aee49
 800f994:	3ba68116 	.word	0x3ba68116
 800f998:	3d852a63 	.word	0x3d852a63
 800f99c:	3ecbbbce 	.word	0x3ecbbbce
 800f9a0:	3f9fffff 	.word	0x3f9fffff
 800f9a4:	bb0df9c0 	.word	0xbb0df9c0
 800f9a8:	3d1151b3 	.word	0x3d1151b3
 800f9ac:	3c445aa3 	.word	0x3c445aa3
 800f9b0:	bde31cc2 	.word	0xbde31cc2
 800f9b4:	3ea2fe54 	.word	0x3ea2fe54
 800f9b8:	bebe9208 	.word	0xbebe9208
 800f9bc:	3ed46805 	.word	0x3ed46805
 800f9c0:	bb1acdc6 	.word	0xbb1acdc6
 800f9c4:	3c5f6e13 	.word	0x3c5f6e13
 800f9c8:	3e013307 	.word	0x3e013307
 800f9cc:	3d931ae7 	.word	0x3d931ae7
 800f9d0:	3f0a5785 	.word	0x3f0a5785
 800f9d4:	3dd9f331 	.word	0x3dd9f331
 800f9d8:	3f58560b 	.word	0x3f58560b
 800f9dc:	bf58560b 	.word	0xbf58560b
 800f9e0:	40bfffff 	.word	0x40bfffff
 800f9e4:	4036db6d 	.word	0x4036db6d
 800f9e8:	c11d077e 	.word	0xc11d077e
 800f9ec:	c2a2932b 	.word	0xc2a2932b
 800f9f0:	bc21a093 	.word	0xbc21a093
 800f9f4:	c3389ae7 	.word	0xc3389ae7
 800f9f8:	c322658c 	.word	0xc322658c
 800f9fc:	c2798057 	.word	0xc2798057
 800fa00:	c128f022 	.word	0xc128f022
 800fa04:	bf31a0b7 	.word	0xbf31a0b7
 800fa08:	bd777f97 	.word	0xbd777f97
 800fa0c:	40d23f7c 	.word	0x40d23f7c
 800fa10:	42d9451f 	.word	0x42d9451f
 800fa14:	43d6810b 	.word	0x43d6810b
 800fa18:	442158c9 	.word	0x442158c9
 800fa1c:	43d9486f 	.word	0x43d9486f
 800fa20:	4309a863 	.word	0x4309a863
 800fa24:	419d35ce 	.word	0x419d35ce
 800fa28:	c3f1c275 	.word	0xc3f1c275
 800fa2c:	c480230b 	.word	0xc480230b
 800fa30:	bc21a092 	.word	0xbc21a092
 800fa34:	c41f6441 	.word	0xc41f6441
 800fa38:	c320a2ea 	.word	0xc320a2ea
 800fa3c:	c18e104b 	.word	0xc18e104b
 800fa40:	bf4c9dd4 	.word	0xbf4c9dd4
 800fa44:	43ed43a7 	.word	0x43ed43a7
 800fa48:	c1b38712 	.word	0xc1b38712
 800fa4c:	451f90ce 	.word	0x451f90ce
 800fa50:	4547fdbb 	.word	0x4547fdbb
 800fa54:	44c01759 	.word	0x44c01759
 800fa58:	43a2e571 	.word	0x43a2e571
 800fa5c:	41f2b459 	.word	0x41f2b459

0800fa60 <fabsf>:
 800fa60:	ee10 3a10 	vmov	r3, s0
 800fa64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa68:	ee00 3a10 	vmov	s0, r3
 800fa6c:	4770      	bx	lr
	...

0800fa70 <floorf>:
 800fa70:	ee10 3a10 	vmov	r3, s0
 800fa74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fa78:	0dca      	lsrs	r2, r1, #23
 800fa7a:	3a7f      	subs	r2, #127	; 0x7f
 800fa7c:	2a16      	cmp	r2, #22
 800fa7e:	dc2a      	bgt.n	800fad6 <floorf+0x66>
 800fa80:	2a00      	cmp	r2, #0
 800fa82:	da11      	bge.n	800faa8 <floorf+0x38>
 800fa84:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fae8 <floorf+0x78>
 800fa88:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa94:	dd05      	ble.n	800faa2 <floorf+0x32>
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	da23      	bge.n	800fae2 <floorf+0x72>
 800fa9a:	4a14      	ldr	r2, [pc, #80]	; (800faec <floorf+0x7c>)
 800fa9c:	2900      	cmp	r1, #0
 800fa9e:	bf18      	it	ne
 800faa0:	4613      	movne	r3, r2
 800faa2:	ee00 3a10 	vmov	s0, r3
 800faa6:	4770      	bx	lr
 800faa8:	4911      	ldr	r1, [pc, #68]	; (800faf0 <floorf+0x80>)
 800faaa:	4111      	asrs	r1, r2
 800faac:	420b      	tst	r3, r1
 800faae:	d0fa      	beq.n	800faa6 <floorf+0x36>
 800fab0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fae8 <floorf+0x78>
 800fab4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fab8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac0:	ddef      	ble.n	800faa2 <floorf+0x32>
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	bfbe      	ittt	lt
 800fac6:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800faca:	fa40 f202 	asrlt.w	r2, r0, r2
 800face:	189b      	addlt	r3, r3, r2
 800fad0:	ea23 0301 	bic.w	r3, r3, r1
 800fad4:	e7e5      	b.n	800faa2 <floorf+0x32>
 800fad6:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fada:	d3e4      	bcc.n	800faa6 <floorf+0x36>
 800fadc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fae0:	4770      	bx	lr
 800fae2:	2300      	movs	r3, #0
 800fae4:	e7dd      	b.n	800faa2 <floorf+0x32>
 800fae6:	bf00      	nop
 800fae8:	7149f2ca 	.word	0x7149f2ca
 800faec:	bf800000 	.word	0xbf800000
 800faf0:	007fffff 	.word	0x007fffff

0800faf4 <log1pf>:
 800faf4:	ee10 2a10 	vmov	r2, s0
 800faf8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fafc:	db02      	blt.n	800fb04 <log1pf+0x10>
 800fafe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb02:	4770      	bx	lr
 800fb04:	4b70      	ldr	r3, [pc, #448]	; (800fcc8 <log1pf+0x1d4>)
 800fb06:	429a      	cmp	r2, r3
 800fb08:	dc78      	bgt.n	800fbfc <log1pf+0x108>
 800fb0a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800fb0e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800fb12:	db12      	blt.n	800fb3a <log1pf+0x46>
 800fb14:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800fb18:	eeb4 0a67 	vcmp.f32	s0, s15
 800fb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb20:	bf05      	ittet	eq
 800fb22:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 800fccc <log1pf+0x1d8>
 800fb26:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 800fcd0 <log1pf+0x1dc>
 800fb2a:	ee70 7a40 	vsubne.f32	s15, s0, s0
 800fb2e:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 800fb32:	bf18      	it	ne
 800fb34:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 800fb38:	4770      	bx	lr
 800fb3a:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 800fb3e:	da13      	bge.n	800fb68 <log1pf+0x74>
 800fb40:	eddf 7a64 	vldr	s15, [pc, #400]	; 800fcd4 <log1pf+0x1e0>
 800fb44:	ee70 7a27 	vadd.f32	s15, s0, s15
 800fb48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb50:	dd03      	ble.n	800fb5a <log1pf+0x66>
 800fb52:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 800fb56:	f2c0 80b6 	blt.w	800fcc6 <log1pf+0x1d2>
 800fb5a:	ee20 7a40 	vnmul.f32	s14, s0, s0
 800fb5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fb62:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fb66:	4770      	bx	lr
 800fb68:	4b5b      	ldr	r3, [pc, #364]	; (800fcd8 <log1pf+0x1e4>)
 800fb6a:	441a      	add	r2, r3
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d84d      	bhi.n	800fc0c <log1pf+0x118>
 800fb70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fb74:	ee30 7a27 	vadd.f32	s14, s0, s15
 800fb78:	ee17 2a10 	vmov	r2, s14
 800fb7c:	15d3      	asrs	r3, r2, #23
 800fb7e:	3b7f      	subs	r3, #127	; 0x7f
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	bfcb      	itete	gt
 800fb84:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 800fb88:	ee77 7a67 	vsuble.f32	s15, s14, s15
 800fb8c:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 800fb90:	ee30 0a67 	vsuble.f32	s0, s0, s15
 800fb94:	eec0 6a07 	vdiv.f32	s13, s0, s14
 800fb98:	4950      	ldr	r1, [pc, #320]	; (800fcdc <log1pf+0x1e8>)
 800fb9a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800fb9e:	428a      	cmp	r2, r1
 800fba0:	bfc9      	itett	gt
 800fba2:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 800fba6:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 800fbaa:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 800fbae:	3301      	addgt	r3, #1
 800fbb0:	bfc8      	it	gt
 800fbb2:	1092      	asrgt	r2, r2, #2
 800fbb4:	ee07 1a90 	vmov	s15, r1
 800fbb8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fbbc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fbc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800fbc4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800fbc8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800fbcc:	2a00      	cmp	r2, #0
 800fbce:	d13d      	bne.n	800fc4c <log1pf+0x158>
 800fbd0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd8:	d11b      	bne.n	800fc12 <log1pf+0x11e>
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d071      	beq.n	800fcc2 <log1pf+0x1ce>
 800fbde:	ee07 3a90 	vmov	s15, r3
 800fbe2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800fce0 <log1pf+0x1ec>
 800fbe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbea:	eee7 6a87 	vfma.f32	s13, s15, s14
 800fbee:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800fce4 <log1pf+0x1f0>
 800fbf2:	eeb0 0a66 	vmov.f32	s0, s13
 800fbf6:	eea7 0a87 	vfma.f32	s0, s15, s14
 800fbfa:	4770      	bx	lr
 800fbfc:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 800fc00:	dbb6      	blt.n	800fb70 <log1pf+0x7c>
 800fc02:	15d3      	asrs	r3, r2, #23
 800fc04:	3b7f      	subs	r3, #127	; 0x7f
 800fc06:	eddf 6a32 	vldr	s13, [pc, #200]	; 800fcd0 <log1pf+0x1dc>
 800fc0a:	e7c5      	b.n	800fb98 <log1pf+0xa4>
 800fc0c:	2201      	movs	r2, #1
 800fc0e:	2300      	movs	r3, #0
 800fc10:	e7d6      	b.n	800fbc0 <log1pf+0xcc>
 800fc12:	eddf 7a35 	vldr	s15, [pc, #212]	; 800fce8 <log1pf+0x1f4>
 800fc16:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fc1a:	eea0 6a67 	vfms.f32	s12, s0, s15
 800fc1e:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fc22:	b913      	cbnz	r3, 800fc2a <log1pf+0x136>
 800fc24:	ee30 0a46 	vsub.f32	s0, s0, s12
 800fc28:	4770      	bx	lr
 800fc2a:	ee07 3a90 	vmov	s15, r3
 800fc2e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800fce0 <log1pf+0x1ec>
 800fc32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc36:	eee7 6a87 	vfma.f32	s13, s15, s14
 800fc3a:	ee36 7a66 	vsub.f32	s14, s12, s13
 800fc3e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800fc42:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800fce4 <log1pf+0x1f0>
 800fc46:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800fc4a:	4770      	bx	lr
 800fc4c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fc50:	ee70 7a27 	vadd.f32	s15, s0, s15
 800fc54:	ed9f 6a25 	vldr	s12, [pc, #148]	; 800fcec <log1pf+0x1f8>
 800fc58:	ed9f 5a25 	vldr	s10, [pc, #148]	; 800fcf0 <log1pf+0x1fc>
 800fc5c:	eec0 5a27 	vdiv.f32	s11, s0, s15
 800fc60:	ee65 7aa5 	vmul.f32	s15, s11, s11
 800fc64:	eea7 5a86 	vfma.f32	s10, s15, s12
 800fc68:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800fcf4 <log1pf+0x200>
 800fc6c:	eea5 6a27 	vfma.f32	s12, s10, s15
 800fc70:	ed9f 5a21 	vldr	s10, [pc, #132]	; 800fcf8 <log1pf+0x204>
 800fc74:	eea6 5a27 	vfma.f32	s10, s12, s15
 800fc78:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800fcfc <log1pf+0x208>
 800fc7c:	eea5 6a27 	vfma.f32	s12, s10, s15
 800fc80:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800fd00 <log1pf+0x20c>
 800fc84:	eea6 5a27 	vfma.f32	s10, s12, s15
 800fc88:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800fce8 <log1pf+0x1f4>
 800fc8c:	eea5 6a27 	vfma.f32	s12, s10, s15
 800fc90:	eeb0 5a47 	vmov.f32	s10, s14
 800fc94:	eea6 5a27 	vfma.f32	s10, s12, s15
 800fc98:	ee25 6a25 	vmul.f32	s12, s10, s11
 800fc9c:	b923      	cbnz	r3, 800fca8 <log1pf+0x1b4>
 800fc9e:	ee37 7a46 	vsub.f32	s14, s14, s12
 800fca2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fca6:	4770      	bx	lr
 800fca8:	ee07 3a90 	vmov	s15, r3
 800fcac:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800fce0 <log1pf+0x1ec>
 800fcb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcb4:	eee7 6aa5 	vfma.f32	s13, s15, s11
 800fcb8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800fcbc:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fcc0:	e7bd      	b.n	800fc3e <log1pf+0x14a>
 800fcc2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800fcd0 <log1pf+0x1dc>
 800fcc6:	4770      	bx	lr
 800fcc8:	3ed413d6 	.word	0x3ed413d6
 800fccc:	cc000000 	.word	0xcc000000
 800fcd0:	00000000 	.word	0x00000000
 800fcd4:	4c000000 	.word	0x4c000000
 800fcd8:	416a09e0 	.word	0x416a09e0
 800fcdc:	003504f6 	.word	0x003504f6
 800fce0:	3717f7d1 	.word	0x3717f7d1
 800fce4:	3f317180 	.word	0x3f317180
 800fce8:	3f2aaaab 	.word	0x3f2aaaab
 800fcec:	3e178897 	.word	0x3e178897
 800fcf0:	3e1cd04f 	.word	0x3e1cd04f
 800fcf4:	3e3a3325 	.word	0x3e3a3325
 800fcf8:	3e638e29 	.word	0x3e638e29
 800fcfc:	3e924925 	.word	0x3e924925
 800fd00:	3ecccccd 	.word	0x3ecccccd

0800fd04 <roundf>:
 800fd04:	ee10 0a10 	vmov	r0, s0
 800fd08:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fd0c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800fd10:	2a16      	cmp	r2, #22
 800fd12:	dc15      	bgt.n	800fd40 <roundf+0x3c>
 800fd14:	2a00      	cmp	r2, #0
 800fd16:	da08      	bge.n	800fd2a <roundf+0x26>
 800fd18:	3201      	adds	r2, #1
 800fd1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800fd1e:	d101      	bne.n	800fd24 <roundf+0x20>
 800fd20:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800fd24:	ee00 3a10 	vmov	s0, r3
 800fd28:	4770      	bx	lr
 800fd2a:	4908      	ldr	r1, [pc, #32]	; (800fd4c <roundf+0x48>)
 800fd2c:	4111      	asrs	r1, r2
 800fd2e:	4208      	tst	r0, r1
 800fd30:	d0fa      	beq.n	800fd28 <roundf+0x24>
 800fd32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fd36:	4113      	asrs	r3, r2
 800fd38:	4403      	add	r3, r0
 800fd3a:	ea23 0301 	bic.w	r3, r3, r1
 800fd3e:	e7f1      	b.n	800fd24 <roundf+0x20>
 800fd40:	2a80      	cmp	r2, #128	; 0x80
 800fd42:	d1f1      	bne.n	800fd28 <roundf+0x24>
 800fd44:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	007fffff 	.word	0x007fffff

0800fd50 <sinf>:
 800fd50:	ee10 3a10 	vmov	r3, s0
 800fd54:	b507      	push	{r0, r1, r2, lr}
 800fd56:	4a1d      	ldr	r2, [pc, #116]	; (800fdcc <sinf+0x7c>)
 800fd58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	dc05      	bgt.n	800fd6c <sinf+0x1c>
 800fd60:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800fdd0 <sinf+0x80>
 800fd64:	2000      	movs	r0, #0
 800fd66:	f002 fa03 	bl	8012170 <__kernel_sinf>
 800fd6a:	e004      	b.n	800fd76 <sinf+0x26>
 800fd6c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fd70:	db04      	blt.n	800fd7c <sinf+0x2c>
 800fd72:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fd76:	b003      	add	sp, #12
 800fd78:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd7c:	4668      	mov	r0, sp
 800fd7e:	f001 fd79 	bl	8011874 <__ieee754_rem_pio2f>
 800fd82:	f000 0003 	and.w	r0, r0, #3
 800fd86:	2801      	cmp	r0, #1
 800fd88:	d008      	beq.n	800fd9c <sinf+0x4c>
 800fd8a:	2802      	cmp	r0, #2
 800fd8c:	d00d      	beq.n	800fdaa <sinf+0x5a>
 800fd8e:	b9b0      	cbnz	r0, 800fdbe <sinf+0x6e>
 800fd90:	2001      	movs	r0, #1
 800fd92:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd96:	ed9d 0a00 	vldr	s0, [sp]
 800fd9a:	e7e4      	b.n	800fd66 <sinf+0x16>
 800fd9c:	eddd 0a01 	vldr	s1, [sp, #4]
 800fda0:	ed9d 0a00 	vldr	s0, [sp]
 800fda4:	f001 ff04 	bl	8011bb0 <__kernel_cosf>
 800fda8:	e7e5      	b.n	800fd76 <sinf+0x26>
 800fdaa:	2001      	movs	r0, #1
 800fdac:	eddd 0a01 	vldr	s1, [sp, #4]
 800fdb0:	ed9d 0a00 	vldr	s0, [sp]
 800fdb4:	f002 f9dc 	bl	8012170 <__kernel_sinf>
 800fdb8:	eeb1 0a40 	vneg.f32	s0, s0
 800fdbc:	e7db      	b.n	800fd76 <sinf+0x26>
 800fdbe:	eddd 0a01 	vldr	s1, [sp, #4]
 800fdc2:	ed9d 0a00 	vldr	s0, [sp]
 800fdc6:	f001 fef3 	bl	8011bb0 <__kernel_cosf>
 800fdca:	e7f5      	b.n	800fdb8 <sinf+0x68>
 800fdcc:	3f490fd8 	.word	0x3f490fd8
 800fdd0:	00000000 	.word	0x00000000

0800fdd4 <tanf>:
 800fdd4:	ee10 3a10 	vmov	r3, s0
 800fdd8:	b507      	push	{r0, r1, r2, lr}
 800fdda:	4a10      	ldr	r2, [pc, #64]	; (800fe1c <tanf+0x48>)
 800fddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fde0:	4293      	cmp	r3, r2
 800fde2:	dc05      	bgt.n	800fdf0 <tanf+0x1c>
 800fde4:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800fe20 <tanf+0x4c>
 800fde8:	2001      	movs	r0, #1
 800fdea:	f002 fa09 	bl	8012200 <__kernel_tanf>
 800fdee:	e004      	b.n	800fdfa <tanf+0x26>
 800fdf0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fdf4:	db04      	blt.n	800fe00 <tanf+0x2c>
 800fdf6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fdfa:	b003      	add	sp, #12
 800fdfc:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe00:	4668      	mov	r0, sp
 800fe02:	f001 fd37 	bl	8011874 <__ieee754_rem_pio2f>
 800fe06:	0040      	lsls	r0, r0, #1
 800fe08:	f000 0002 	and.w	r0, r0, #2
 800fe0c:	f1c0 0001 	rsb	r0, r0, #1
 800fe10:	eddd 0a01 	vldr	s1, [sp, #4]
 800fe14:	ed9d 0a00 	vldr	s0, [sp]
 800fe18:	e7e7      	b.n	800fdea <tanf+0x16>
 800fe1a:	bf00      	nop
 800fe1c:	3f490fda 	.word	0x3f490fda
 800fe20:	00000000 	.word	0x00000000

0800fe24 <tanhf>:
 800fe24:	b510      	push	{r4, lr}
 800fe26:	ee10 4a10 	vmov	r4, s0
 800fe2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fe2e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fe32:	ed2d 8b02 	vpush	{d8}
 800fe36:	eef0 7a40 	vmov.f32	s15, s0
 800fe3a:	db0c      	blt.n	800fe56 <tanhf+0x32>
 800fe3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe40:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800fe44:	2c00      	cmp	r4, #0
 800fe46:	bfac      	ite	ge
 800fe48:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800fe4c:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800fe50:	ecbd 8b02 	vpop	{d8}
 800fe54:	bd10      	pop	{r4, pc}
 800fe56:	4a1b      	ldr	r2, [pc, #108]	; (800fec4 <tanhf+0xa0>)
 800fe58:	4293      	cmp	r3, r2
 800fe5a:	dc30      	bgt.n	800febe <tanhf+0x9a>
 800fe5c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800fe60:	da06      	bge.n	800fe70 <tanhf+0x4c>
 800fe62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fe66:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fe6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe6e:	e7ef      	b.n	800fe50 <tanhf+0x2c>
 800fe70:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800fe74:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800fe78:	db12      	blt.n	800fea0 <tanhf+0x7c>
 800fe7a:	f7ff fdf1 	bl	800fa60 <fabsf>
 800fe7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fe82:	f002 faad 	bl	80123e0 <expm1f>
 800fe86:	ee30 0a08 	vadd.f32	s0, s0, s16
 800fe8a:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800fe8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fe92:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fe96:	2c00      	cmp	r4, #0
 800fe98:	bfb8      	it	lt
 800fe9a:	eeb1 0a40 	vneglt.f32	s0, s0
 800fe9e:	e7d7      	b.n	800fe50 <tanhf+0x2c>
 800fea0:	f7ff fdde 	bl	800fa60 <fabsf>
 800fea4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800fea8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800feac:	f002 fa98 	bl	80123e0 <expm1f>
 800feb0:	ee70 7a08 	vadd.f32	s15, s0, s16
 800feb4:	eeb1 7a40 	vneg.f32	s14, s0
 800feb8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800febc:	e7eb      	b.n	800fe96 <tanhf+0x72>
 800febe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fec2:	e7e8      	b.n	800fe96 <tanhf+0x72>
 800fec4:	41afffff 	.word	0x41afffff

0800fec8 <acosf>:
 800fec8:	b510      	push	{r4, lr}
 800feca:	ed2d 8b02 	vpush	{d8}
 800fece:	4c27      	ldr	r4, [pc, #156]	; (800ff6c <acosf+0xa4>)
 800fed0:	b08a      	sub	sp, #40	; 0x28
 800fed2:	eeb0 8a40 	vmov.f32	s16, s0
 800fed6:	f000 fce1 	bl	801089c <__ieee754_acosf>
 800feda:	f994 3000 	ldrsb.w	r3, [r4]
 800fede:	3301      	adds	r3, #1
 800fee0:	eef0 8a40 	vmov.f32	s17, s0
 800fee4:	d03c      	beq.n	800ff60 <acosf+0x98>
 800fee6:	eeb4 8a48 	vcmp.f32	s16, s16
 800feea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feee:	d637      	bvs.n	800ff60 <acosf+0x98>
 800fef0:	eeb0 0a48 	vmov.f32	s0, s16
 800fef4:	f7ff fdb4 	bl	800fa60 <fabsf>
 800fef8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fefc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ff00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff04:	dd2c      	ble.n	800ff60 <acosf+0x98>
 800ff06:	2301      	movs	r3, #1
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	4b19      	ldr	r3, [pc, #100]	; (800ff70 <acosf+0xa8>)
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	ee18 0a10 	vmov	r0, s16
 800ff12:	2300      	movs	r3, #0
 800ff14:	9308      	str	r3, [sp, #32]
 800ff16:	f7f5 fc2d 	bl	8005774 <__aeabi_f2d>
 800ff1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ff1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff22:	4814      	ldr	r0, [pc, #80]	; (800ff74 <acosf+0xac>)
 800ff24:	f002 fa54 	bl	80123d0 <nan>
 800ff28:	f994 3000 	ldrsb.w	r3, [r4]
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ff32:	d104      	bne.n	800ff3e <acosf+0x76>
 800ff34:	f7ff f9ac 	bl	800f290 <__errno>
 800ff38:	2321      	movs	r3, #33	; 0x21
 800ff3a:	6003      	str	r3, [r0, #0]
 800ff3c:	e004      	b.n	800ff48 <acosf+0x80>
 800ff3e:	4668      	mov	r0, sp
 800ff40:	f002 fa42 	bl	80123c8 <matherr>
 800ff44:	2800      	cmp	r0, #0
 800ff46:	d0f5      	beq.n	800ff34 <acosf+0x6c>
 800ff48:	9b08      	ldr	r3, [sp, #32]
 800ff4a:	b11b      	cbz	r3, 800ff54 <acosf+0x8c>
 800ff4c:	f7ff f9a0 	bl	800f290 <__errno>
 800ff50:	9b08      	ldr	r3, [sp, #32]
 800ff52:	6003      	str	r3, [r0, #0]
 800ff54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff58:	f7f5 fe76 	bl	8005c48 <__aeabi_d2f>
 800ff5c:	ee08 0a90 	vmov	s17, r0
 800ff60:	eeb0 0a68 	vmov.f32	s0, s17
 800ff64:	b00a      	add	sp, #40	; 0x28
 800ff66:	ecbd 8b02 	vpop	{d8}
 800ff6a:	bd10      	pop	{r4, pc}
 800ff6c:	200006c0 	.word	0x200006c0
 800ff70:	080154dc 	.word	0x080154dc
 800ff74:	08015500 	.word	0x08015500

0800ff78 <acoshf>:
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	ed2d 8b02 	vpush	{d8}
 800ff7e:	b08a      	sub	sp, #40	; 0x28
 800ff80:	eeb0 8a40 	vmov.f32	s16, s0
 800ff84:	f000 fd86 	bl	8010a94 <__ieee754_acoshf>
 800ff88:	4b21      	ldr	r3, [pc, #132]	; (8010010 <acoshf+0x98>)
 800ff8a:	f993 4000 	ldrsb.w	r4, [r3]
 800ff8e:	1c63      	adds	r3, r4, #1
 800ff90:	d039      	beq.n	8010006 <acoshf+0x8e>
 800ff92:	eeb4 8a48 	vcmp.f32	s16, s16
 800ff96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9a:	d634      	bvs.n	8010006 <acoshf+0x8e>
 800ff9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ffa0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ffa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa8:	d52d      	bpl.n	8010006 <acoshf+0x8e>
 800ffaa:	2301      	movs	r3, #1
 800ffac:	9300      	str	r3, [sp, #0]
 800ffae:	4b19      	ldr	r3, [pc, #100]	; (8010014 <acoshf+0x9c>)
 800ffb0:	9301      	str	r3, [sp, #4]
 800ffb2:	ee18 0a10 	vmov	r0, s16
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	9308      	str	r3, [sp, #32]
 800ffba:	f7f5 fbdb 	bl	8005774 <__aeabi_f2d>
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffca:	4610      	mov	r0, r2
 800ffcc:	4619      	mov	r1, r3
 800ffce:	f7f5 fd53 	bl	8005a78 <__aeabi_ddiv>
 800ffd2:	2c02      	cmp	r4, #2
 800ffd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ffd8:	d104      	bne.n	800ffe4 <acoshf+0x6c>
 800ffda:	f7ff f959 	bl	800f290 <__errno>
 800ffde:	2321      	movs	r3, #33	; 0x21
 800ffe0:	6003      	str	r3, [r0, #0]
 800ffe2:	e004      	b.n	800ffee <acoshf+0x76>
 800ffe4:	4668      	mov	r0, sp
 800ffe6:	f002 f9ef 	bl	80123c8 <matherr>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d0f5      	beq.n	800ffda <acoshf+0x62>
 800ffee:	9b08      	ldr	r3, [sp, #32]
 800fff0:	b11b      	cbz	r3, 800fffa <acoshf+0x82>
 800fff2:	f7ff f94d 	bl	800f290 <__errno>
 800fff6:	9b08      	ldr	r3, [sp, #32]
 800fff8:	6003      	str	r3, [r0, #0]
 800fffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fffe:	f7f5 fe23 	bl	8005c48 <__aeabi_d2f>
 8010002:	ee00 0a10 	vmov	s0, r0
 8010006:	b00a      	add	sp, #40	; 0x28
 8010008:	ecbd 8b02 	vpop	{d8}
 801000c:	bd10      	pop	{r4, pc}
 801000e:	bf00      	nop
 8010010:	200006c0 	.word	0x200006c0
 8010014:	080154e2 	.word	0x080154e2

08010018 <asinf>:
 8010018:	b510      	push	{r4, lr}
 801001a:	ed2d 8b02 	vpush	{d8}
 801001e:	4c27      	ldr	r4, [pc, #156]	; (80100bc <asinf+0xa4>)
 8010020:	b08a      	sub	sp, #40	; 0x28
 8010022:	eeb0 8a40 	vmov.f32	s16, s0
 8010026:	f000 fd89 	bl	8010b3c <__ieee754_asinf>
 801002a:	f994 3000 	ldrsb.w	r3, [r4]
 801002e:	3301      	adds	r3, #1
 8010030:	eef0 8a40 	vmov.f32	s17, s0
 8010034:	d03c      	beq.n	80100b0 <asinf+0x98>
 8010036:	eeb4 8a48 	vcmp.f32	s16, s16
 801003a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003e:	d637      	bvs.n	80100b0 <asinf+0x98>
 8010040:	eeb0 0a48 	vmov.f32	s0, s16
 8010044:	f7ff fd0c 	bl	800fa60 <fabsf>
 8010048:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801004c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010054:	dd2c      	ble.n	80100b0 <asinf+0x98>
 8010056:	2301      	movs	r3, #1
 8010058:	9300      	str	r3, [sp, #0]
 801005a:	4b19      	ldr	r3, [pc, #100]	; (80100c0 <asinf+0xa8>)
 801005c:	9301      	str	r3, [sp, #4]
 801005e:	ee18 0a10 	vmov	r0, s16
 8010062:	2300      	movs	r3, #0
 8010064:	9308      	str	r3, [sp, #32]
 8010066:	f7f5 fb85 	bl	8005774 <__aeabi_f2d>
 801006a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801006e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010072:	4814      	ldr	r0, [pc, #80]	; (80100c4 <asinf+0xac>)
 8010074:	f002 f9ac 	bl	80123d0 <nan>
 8010078:	f994 3000 	ldrsb.w	r3, [r4]
 801007c:	2b02      	cmp	r3, #2
 801007e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8010082:	d104      	bne.n	801008e <asinf+0x76>
 8010084:	f7ff f904 	bl	800f290 <__errno>
 8010088:	2321      	movs	r3, #33	; 0x21
 801008a:	6003      	str	r3, [r0, #0]
 801008c:	e004      	b.n	8010098 <asinf+0x80>
 801008e:	4668      	mov	r0, sp
 8010090:	f002 f99a 	bl	80123c8 <matherr>
 8010094:	2800      	cmp	r0, #0
 8010096:	d0f5      	beq.n	8010084 <asinf+0x6c>
 8010098:	9b08      	ldr	r3, [sp, #32]
 801009a:	b11b      	cbz	r3, 80100a4 <asinf+0x8c>
 801009c:	f7ff f8f8 	bl	800f290 <__errno>
 80100a0:	9b08      	ldr	r3, [sp, #32]
 80100a2:	6003      	str	r3, [r0, #0]
 80100a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80100a8:	f7f5 fdce 	bl	8005c48 <__aeabi_d2f>
 80100ac:	ee08 0a90 	vmov	s17, r0
 80100b0:	eeb0 0a68 	vmov.f32	s0, s17
 80100b4:	b00a      	add	sp, #40	; 0x28
 80100b6:	ecbd 8b02 	vpop	{d8}
 80100ba:	bd10      	pop	{r4, pc}
 80100bc:	200006c0 	.word	0x200006c0
 80100c0:	080154e9 	.word	0x080154e9
 80100c4:	08015500 	.word	0x08015500

080100c8 <atanhf>:
 80100c8:	b570      	push	{r4, r5, r6, lr}
 80100ca:	ed2d 8b04 	vpush	{d8-d9}
 80100ce:	4c36      	ldr	r4, [pc, #216]	; (80101a8 <atanhf+0xe0>)
 80100d0:	b08a      	sub	sp, #40	; 0x28
 80100d2:	eeb0 8a40 	vmov.f32	s16, s0
 80100d6:	f000 fe19 	bl	8010d0c <__ieee754_atanhf>
 80100da:	f994 3000 	ldrsb.w	r3, [r4]
 80100de:	3301      	adds	r3, #1
 80100e0:	eef0 8a40 	vmov.f32	s17, s0
 80100e4:	d059      	beq.n	801019a <atanhf+0xd2>
 80100e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80100ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ee:	d654      	bvs.n	801019a <atanhf+0xd2>
 80100f0:	eeb0 0a48 	vmov.f32	s0, s16
 80100f4:	f7ff fcb4 	bl	800fa60 <fabsf>
 80100f8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80100fc:	eeb4 0ac9 	vcmpe.f32	s0, s18
 8010100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010104:	eef0 9a40 	vmov.f32	s19, s0
 8010108:	db47      	blt.n	801019a <atanhf+0xd2>
 801010a:	ee18 0a10 	vmov	r0, s16
 801010e:	f7f5 fb31 	bl	8005774 <__aeabi_f2d>
 8010112:	eef4 9ac9 	vcmpe.f32	s19, s18
 8010116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801011a:	4602      	mov	r2, r0
 801011c:	460b      	mov	r3, r1
 801011e:	f994 4000 	ldrsb.w	r4, [r4]
 8010122:	4d22      	ldr	r5, [pc, #136]	; (80101ac <atanhf+0xe4>)
 8010124:	dd17      	ble.n	8010156 <atanhf+0x8e>
 8010126:	2101      	movs	r1, #1
 8010128:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801012c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010130:	e9cd 1500 	strd	r1, r5, [sp]
 8010134:	2200      	movs	r2, #0
 8010136:	2100      	movs	r1, #0
 8010138:	2300      	movs	r3, #0
 801013a:	9108      	str	r1, [sp, #32]
 801013c:	4610      	mov	r0, r2
 801013e:	4619      	mov	r1, r3
 8010140:	f7f5 fc9a 	bl	8005a78 <__aeabi_ddiv>
 8010144:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010148:	2c02      	cmp	r4, #2
 801014a:	d115      	bne.n	8010178 <atanhf+0xb0>
 801014c:	f7ff f8a0 	bl	800f290 <__errno>
 8010150:	2321      	movs	r3, #33	; 0x21
 8010152:	6003      	str	r3, [r0, #0]
 8010154:	e015      	b.n	8010182 <atanhf+0xba>
 8010156:	2602      	movs	r6, #2
 8010158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801015c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010160:	e9cd 6500 	strd	r6, r5, [sp]
 8010164:	2200      	movs	r2, #0
 8010166:	2500      	movs	r5, #0
 8010168:	2300      	movs	r3, #0
 801016a:	9508      	str	r5, [sp, #32]
 801016c:	f7f5 fc84 	bl	8005a78 <__aeabi_ddiv>
 8010170:	42b4      	cmp	r4, r6
 8010172:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010176:	e7e8      	b.n	801014a <atanhf+0x82>
 8010178:	4668      	mov	r0, sp
 801017a:	f002 f925 	bl	80123c8 <matherr>
 801017e:	2800      	cmp	r0, #0
 8010180:	d0e4      	beq.n	801014c <atanhf+0x84>
 8010182:	9b08      	ldr	r3, [sp, #32]
 8010184:	b11b      	cbz	r3, 801018e <atanhf+0xc6>
 8010186:	f7ff f883 	bl	800f290 <__errno>
 801018a:	9b08      	ldr	r3, [sp, #32]
 801018c:	6003      	str	r3, [r0, #0]
 801018e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010192:	f7f5 fd59 	bl	8005c48 <__aeabi_d2f>
 8010196:	ee08 0a90 	vmov	s17, r0
 801019a:	eeb0 0a68 	vmov.f32	s0, s17
 801019e:	b00a      	add	sp, #40	; 0x28
 80101a0:	ecbd 8b04 	vpop	{d8-d9}
 80101a4:	bd70      	pop	{r4, r5, r6, pc}
 80101a6:	bf00      	nop
 80101a8:	200006c0 	.word	0x200006c0
 80101ac:	080154ef 	.word	0x080154ef

080101b0 <coshf>:
 80101b0:	b510      	push	{r4, lr}
 80101b2:	ed2d 8b02 	vpush	{d8}
 80101b6:	4c29      	ldr	r4, [pc, #164]	; (801025c <coshf+0xac>)
 80101b8:	b08a      	sub	sp, #40	; 0x28
 80101ba:	eeb0 8a40 	vmov.f32	s16, s0
 80101be:	f000 fdeb 	bl	8010d98 <__ieee754_coshf>
 80101c2:	f994 3000 	ldrsb.w	r3, [r4]
 80101c6:	3301      	adds	r3, #1
 80101c8:	eef0 8a40 	vmov.f32	s17, s0
 80101cc:	d035      	beq.n	801023a <coshf+0x8a>
 80101ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80101d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101d6:	d630      	bvs.n	801023a <coshf+0x8a>
 80101d8:	eeb0 0a48 	vmov.f32	s0, s16
 80101dc:	f7ff fc40 	bl	800fa60 <fabsf>
 80101e0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010260 <coshf+0xb0>
 80101e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80101e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ec:	dd25      	ble.n	801023a <coshf+0x8a>
 80101ee:	2303      	movs	r3, #3
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	4b1c      	ldr	r3, [pc, #112]	; (8010264 <coshf+0xb4>)
 80101f4:	9301      	str	r3, [sp, #4]
 80101f6:	ee18 0a10 	vmov	r0, s16
 80101fa:	2300      	movs	r3, #0
 80101fc:	9308      	str	r3, [sp, #32]
 80101fe:	f7f5 fab9 	bl	8005774 <__aeabi_f2d>
 8010202:	f994 3000 	ldrsb.w	r3, [r4]
 8010206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801020a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801020e:	b9d3      	cbnz	r3, 8010246 <coshf+0x96>
 8010210:	4b15      	ldr	r3, [pc, #84]	; (8010268 <coshf+0xb8>)
 8010212:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801021a:	4668      	mov	r0, sp
 801021c:	f002 f8d4 	bl	80123c8 <matherr>
 8010220:	b1b8      	cbz	r0, 8010252 <coshf+0xa2>
 8010222:	9b08      	ldr	r3, [sp, #32]
 8010224:	b11b      	cbz	r3, 801022e <coshf+0x7e>
 8010226:	f7ff f833 	bl	800f290 <__errno>
 801022a:	9b08      	ldr	r3, [sp, #32]
 801022c:	6003      	str	r3, [r0, #0]
 801022e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010232:	f7f5 fd09 	bl	8005c48 <__aeabi_d2f>
 8010236:	ee08 0a90 	vmov	s17, r0
 801023a:	eeb0 0a68 	vmov.f32	s0, s17
 801023e:	b00a      	add	sp, #40	; 0x28
 8010240:	ecbd 8b02 	vpop	{d8}
 8010244:	bd10      	pop	{r4, pc}
 8010246:	4909      	ldr	r1, [pc, #36]	; (801026c <coshf+0xbc>)
 8010248:	2000      	movs	r0, #0
 801024a:	2b02      	cmp	r3, #2
 801024c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010250:	d1e3      	bne.n	801021a <coshf+0x6a>
 8010252:	f7ff f81d 	bl	800f290 <__errno>
 8010256:	2322      	movs	r3, #34	; 0x22
 8010258:	6003      	str	r3, [r0, #0]
 801025a:	e7e2      	b.n	8010222 <coshf+0x72>
 801025c:	200006c0 	.word	0x200006c0
 8010260:	42b2d4fc 	.word	0x42b2d4fc
 8010264:	080154e3 	.word	0x080154e3
 8010268:	47efffff 	.word	0x47efffff
 801026c:	7ff00000 	.word	0x7ff00000

08010270 <expf>:
 8010270:	b530      	push	{r4, r5, lr}
 8010272:	ed2d 8b02 	vpush	{d8}
 8010276:	4d35      	ldr	r5, [pc, #212]	; (801034c <expf+0xdc>)
 8010278:	b08b      	sub	sp, #44	; 0x2c
 801027a:	eeb0 8a40 	vmov.f32	s16, s0
 801027e:	f000 fdef 	bl	8010e60 <__ieee754_expf>
 8010282:	f995 3000 	ldrsb.w	r3, [r5]
 8010286:	3301      	adds	r3, #1
 8010288:	ee10 4a10 	vmov	r4, s0
 801028c:	d030      	beq.n	80102f0 <expf+0x80>
 801028e:	eeb0 0a48 	vmov.f32	s0, s16
 8010292:	f002 f9d1 	bl	8012638 <finitef>
 8010296:	b358      	cbz	r0, 80102f0 <expf+0x80>
 8010298:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8010350 <expf+0xe0>
 801029c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80102a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a4:	dd35      	ble.n	8010312 <expf+0xa2>
 80102a6:	2303      	movs	r3, #3
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	4b2a      	ldr	r3, [pc, #168]	; (8010354 <expf+0xe4>)
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	ee18 0a10 	vmov	r0, s16
 80102b2:	2300      	movs	r3, #0
 80102b4:	9308      	str	r3, [sp, #32]
 80102b6:	f7f5 fa5d 	bl	8005774 <__aeabi_f2d>
 80102ba:	f995 3000 	ldrsb.w	r3, [r5]
 80102be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80102c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102c6:	b9cb      	cbnz	r3, 80102fc <expf+0x8c>
 80102c8:	4b23      	ldr	r3, [pc, #140]	; (8010358 <expf+0xe8>)
 80102ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80102ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80102d2:	4668      	mov	r0, sp
 80102d4:	f002 f878 	bl	80123c8 <matherr>
 80102d8:	b1b0      	cbz	r0, 8010308 <expf+0x98>
 80102da:	9b08      	ldr	r3, [sp, #32]
 80102dc:	b11b      	cbz	r3, 80102e6 <expf+0x76>
 80102de:	f7fe ffd7 	bl	800f290 <__errno>
 80102e2:	9b08      	ldr	r3, [sp, #32]
 80102e4:	6003      	str	r3, [r0, #0]
 80102e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102ea:	f7f5 fcad 	bl	8005c48 <__aeabi_d2f>
 80102ee:	4604      	mov	r4, r0
 80102f0:	ee00 4a10 	vmov	s0, r4
 80102f4:	b00b      	add	sp, #44	; 0x2c
 80102f6:	ecbd 8b02 	vpop	{d8}
 80102fa:	bd30      	pop	{r4, r5, pc}
 80102fc:	4917      	ldr	r1, [pc, #92]	; (801035c <expf+0xec>)
 80102fe:	2000      	movs	r0, #0
 8010300:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010304:	2b02      	cmp	r3, #2
 8010306:	d1e4      	bne.n	80102d2 <expf+0x62>
 8010308:	f7fe ffc2 	bl	800f290 <__errno>
 801030c:	2322      	movs	r3, #34	; 0x22
 801030e:	6003      	str	r3, [r0, #0]
 8010310:	e7e3      	b.n	80102da <expf+0x6a>
 8010312:	eddf 7a13 	vldr	s15, [pc, #76]	; 8010360 <expf+0xf0>
 8010316:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031e:	d5e7      	bpl.n	80102f0 <expf+0x80>
 8010320:	2304      	movs	r3, #4
 8010322:	9300      	str	r3, [sp, #0]
 8010324:	4b0b      	ldr	r3, [pc, #44]	; (8010354 <expf+0xe4>)
 8010326:	9301      	str	r3, [sp, #4]
 8010328:	ee18 0a10 	vmov	r0, s16
 801032c:	2300      	movs	r3, #0
 801032e:	9308      	str	r3, [sp, #32]
 8010330:	f7f5 fa20 	bl	8005774 <__aeabi_f2d>
 8010334:	2300      	movs	r3, #0
 8010336:	2200      	movs	r2, #0
 8010338:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801033c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010344:	f995 3000 	ldrsb.w	r3, [r5]
 8010348:	e7dc      	b.n	8010304 <expf+0x94>
 801034a:	bf00      	nop
 801034c:	200006c0 	.word	0x200006c0
 8010350:	42b17180 	.word	0x42b17180
 8010354:	080154f6 	.word	0x080154f6
 8010358:	47efffff 	.word	0x47efffff
 801035c:	7ff00000 	.word	0x7ff00000
 8010360:	c2cff1b5 	.word	0xc2cff1b5

08010364 <fmodf>:
 8010364:	b5d0      	push	{r4, r6, r7, lr}
 8010366:	ed2d 8b02 	vpush	{d8}
 801036a:	b08a      	sub	sp, #40	; 0x28
 801036c:	eef0 8a40 	vmov.f32	s17, s0
 8010370:	eeb0 8a60 	vmov.f32	s16, s1
 8010374:	f000 fe48 	bl	8011008 <__ieee754_fmodf>
 8010378:	4b26      	ldr	r3, [pc, #152]	; (8010414 <fmodf+0xb0>)
 801037a:	f993 4000 	ldrsb.w	r4, [r3]
 801037e:	1c63      	adds	r3, r4, #1
 8010380:	d035      	beq.n	80103ee <fmodf+0x8a>
 8010382:	eeb4 8a48 	vcmp.f32	s16, s16
 8010386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038a:	d630      	bvs.n	80103ee <fmodf+0x8a>
 801038c:	eef4 8a68 	vcmp.f32	s17, s17
 8010390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010394:	d62b      	bvs.n	80103ee <fmodf+0x8a>
 8010396:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801039a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039e:	d126      	bne.n	80103ee <fmodf+0x8a>
 80103a0:	2301      	movs	r3, #1
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	4b1c      	ldr	r3, [pc, #112]	; (8010418 <fmodf+0xb4>)
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	ee18 0a90 	vmov	r0, s17
 80103ac:	2300      	movs	r3, #0
 80103ae:	9308      	str	r3, [sp, #32]
 80103b0:	f7f5 f9e0 	bl	8005774 <__aeabi_f2d>
 80103b4:	4606      	mov	r6, r0
 80103b6:	460f      	mov	r7, r1
 80103b8:	ee18 0a10 	vmov	r0, s16
 80103bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80103c0:	f7f5 f9d8 	bl	8005774 <__aeabi_f2d>
 80103c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103c8:	b9ac      	cbnz	r4, 80103f6 <fmodf+0x92>
 80103ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80103ce:	4668      	mov	r0, sp
 80103d0:	f001 fffa 	bl	80123c8 <matherr>
 80103d4:	b1c8      	cbz	r0, 801040a <fmodf+0xa6>
 80103d6:	9b08      	ldr	r3, [sp, #32]
 80103d8:	b11b      	cbz	r3, 80103e2 <fmodf+0x7e>
 80103da:	f7fe ff59 	bl	800f290 <__errno>
 80103de:	9b08      	ldr	r3, [sp, #32]
 80103e0:	6003      	str	r3, [r0, #0]
 80103e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80103e6:	f7f5 fc2f 	bl	8005c48 <__aeabi_d2f>
 80103ea:	ee00 0a10 	vmov	s0, r0
 80103ee:	b00a      	add	sp, #40	; 0x28
 80103f0:	ecbd 8b02 	vpop	{d8}
 80103f4:	bdd0      	pop	{r4, r6, r7, pc}
 80103f6:	2200      	movs	r2, #0
 80103f8:	2300      	movs	r3, #0
 80103fa:	4610      	mov	r0, r2
 80103fc:	4619      	mov	r1, r3
 80103fe:	f7f5 fb3b 	bl	8005a78 <__aeabi_ddiv>
 8010402:	2c02      	cmp	r4, #2
 8010404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010408:	d1e1      	bne.n	80103ce <fmodf+0x6a>
 801040a:	f7fe ff41 	bl	800f290 <__errno>
 801040e:	2321      	movs	r3, #33	; 0x21
 8010410:	6003      	str	r3, [r0, #0]
 8010412:	e7e0      	b.n	80103d6 <fmodf+0x72>
 8010414:	200006c0 	.word	0x200006c0
 8010418:	080154fb 	.word	0x080154fb

0801041c <logf>:
 801041c:	b510      	push	{r4, lr}
 801041e:	ed2d 8b02 	vpush	{d8}
 8010422:	b08a      	sub	sp, #40	; 0x28
 8010424:	eeb0 8a40 	vmov.f32	s16, s0
 8010428:	f000 fe76 	bl	8011118 <__ieee754_logf>
 801042c:	4b31      	ldr	r3, [pc, #196]	; (80104f4 <logf+0xd8>)
 801042e:	f993 4000 	ldrsb.w	r4, [r3]
 8010432:	1c63      	adds	r3, r4, #1
 8010434:	d059      	beq.n	80104ea <logf+0xce>
 8010436:	eeb4 8a48 	vcmp.f32	s16, s16
 801043a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801043e:	d654      	bvs.n	80104ea <logf+0xce>
 8010440:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010448:	dc4f      	bgt.n	80104ea <logf+0xce>
 801044a:	4b2b      	ldr	r3, [pc, #172]	; (80104f8 <logf+0xdc>)
 801044c:	9301      	str	r3, [sp, #4]
 801044e:	ee18 0a10 	vmov	r0, s16
 8010452:	2300      	movs	r3, #0
 8010454:	9308      	str	r3, [sp, #32]
 8010456:	f7f5 f98d 	bl	8005774 <__aeabi_f2d>
 801045a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801045e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010462:	b994      	cbnz	r4, 801048a <logf+0x6e>
 8010464:	4b25      	ldr	r3, [pc, #148]	; (80104fc <logf+0xe0>)
 8010466:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801046a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010472:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010476:	d025      	beq.n	80104c4 <logf+0xa8>
 8010478:	2301      	movs	r3, #1
 801047a:	2c02      	cmp	r4, #2
 801047c:	9300      	str	r3, [sp, #0]
 801047e:	d116      	bne.n	80104ae <logf+0x92>
 8010480:	f7fe ff06 	bl	800f290 <__errno>
 8010484:	2321      	movs	r3, #33	; 0x21
 8010486:	6003      	str	r3, [r0, #0]
 8010488:	e016      	b.n	80104b8 <logf+0x9c>
 801048a:	4b1d      	ldr	r3, [pc, #116]	; (8010500 <logf+0xe4>)
 801048c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010490:	2200      	movs	r2, #0
 8010492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010496:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801049a:	d1ed      	bne.n	8010478 <logf+0x5c>
 801049c:	2302      	movs	r3, #2
 801049e:	429c      	cmp	r4, r3
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	d111      	bne.n	80104c8 <logf+0xac>
 80104a4:	f7fe fef4 	bl	800f290 <__errno>
 80104a8:	2322      	movs	r3, #34	; 0x22
 80104aa:	6003      	str	r3, [r0, #0]
 80104ac:	e011      	b.n	80104d2 <logf+0xb6>
 80104ae:	4668      	mov	r0, sp
 80104b0:	f001 ff8a 	bl	80123c8 <matherr>
 80104b4:	2800      	cmp	r0, #0
 80104b6:	d0e3      	beq.n	8010480 <logf+0x64>
 80104b8:	4812      	ldr	r0, [pc, #72]	; (8010504 <logf+0xe8>)
 80104ba:	f001 ff89 	bl	80123d0 <nan>
 80104be:	ed8d 0b06 	vstr	d0, [sp, #24]
 80104c2:	e006      	b.n	80104d2 <logf+0xb6>
 80104c4:	2302      	movs	r3, #2
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	4668      	mov	r0, sp
 80104ca:	f001 ff7d 	bl	80123c8 <matherr>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	d0e8      	beq.n	80104a4 <logf+0x88>
 80104d2:	9b08      	ldr	r3, [sp, #32]
 80104d4:	b11b      	cbz	r3, 80104de <logf+0xc2>
 80104d6:	f7fe fedb 	bl	800f290 <__errno>
 80104da:	9b08      	ldr	r3, [sp, #32]
 80104dc:	6003      	str	r3, [r0, #0]
 80104de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104e2:	f7f5 fbb1 	bl	8005c48 <__aeabi_d2f>
 80104e6:	ee00 0a10 	vmov	s0, r0
 80104ea:	b00a      	add	sp, #40	; 0x28
 80104ec:	ecbd 8b02 	vpop	{d8}
 80104f0:	bd10      	pop	{r4, pc}
 80104f2:	bf00      	nop
 80104f4:	200006c0 	.word	0x200006c0
 80104f8:	08015501 	.word	0x08015501
 80104fc:	c7efffff 	.word	0xc7efffff
 8010500:	fff00000 	.word	0xfff00000
 8010504:	08015500 	.word	0x08015500

08010508 <powf>:
 8010508:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801050c:	ed2d 8b04 	vpush	{d8-d9}
 8010510:	4ca7      	ldr	r4, [pc, #668]	; (80107b0 <powf+0x2a8>)
 8010512:	b08a      	sub	sp, #40	; 0x28
 8010514:	eef0 8a40 	vmov.f32	s17, s0
 8010518:	eeb0 8a60 	vmov.f32	s16, s1
 801051c:	f000 feea 	bl	80112f4 <__ieee754_powf>
 8010520:	f994 5000 	ldrsb.w	r5, [r4]
 8010524:	1c6b      	adds	r3, r5, #1
 8010526:	eeb0 9a40 	vmov.f32	s18, s0
 801052a:	4626      	mov	r6, r4
 801052c:	d05f      	beq.n	80105ee <powf+0xe6>
 801052e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010536:	d65a      	bvs.n	80105ee <powf+0xe6>
 8010538:	eef4 8a68 	vcmp.f32	s17, s17
 801053c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010540:	d721      	bvc.n	8010586 <powf+0x7e>
 8010542:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801054a:	d150      	bne.n	80105ee <powf+0xe6>
 801054c:	2301      	movs	r3, #1
 801054e:	9300      	str	r3, [sp, #0]
 8010550:	4b98      	ldr	r3, [pc, #608]	; (80107b4 <powf+0x2ac>)
 8010552:	9301      	str	r3, [sp, #4]
 8010554:	ee18 0a90 	vmov	r0, s17
 8010558:	2300      	movs	r3, #0
 801055a:	9308      	str	r3, [sp, #32]
 801055c:	f7f5 f90a 	bl	8005774 <__aeabi_f2d>
 8010560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010564:	ee18 0a10 	vmov	r0, s16
 8010568:	f7f5 f904 	bl	8005774 <__aeabi_f2d>
 801056c:	4b92      	ldr	r3, [pc, #584]	; (80107b8 <powf+0x2b0>)
 801056e:	2200      	movs	r2, #0
 8010570:	2d02      	cmp	r5, #2
 8010572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010576:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801057a:	d032      	beq.n	80105e2 <powf+0xda>
 801057c:	4668      	mov	r0, sp
 801057e:	f001 ff23 	bl	80123c8 <matherr>
 8010582:	bb40      	cbnz	r0, 80105d6 <powf+0xce>
 8010584:	e065      	b.n	8010652 <powf+0x14a>
 8010586:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80107bc <powf+0x2b4>
 801058a:	eef4 8a69 	vcmp.f32	s17, s19
 801058e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010592:	d163      	bne.n	801065c <powf+0x154>
 8010594:	eeb4 8a69 	vcmp.f32	s16, s19
 8010598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801059c:	d12e      	bne.n	80105fc <powf+0xf4>
 801059e:	2301      	movs	r3, #1
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	4b84      	ldr	r3, [pc, #528]	; (80107b4 <powf+0x2ac>)
 80105a4:	9301      	str	r3, [sp, #4]
 80105a6:	ee18 0a90 	vmov	r0, s17
 80105aa:	2300      	movs	r3, #0
 80105ac:	9308      	str	r3, [sp, #32]
 80105ae:	f7f5 f8e1 	bl	8005774 <__aeabi_f2d>
 80105b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105b6:	ee18 0a10 	vmov	r0, s16
 80105ba:	f7f5 f8db 	bl	8005774 <__aeabi_f2d>
 80105be:	2200      	movs	r2, #0
 80105c0:	2300      	movs	r3, #0
 80105c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80105ca:	2d00      	cmp	r5, #0
 80105cc:	d0d6      	beq.n	801057c <powf+0x74>
 80105ce:	4b7a      	ldr	r3, [pc, #488]	; (80107b8 <powf+0x2b0>)
 80105d0:	2200      	movs	r2, #0
 80105d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80105d6:	9b08      	ldr	r3, [sp, #32]
 80105d8:	b11b      	cbz	r3, 80105e2 <powf+0xda>
 80105da:	f7fe fe59 	bl	800f290 <__errno>
 80105de:	9b08      	ldr	r3, [sp, #32]
 80105e0:	6003      	str	r3, [r0, #0]
 80105e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105e6:	f7f5 fb2f 	bl	8005c48 <__aeabi_d2f>
 80105ea:	ee09 0a10 	vmov	s18, r0
 80105ee:	eeb0 0a49 	vmov.f32	s0, s18
 80105f2:	b00a      	add	sp, #40	; 0x28
 80105f4:	ecbd 8b04 	vpop	{d8-d9}
 80105f8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80105fc:	eeb0 0a48 	vmov.f32	s0, s16
 8010600:	f002 f81a 	bl	8012638 <finitef>
 8010604:	2800      	cmp	r0, #0
 8010606:	d0f2      	beq.n	80105ee <powf+0xe6>
 8010608:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010610:	d5ed      	bpl.n	80105ee <powf+0xe6>
 8010612:	2301      	movs	r3, #1
 8010614:	9300      	str	r3, [sp, #0]
 8010616:	4b67      	ldr	r3, [pc, #412]	; (80107b4 <powf+0x2ac>)
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	ee18 0a90 	vmov	r0, s17
 801061e:	2300      	movs	r3, #0
 8010620:	9308      	str	r3, [sp, #32]
 8010622:	f7f5 f8a7 	bl	8005774 <__aeabi_f2d>
 8010626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801062a:	ee18 0a10 	vmov	r0, s16
 801062e:	f7f5 f8a1 	bl	8005774 <__aeabi_f2d>
 8010632:	f994 3000 	ldrsb.w	r3, [r4]
 8010636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801063a:	b923      	cbnz	r3, 8010646 <powf+0x13e>
 801063c:	2200      	movs	r2, #0
 801063e:	2300      	movs	r3, #0
 8010640:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010644:	e79a      	b.n	801057c <powf+0x74>
 8010646:	495e      	ldr	r1, [pc, #376]	; (80107c0 <powf+0x2b8>)
 8010648:	2000      	movs	r0, #0
 801064a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801064e:	2b02      	cmp	r3, #2
 8010650:	d194      	bne.n	801057c <powf+0x74>
 8010652:	f7fe fe1d 	bl	800f290 <__errno>
 8010656:	2321      	movs	r3, #33	; 0x21
 8010658:	6003      	str	r3, [r0, #0]
 801065a:	e7bc      	b.n	80105d6 <powf+0xce>
 801065c:	f001 ffec 	bl	8012638 <finitef>
 8010660:	4605      	mov	r5, r0
 8010662:	2800      	cmp	r0, #0
 8010664:	d173      	bne.n	801074e <powf+0x246>
 8010666:	eeb0 0a68 	vmov.f32	s0, s17
 801066a:	f001 ffe5 	bl	8012638 <finitef>
 801066e:	2800      	cmp	r0, #0
 8010670:	d06d      	beq.n	801074e <powf+0x246>
 8010672:	eeb0 0a48 	vmov.f32	s0, s16
 8010676:	f001 ffdf 	bl	8012638 <finitef>
 801067a:	2800      	cmp	r0, #0
 801067c:	d067      	beq.n	801074e <powf+0x246>
 801067e:	ee18 0a90 	vmov	r0, s17
 8010682:	f7f5 f877 	bl	8005774 <__aeabi_f2d>
 8010686:	4680      	mov	r8, r0
 8010688:	ee18 0a10 	vmov	r0, s16
 801068c:	4689      	mov	r9, r1
 801068e:	f7f5 f871 	bl	8005774 <__aeabi_f2d>
 8010692:	eeb4 9a49 	vcmp.f32	s18, s18
 8010696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801069a:	f994 4000 	ldrsb.w	r4, [r4]
 801069e:	4b45      	ldr	r3, [pc, #276]	; (80107b4 <powf+0x2ac>)
 80106a0:	d713      	bvc.n	80106ca <powf+0x1c2>
 80106a2:	2201      	movs	r2, #1
 80106a4:	e9cd 2300 	strd	r2, r3, [sp]
 80106a8:	9508      	str	r5, [sp, #32]
 80106aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80106ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106b2:	2c00      	cmp	r4, #0
 80106b4:	d0c2      	beq.n	801063c <powf+0x134>
 80106b6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80106ba:	ee17 0a90 	vmov	r0, s15
 80106be:	f7f5 f859 	bl	8005774 <__aeabi_f2d>
 80106c2:	2c02      	cmp	r4, #2
 80106c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80106c8:	e7c2      	b.n	8010650 <powf+0x148>
 80106ca:	2203      	movs	r2, #3
 80106cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80106d0:	e9cd 2300 	strd	r2, r3, [sp]
 80106d4:	9508      	str	r5, [sp, #32]
 80106d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80106da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106de:	ee28 8a27 	vmul.f32	s16, s16, s15
 80106e2:	b9fc      	cbnz	r4, 8010724 <powf+0x21c>
 80106e4:	4b37      	ldr	r3, [pc, #220]	; (80107c4 <powf+0x2bc>)
 80106e6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80106ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80106ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80106f6:	d553      	bpl.n	80107a0 <powf+0x298>
 80106f8:	eeb0 0a48 	vmov.f32	s0, s16
 80106fc:	f001 ffac 	bl	8012658 <rintf>
 8010700:	eeb4 0a48 	vcmp.f32	s0, s16
 8010704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010708:	d004      	beq.n	8010714 <powf+0x20c>
 801070a:	4b2f      	ldr	r3, [pc, #188]	; (80107c8 <powf+0x2c0>)
 801070c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010710:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010714:	f996 3000 	ldrsb.w	r3, [r6]
 8010718:	2b02      	cmp	r3, #2
 801071a:	d141      	bne.n	80107a0 <powf+0x298>
 801071c:	f7fe fdb8 	bl	800f290 <__errno>
 8010720:	2322      	movs	r3, #34	; 0x22
 8010722:	e799      	b.n	8010658 <powf+0x150>
 8010724:	4b29      	ldr	r3, [pc, #164]	; (80107cc <powf+0x2c4>)
 8010726:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801072a:	2200      	movs	r2, #0
 801072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010730:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010734:	d5ee      	bpl.n	8010714 <powf+0x20c>
 8010736:	eeb0 0a48 	vmov.f32	s0, s16
 801073a:	f001 ff8d 	bl	8012658 <rintf>
 801073e:	eeb4 0a48 	vcmp.f32	s0, s16
 8010742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010746:	d0e5      	beq.n	8010714 <powf+0x20c>
 8010748:	2200      	movs	r2, #0
 801074a:	4b1d      	ldr	r3, [pc, #116]	; (80107c0 <powf+0x2b8>)
 801074c:	e7e0      	b.n	8010710 <powf+0x208>
 801074e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010756:	f47f af4a 	bne.w	80105ee <powf+0xe6>
 801075a:	eeb0 0a68 	vmov.f32	s0, s17
 801075e:	f001 ff6b 	bl	8012638 <finitef>
 8010762:	2800      	cmp	r0, #0
 8010764:	f43f af43 	beq.w	80105ee <powf+0xe6>
 8010768:	eeb0 0a48 	vmov.f32	s0, s16
 801076c:	f001 ff64 	bl	8012638 <finitef>
 8010770:	2800      	cmp	r0, #0
 8010772:	f43f af3c 	beq.w	80105ee <powf+0xe6>
 8010776:	2304      	movs	r3, #4
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	4b0e      	ldr	r3, [pc, #56]	; (80107b4 <powf+0x2ac>)
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	ee18 0a90 	vmov	r0, s17
 8010782:	2300      	movs	r3, #0
 8010784:	9308      	str	r3, [sp, #32]
 8010786:	f7f4 fff5 	bl	8005774 <__aeabi_f2d>
 801078a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801078e:	ee18 0a10 	vmov	r0, s16
 8010792:	f7f4 ffef 	bl	8005774 <__aeabi_f2d>
 8010796:	2200      	movs	r2, #0
 8010798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801079c:	2300      	movs	r3, #0
 801079e:	e7b7      	b.n	8010710 <powf+0x208>
 80107a0:	4668      	mov	r0, sp
 80107a2:	f001 fe11 	bl	80123c8 <matherr>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	f47f af15 	bne.w	80105d6 <powf+0xce>
 80107ac:	e7b6      	b.n	801071c <powf+0x214>
 80107ae:	bf00      	nop
 80107b0:	200006c0 	.word	0x200006c0
 80107b4:	08015506 	.word	0x08015506
 80107b8:	3ff00000 	.word	0x3ff00000
 80107bc:	00000000 	.word	0x00000000
 80107c0:	fff00000 	.word	0xfff00000
 80107c4:	47efffff 	.word	0x47efffff
 80107c8:	c7efffff 	.word	0xc7efffff
 80107cc:	7ff00000 	.word	0x7ff00000

080107d0 <sinhf>:
 80107d0:	b530      	push	{r4, r5, lr}
 80107d2:	ed2d 8b02 	vpush	{d8}
 80107d6:	4c2b      	ldr	r4, [pc, #172]	; (8010884 <sinhf+0xb4>)
 80107d8:	b08b      	sub	sp, #44	; 0x2c
 80107da:	eeb0 8a40 	vmov.f32	s16, s0
 80107de:	f001 f975 	bl	8011acc <__ieee754_sinhf>
 80107e2:	f994 3000 	ldrsb.w	r3, [r4]
 80107e6:	3301      	adds	r3, #1
 80107e8:	eef0 8a40 	vmov.f32	s17, s0
 80107ec:	d034      	beq.n	8010858 <sinhf+0x88>
 80107ee:	f001 ff23 	bl	8012638 <finitef>
 80107f2:	4605      	mov	r5, r0
 80107f4:	2800      	cmp	r0, #0
 80107f6:	d12f      	bne.n	8010858 <sinhf+0x88>
 80107f8:	eeb0 0a48 	vmov.f32	s0, s16
 80107fc:	f001 ff1c 	bl	8012638 <finitef>
 8010800:	b350      	cbz	r0, 8010858 <sinhf+0x88>
 8010802:	2303      	movs	r3, #3
 8010804:	9300      	str	r3, [sp, #0]
 8010806:	ee18 0a10 	vmov	r0, s16
 801080a:	4b1f      	ldr	r3, [pc, #124]	; (8010888 <sinhf+0xb8>)
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	9508      	str	r5, [sp, #32]
 8010810:	f7f4 ffb0 	bl	8005774 <__aeabi_f2d>
 8010814:	f994 3000 	ldrsb.w	r3, [r4]
 8010818:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801081c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010820:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010824:	b9f3      	cbnz	r3, 8010864 <sinhf+0x94>
 8010826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801082a:	bfd4      	ite	le
 801082c:	4b17      	ldrle	r3, [pc, #92]	; (801088c <sinhf+0xbc>)
 801082e:	4b18      	ldrgt	r3, [pc, #96]	; (8010890 <sinhf+0xc0>)
 8010830:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010834:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010838:	4668      	mov	r0, sp
 801083a:	f001 fdc5 	bl	80123c8 <matherr>
 801083e:	b1d8      	cbz	r0, 8010878 <sinhf+0xa8>
 8010840:	9b08      	ldr	r3, [sp, #32]
 8010842:	b11b      	cbz	r3, 801084c <sinhf+0x7c>
 8010844:	f7fe fd24 	bl	800f290 <__errno>
 8010848:	9b08      	ldr	r3, [sp, #32]
 801084a:	6003      	str	r3, [r0, #0]
 801084c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010850:	f7f5 f9fa 	bl	8005c48 <__aeabi_d2f>
 8010854:	ee08 0a90 	vmov	s17, r0
 8010858:	eeb0 0a68 	vmov.f32	s0, s17
 801085c:	b00b      	add	sp, #44	; 0x2c
 801085e:	ecbd 8b02 	vpop	{d8}
 8010862:	bd30      	pop	{r4, r5, pc}
 8010864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010868:	bfd4      	ite	le
 801086a:	490a      	ldrle	r1, [pc, #40]	; (8010894 <sinhf+0xc4>)
 801086c:	490a      	ldrgt	r1, [pc, #40]	; (8010898 <sinhf+0xc8>)
 801086e:	2000      	movs	r0, #0
 8010870:	2b02      	cmp	r3, #2
 8010872:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010876:	d1df      	bne.n	8010838 <sinhf+0x68>
 8010878:	f7fe fd0a 	bl	800f290 <__errno>
 801087c:	2322      	movs	r3, #34	; 0x22
 801087e:	6003      	str	r3, [r0, #0]
 8010880:	e7de      	b.n	8010840 <sinhf+0x70>
 8010882:	bf00      	nop
 8010884:	200006c0 	.word	0x200006c0
 8010888:	0801550b 	.word	0x0801550b
 801088c:	c7efffff 	.word	0xc7efffff
 8010890:	47efffff 	.word	0x47efffff
 8010894:	fff00000 	.word	0xfff00000
 8010898:	7ff00000 	.word	0x7ff00000

0801089c <__ieee754_acosf>:
 801089c:	b508      	push	{r3, lr}
 801089e:	ee10 3a10 	vmov	r3, s0
 80108a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80108a6:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80108aa:	ed2d 8b0c 	vpush	{d8-d13}
 80108ae:	d10a      	bne.n	80108c6 <__ieee754_acosf+0x2a>
 80108b0:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8010a50 <__ieee754_acosf+0x1b4>
 80108b4:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8010a54 <__ieee754_acosf+0x1b8>
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	bfd8      	it	le
 80108bc:	eeb0 0a48 	vmovle.f32	s0, s16
 80108c0:	ecbd 8b0c 	vpop	{d8-d13}
 80108c4:	bd08      	pop	{r3, pc}
 80108c6:	dd04      	ble.n	80108d2 <__ieee754_acosf+0x36>
 80108c8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80108cc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80108d0:	e7f6      	b.n	80108c0 <__ieee754_acosf+0x24>
 80108d2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80108d6:	da3e      	bge.n	8010956 <__ieee754_acosf+0xba>
 80108d8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80108dc:	f340 80b5 	ble.w	8010a4a <__ieee754_acosf+0x1ae>
 80108e0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80108e4:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8010a58 <__ieee754_acosf+0x1bc>
 80108e8:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8010a5c <__ieee754_acosf+0x1c0>
 80108ec:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8010a60 <__ieee754_acosf+0x1c4>
 80108f0:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8010a64 <__ieee754_acosf+0x1c8>
 80108f4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80108f8:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8010a68 <__ieee754_acosf+0x1cc>
 80108fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010900:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8010a6c <__ieee754_acosf+0x1d0>
 8010904:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010908:	eddf 6a59 	vldr	s13, [pc, #356]	; 8010a70 <__ieee754_acosf+0x1d4>
 801090c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010910:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8010a74 <__ieee754_acosf+0x1d8>
 8010914:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010918:	eddf 6a57 	vldr	s13, [pc, #348]	; 8010a78 <__ieee754_acosf+0x1dc>
 801091c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010920:	eddf 6a56 	vldr	s13, [pc, #344]	; 8010a7c <__ieee754_acosf+0x1e0>
 8010924:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010928:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8010a80 <__ieee754_acosf+0x1e4>
 801092c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010934:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010938:	ee27 7a27 	vmul.f32	s14, s14, s15
 801093c:	eef0 7a66 	vmov.f32	s15, s13
 8010940:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010944:	eea0 8a66 	vfms.f32	s16, s0, s13
 8010948:	ee30 8a48 	vsub.f32	s16, s0, s16
 801094c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010a84 <__ieee754_acosf+0x1e8>
 8010950:	ee30 0a48 	vsub.f32	s0, s0, s16
 8010954:	e7b4      	b.n	80108c0 <__ieee754_acosf+0x24>
 8010956:	2b00      	cmp	r3, #0
 8010958:	eddf da3f 	vldr	s27, [pc, #252]	; 8010a58 <__ieee754_acosf+0x1bc>
 801095c:	eddf ca3f 	vldr	s25, [pc, #252]	; 8010a5c <__ieee754_acosf+0x1c0>
 8010960:	ed9f ca41 	vldr	s24, [pc, #260]	; 8010a68 <__ieee754_acosf+0x1cc>
 8010964:	eddf ba41 	vldr	s23, [pc, #260]	; 8010a6c <__ieee754_acosf+0x1d0>
 8010968:	ed9f ba41 	vldr	s22, [pc, #260]	; 8010a70 <__ieee754_acosf+0x1d4>
 801096c:	eddf 8a41 	vldr	s17, [pc, #260]	; 8010a74 <__ieee754_acosf+0x1d8>
 8010970:	ed9f da41 	vldr	s26, [pc, #260]	; 8010a78 <__ieee754_acosf+0x1dc>
 8010974:	eddf aa3a 	vldr	s21, [pc, #232]	; 8010a60 <__ieee754_acosf+0x1c4>
 8010978:	ed9f aa40 	vldr	s20, [pc, #256]	; 8010a7c <__ieee754_acosf+0x1e0>
 801097c:	eddf 9a40 	vldr	s19, [pc, #256]	; 8010a80 <__ieee754_acosf+0x1e4>
 8010980:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8010984:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010988:	da28      	bge.n	80109dc <__ieee754_acosf+0x140>
 801098a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801098e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010992:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8010996:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801099a:	eeac ca80 	vfma.f32	s24, s25, s0
 801099e:	eeaa aa80 	vfma.f32	s20, s21, s0
 80109a2:	eeec ba00 	vfma.f32	s23, s24, s0
 80109a6:	eeea 9a00 	vfma.f32	s19, s20, s0
 80109aa:	eeab ba80 	vfma.f32	s22, s23, s0
 80109ae:	eea9 9a80 	vfma.f32	s18, s19, s0
 80109b2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80109b6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80109ba:	f001 f8f5 	bl	8011ba8 <__ieee754_sqrtf>
 80109be:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80109c2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8010a88 <__ieee754_acosf+0x1ec>
 80109c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80109ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80109ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80109d2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8010a8c <__ieee754_acosf+0x1f0>
 80109d6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80109da:	e771      	b.n	80108c0 <__ieee754_acosf+0x24>
 80109dc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80109e0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80109e4:	eeb0 0a48 	vmov.f32	s0, s16
 80109e8:	f001 f8de 	bl	8011ba8 <__ieee754_sqrtf>
 80109ec:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80109f0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80109f4:	eeac ca88 	vfma.f32	s24, s25, s16
 80109f8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80109fc:	eeec ba08 	vfma.f32	s23, s24, s16
 8010a00:	ee10 3a10 	vmov	r3, s0
 8010a04:	eeab ba88 	vfma.f32	s22, s23, s16
 8010a08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010a0c:	f023 030f 	bic.w	r3, r3, #15
 8010a10:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010a14:	ee07 3a90 	vmov	s15, r3
 8010a18:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8010a1c:	eeb0 6a48 	vmov.f32	s12, s16
 8010a20:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010a24:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010a28:	ee70 6a27 	vadd.f32	s13, s0, s15
 8010a2c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010a30:	eeb0 7a40 	vmov.f32	s14, s0
 8010a34:	ee86 0a26 	vdiv.f32	s0, s12, s13
 8010a38:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010a3c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8010a40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a44:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010a48:	e73a      	b.n	80108c0 <__ieee754_acosf+0x24>
 8010a4a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8010a90 <__ieee754_acosf+0x1f4>
 8010a4e:	e737      	b.n	80108c0 <__ieee754_acosf+0x24>
 8010a50:	00000000 	.word	0x00000000
 8010a54:	40490fdb 	.word	0x40490fdb
 8010a58:	3811ef08 	.word	0x3811ef08
 8010a5c:	3a4f7f04 	.word	0x3a4f7f04
 8010a60:	bf303361 	.word	0xbf303361
 8010a64:	33a22168 	.word	0x33a22168
 8010a68:	bd241146 	.word	0xbd241146
 8010a6c:	3e4e0aa8 	.word	0x3e4e0aa8
 8010a70:	bea6b090 	.word	0xbea6b090
 8010a74:	3e2aaaab 	.word	0x3e2aaaab
 8010a78:	3d9dc62e 	.word	0x3d9dc62e
 8010a7c:	4001572d 	.word	0x4001572d
 8010a80:	c019d139 	.word	0xc019d139
 8010a84:	3fc90fda 	.word	0x3fc90fda
 8010a88:	b3a22168 	.word	0xb3a22168
 8010a8c:	40490fda 	.word	0x40490fda
 8010a90:	3fc90fdb 	.word	0x3fc90fdb

08010a94 <__ieee754_acoshf>:
 8010a94:	b508      	push	{r3, lr}
 8010a96:	ee10 3a10 	vmov	r3, s0
 8010a9a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010a9e:	ed2d 8b04 	vpush	{d8-d9}
 8010aa2:	eeb0 8a40 	vmov.f32	s16, s0
 8010aa6:	da06      	bge.n	8010ab6 <__ieee754_acoshf+0x22>
 8010aa8:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010aac:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010ab0:	ecbd 8b04 	vpop	{d8-d9}
 8010ab4:	bd08      	pop	{r3, pc}
 8010ab6:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 8010aba:	db0c      	blt.n	8010ad6 <__ieee754_acoshf+0x42>
 8010abc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010ac0:	db02      	blt.n	8010ac8 <__ieee754_acoshf+0x34>
 8010ac2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ac6:	e7f3      	b.n	8010ab0 <__ieee754_acoshf+0x1c>
 8010ac8:	f000 fb26 	bl	8011118 <__ieee754_logf>
 8010acc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8010b34 <__ieee754_acoshf+0xa0>
 8010ad0:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010ad4:	e7ec      	b.n	8010ab0 <__ieee754_acoshf+0x1c>
 8010ad6:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010ada:	d028      	beq.n	8010b2e <__ieee754_acoshf+0x9a>
 8010adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ae0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8010ae4:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8010ae8:	dd11      	ble.n	8010b0e <__ieee754_acoshf+0x7a>
 8010aea:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8010aee:	eea8 0a08 	vfma.f32	s0, s16, s16
 8010af2:	f001 f859 	bl	8011ba8 <__ieee754_sqrtf>
 8010af6:	ee70 7a08 	vadd.f32	s15, s0, s16
 8010afa:	ee89 0a27 	vdiv.f32	s0, s18, s15
 8010afe:	ee98 0a28 	vfnms.f32	s0, s16, s17
 8010b02:	ecbd 8b04 	vpop	{d8-d9}
 8010b06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b0a:	f000 bb05 	b.w	8011118 <__ieee754_logf>
 8010b0e:	ee30 8a49 	vsub.f32	s16, s0, s18
 8010b12:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010b16:	eea8 0a28 	vfma.f32	s0, s16, s17
 8010b1a:	f001 f845 	bl	8011ba8 <__ieee754_sqrtf>
 8010b1e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010b22:	ecbd 8b04 	vpop	{d8-d9}
 8010b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010b2a:	f7fe bfe3 	b.w	800faf4 <log1pf>
 8010b2e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8010b38 <__ieee754_acoshf+0xa4>
 8010b32:	e7bd      	b.n	8010ab0 <__ieee754_acoshf+0x1c>
 8010b34:	3f317218 	.word	0x3f317218
 8010b38:	00000000 	.word	0x00000000

08010b3c <__ieee754_asinf>:
 8010b3c:	b538      	push	{r3, r4, r5, lr}
 8010b3e:	ee10 5a10 	vmov	r5, s0
 8010b42:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010b46:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8010b4a:	ed2d 8b04 	vpush	{d8-d9}
 8010b4e:	d10c      	bne.n	8010b6a <__ieee754_asinf+0x2e>
 8010b50:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8010ccc <__ieee754_asinf+0x190>
 8010b54:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8010cd0 <__ieee754_asinf+0x194>
 8010b58:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010b5c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010b60:	eeb0 0a67 	vmov.f32	s0, s15
 8010b64:	ecbd 8b04 	vpop	{d8-d9}
 8010b68:	bd38      	pop	{r3, r4, r5, pc}
 8010b6a:	dd04      	ble.n	8010b76 <__ieee754_asinf+0x3a>
 8010b6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010b70:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010b74:	e7f6      	b.n	8010b64 <__ieee754_asinf+0x28>
 8010b76:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8010b7a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010b7e:	da0b      	bge.n	8010b98 <__ieee754_asinf+0x5c>
 8010b80:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8010b84:	da52      	bge.n	8010c2c <__ieee754_asinf+0xf0>
 8010b86:	eddf 7a53 	vldr	s15, [pc, #332]	; 8010cd4 <__ieee754_asinf+0x198>
 8010b8a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010b8e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b96:	dce5      	bgt.n	8010b64 <__ieee754_asinf+0x28>
 8010b98:	f7fe ff62 	bl	800fa60 <fabsf>
 8010b9c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8010ba0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010ba4:	ee20 8a08 	vmul.f32	s16, s0, s16
 8010ba8:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8010cd8 <__ieee754_asinf+0x19c>
 8010bac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8010cdc <__ieee754_asinf+0x1a0>
 8010bb0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8010ce0 <__ieee754_asinf+0x1a4>
 8010bb4:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010bb8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8010ce4 <__ieee754_asinf+0x1a8>
 8010bbc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010bc0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010ce8 <__ieee754_asinf+0x1ac>
 8010bc4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010bc8:	eddf 7a48 	vldr	s15, [pc, #288]	; 8010cec <__ieee754_asinf+0x1b0>
 8010bcc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010bd0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8010cf0 <__ieee754_asinf+0x1b4>
 8010bd4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8010bd8:	eddf 7a46 	vldr	s15, [pc, #280]	; 8010cf4 <__ieee754_asinf+0x1b8>
 8010bdc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8010be0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8010cf8 <__ieee754_asinf+0x1bc>
 8010be4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8010be8:	eddf 7a44 	vldr	s15, [pc, #272]	; 8010cfc <__ieee754_asinf+0x1c0>
 8010bec:	eee7 7a08 	vfma.f32	s15, s14, s16
 8010bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8010bf4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8010bf8:	f000 ffd6 	bl	8011ba8 <__ieee754_sqrtf>
 8010bfc:	4b40      	ldr	r3, [pc, #256]	; (8010d00 <__ieee754_asinf+0x1c4>)
 8010bfe:	ee29 9a08 	vmul.f32	s18, s18, s16
 8010c02:	429c      	cmp	r4, r3
 8010c04:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8010c08:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010c0c:	dd3d      	ble.n	8010c8a <__ieee754_asinf+0x14e>
 8010c0e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8010c12:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8010d04 <__ieee754_asinf+0x1c8>
 8010c16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010c1a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8010cd0 <__ieee754_asinf+0x194>
 8010c1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010c22:	2d00      	cmp	r5, #0
 8010c24:	bfd8      	it	le
 8010c26:	eeb1 0a40 	vnegle.f32	s0, s0
 8010c2a:	e79b      	b.n	8010b64 <__ieee754_asinf+0x28>
 8010c2c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010c30:	eddf 6a29 	vldr	s13, [pc, #164]	; 8010cd8 <__ieee754_asinf+0x19c>
 8010c34:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8010cdc <__ieee754_asinf+0x1a0>
 8010c38:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8010cf0 <__ieee754_asinf+0x1b4>
 8010c3c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010c40:	eddf 6a28 	vldr	s13, [pc, #160]	; 8010ce4 <__ieee754_asinf+0x1a8>
 8010c44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010c48:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8010ce8 <__ieee754_asinf+0x1ac>
 8010c4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c50:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010cec <__ieee754_asinf+0x1b0>
 8010c54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010c58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8010ce0 <__ieee754_asinf+0x1a4>
 8010c5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010c60:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010cf4 <__ieee754_asinf+0x1b8>
 8010c64:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010c68:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8010cf8 <__ieee754_asinf+0x1bc>
 8010c6c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010c70:	eddf 6a22 	vldr	s13, [pc, #136]	; 8010cfc <__ieee754_asinf+0x1c0>
 8010c74:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010c78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010c7c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8010c80:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010c84:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010c88:	e76c      	b.n	8010b64 <__ieee754_asinf+0x28>
 8010c8a:	ee10 3a10 	vmov	r3, s0
 8010c8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010c92:	f023 030f 	bic.w	r3, r3, #15
 8010c96:	ee07 3a90 	vmov	s15, r3
 8010c9a:	eef1 6a67 	vneg.f32	s13, s15
 8010c9e:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8010ca2:	ee70 5a00 	vadd.f32	s11, s0, s0
 8010ca6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010caa:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010ccc <__ieee754_asinf+0x190>
 8010cae:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8010cb2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8010d08 <__ieee754_asinf+0x1cc>
 8010cb6:	eee5 7a47 	vfms.f32	s15, s10, s14
 8010cba:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8010cbe:	eeb0 6a40 	vmov.f32	s12, s0
 8010cc2:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010cc6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010cca:	e7a8      	b.n	8010c1e <__ieee754_asinf+0xe2>
 8010ccc:	b33bbd2e 	.word	0xb33bbd2e
 8010cd0:	3fc90fdb 	.word	0x3fc90fdb
 8010cd4:	7149f2ca 	.word	0x7149f2ca
 8010cd8:	3811ef08 	.word	0x3811ef08
 8010cdc:	3a4f7f04 	.word	0x3a4f7f04
 8010ce0:	3e2aaaab 	.word	0x3e2aaaab
 8010ce4:	bd241146 	.word	0xbd241146
 8010ce8:	3e4e0aa8 	.word	0x3e4e0aa8
 8010cec:	bea6b090 	.word	0xbea6b090
 8010cf0:	3d9dc62e 	.word	0x3d9dc62e
 8010cf4:	bf303361 	.word	0xbf303361
 8010cf8:	4001572d 	.word	0x4001572d
 8010cfc:	c019d139 	.word	0xc019d139
 8010d00:	3f799999 	.word	0x3f799999
 8010d04:	333bbd2e 	.word	0x333bbd2e
 8010d08:	3f490fdb 	.word	0x3f490fdb

08010d0c <__ieee754_atanhf>:
 8010d0c:	b510      	push	{r4, lr}
 8010d0e:	ee10 4a10 	vmov	r4, s0
 8010d12:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010d16:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010d1a:	ed2d 8b02 	vpush	{d8}
 8010d1e:	dd06      	ble.n	8010d2e <__ieee754_atanhf+0x22>
 8010d20:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010d24:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010d28:	ecbd 8b02 	vpop	{d8}
 8010d2c:	bd10      	pop	{r4, pc}
 8010d2e:	d104      	bne.n	8010d3a <__ieee754_atanhf+0x2e>
 8010d30:	eddf 7a17 	vldr	s15, [pc, #92]	; 8010d90 <__ieee754_atanhf+0x84>
 8010d34:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8010d38:	e7f6      	b.n	8010d28 <__ieee754_atanhf+0x1c>
 8010d3a:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 8010d3e:	da08      	bge.n	8010d52 <__ieee754_atanhf+0x46>
 8010d40:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010d94 <__ieee754_atanhf+0x88>
 8010d44:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010d48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d50:	dcea      	bgt.n	8010d28 <__ieee754_atanhf+0x1c>
 8010d52:	ee07 3a90 	vmov	s15, r3
 8010d56:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8010d5a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8010d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010d66:	bfb6      	itet	lt
 8010d68:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8010d6c:	ee80 0a07 	vdivge.f32	s0, s0, s14
 8010d70:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 8010d74:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010d78:	bfb8      	it	lt
 8010d7a:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 8010d7e:	f7fe feb9 	bl	800faf4 <log1pf>
 8010d82:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010d86:	2c00      	cmp	r4, #0
 8010d88:	bfb8      	it	lt
 8010d8a:	eeb1 0a40 	vneglt.f32	s0, s0
 8010d8e:	e7cb      	b.n	8010d28 <__ieee754_atanhf+0x1c>
 8010d90:	00000000 	.word	0x00000000
 8010d94:	7149f2ca 	.word	0x7149f2ca

08010d98 <__ieee754_coshf>:
 8010d98:	b510      	push	{r4, lr}
 8010d9a:	ee10 4a10 	vmov	r4, s0
 8010d9e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010da2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010da6:	ed2d 8b02 	vpush	{d8}
 8010daa:	db04      	blt.n	8010db6 <__ieee754_coshf+0x1e>
 8010dac:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010db0:	ecbd 8b02 	vpop	{d8}
 8010db4:	bd10      	pop	{r4, pc}
 8010db6:	4b25      	ldr	r3, [pc, #148]	; (8010e4c <__ieee754_coshf+0xb4>)
 8010db8:	429c      	cmp	r4, r3
 8010dba:	dc15      	bgt.n	8010de8 <__ieee754_coshf+0x50>
 8010dbc:	f7fe fe50 	bl	800fa60 <fabsf>
 8010dc0:	f001 fb0e 	bl	80123e0 <expm1f>
 8010dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dc8:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 8010dcc:	eef0 7a40 	vmov.f32	s15, s0
 8010dd0:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010dd4:	dbec      	blt.n	8010db0 <__ieee754_coshf+0x18>
 8010dd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010dda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010dde:	eec7 6a80 	vdiv.f32	s13, s15, s0
 8010de2:	ee36 0a87 	vadd.f32	s0, s13, s14
 8010de6:	e7e3      	b.n	8010db0 <__ieee754_coshf+0x18>
 8010de8:	4b19      	ldr	r3, [pc, #100]	; (8010e50 <__ieee754_coshf+0xb8>)
 8010dea:	429c      	cmp	r4, r3
 8010dec:	dc0c      	bgt.n	8010e08 <__ieee754_coshf+0x70>
 8010dee:	f7fe fe37 	bl	800fa60 <fabsf>
 8010df2:	f000 f835 	bl	8010e60 <__ieee754_expf>
 8010df6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010dfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010dfe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010e02:	eeb0 0a67 	vmov.f32	s0, s15
 8010e06:	e7d3      	b.n	8010db0 <__ieee754_coshf+0x18>
 8010e08:	4b12      	ldr	r3, [pc, #72]	; (8010e54 <__ieee754_coshf+0xbc>)
 8010e0a:	429c      	cmp	r4, r3
 8010e0c:	dc08      	bgt.n	8010e20 <__ieee754_coshf+0x88>
 8010e0e:	f7fe fe27 	bl	800fa60 <fabsf>
 8010e12:	f000 f825 	bl	8010e60 <__ieee754_expf>
 8010e16:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010e1a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010e1e:	e7c7      	b.n	8010db0 <__ieee754_coshf+0x18>
 8010e20:	4b0d      	ldr	r3, [pc, #52]	; (8010e58 <__ieee754_coshf+0xc0>)
 8010e22:	429c      	cmp	r4, r3
 8010e24:	dc0c      	bgt.n	8010e40 <__ieee754_coshf+0xa8>
 8010e26:	f7fe fe1b 	bl	800fa60 <fabsf>
 8010e2a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010e2e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010e32:	f000 f815 	bl	8010e60 <__ieee754_expf>
 8010e36:	ee20 8a08 	vmul.f32	s16, s0, s16
 8010e3a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010e3e:	e7b7      	b.n	8010db0 <__ieee754_coshf+0x18>
 8010e40:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8010e5c <__ieee754_coshf+0xc4>
 8010e44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010e48:	e7b2      	b.n	8010db0 <__ieee754_coshf+0x18>
 8010e4a:	bf00      	nop
 8010e4c:	3eb17217 	.word	0x3eb17217
 8010e50:	41afffff 	.word	0x41afffff
 8010e54:	42b17217 	.word	0x42b17217
 8010e58:	42b2d4fc 	.word	0x42b2d4fc
 8010e5c:	7149f2ca 	.word	0x7149f2ca

08010e60 <__ieee754_expf>:
 8010e60:	ee10 2a10 	vmov	r2, s0
 8010e64:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010e68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010e6c:	d902      	bls.n	8010e74 <__ieee754_expf+0x14>
 8010e6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010e72:	4770      	bx	lr
 8010e74:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8010e78:	d106      	bne.n	8010e88 <__ieee754_expf+0x28>
 8010e7a:	eddf 7a51 	vldr	s15, [pc, #324]	; 8010fc0 <__ieee754_expf+0x160>
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	bf18      	it	ne
 8010e82:	eeb0 0a67 	vmovne.f32	s0, s15
 8010e86:	4770      	bx	lr
 8010e88:	484e      	ldr	r0, [pc, #312]	; (8010fc4 <__ieee754_expf+0x164>)
 8010e8a:	4282      	cmp	r2, r0
 8010e8c:	dd04      	ble.n	8010e98 <__ieee754_expf+0x38>
 8010e8e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8010fc8 <__ieee754_expf+0x168>
 8010e92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010e96:	4770      	bx	lr
 8010e98:	2a00      	cmp	r2, #0
 8010e9a:	da03      	bge.n	8010ea4 <__ieee754_expf+0x44>
 8010e9c:	4a4b      	ldr	r2, [pc, #300]	; (8010fcc <__ieee754_expf+0x16c>)
 8010e9e:	4291      	cmp	r1, r2
 8010ea0:	f200 808a 	bhi.w	8010fb8 <__ieee754_expf+0x158>
 8010ea4:	4a4a      	ldr	r2, [pc, #296]	; (8010fd0 <__ieee754_expf+0x170>)
 8010ea6:	4291      	cmp	r1, r2
 8010ea8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010eac:	d954      	bls.n	8010f58 <__ieee754_expf+0xf8>
 8010eae:	4a49      	ldr	r2, [pc, #292]	; (8010fd4 <__ieee754_expf+0x174>)
 8010eb0:	4291      	cmp	r1, r2
 8010eb2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010eb6:	d836      	bhi.n	8010f26 <__ieee754_expf+0xc6>
 8010eb8:	4947      	ldr	r1, [pc, #284]	; (8010fd8 <__ieee754_expf+0x178>)
 8010eba:	4411      	add	r1, r2
 8010ebc:	ed91 7a00 	vldr	s14, [r1]
 8010ec0:	4946      	ldr	r1, [pc, #280]	; (8010fdc <__ieee754_expf+0x17c>)
 8010ec2:	440a      	add	r2, r1
 8010ec4:	edd2 7a00 	vldr	s15, [r2]
 8010ec8:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010ecc:	f1c3 0201 	rsb	r2, r3, #1
 8010ed0:	1ad2      	subs	r2, r2, r3
 8010ed2:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010ed6:	ee60 6a00 	vmul.f32	s13, s0, s0
 8010eda:	eddf 5a41 	vldr	s11, [pc, #260]	; 8010fe0 <__ieee754_expf+0x180>
 8010ede:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8010fe4 <__ieee754_expf+0x184>
 8010ee2:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8010ee6:	eddf 5a40 	vldr	s11, [pc, #256]	; 8010fe8 <__ieee754_expf+0x188>
 8010eea:	eee5 5a26 	vfma.f32	s11, s10, s13
 8010eee:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8010fec <__ieee754_expf+0x18c>
 8010ef2:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8010ef6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8010ff0 <__ieee754_expf+0x190>
 8010efa:	eee5 5a26 	vfma.f32	s11, s10, s13
 8010efe:	eeb0 5a40 	vmov.f32	s10, s0
 8010f02:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8010f06:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8010f0a:	eef0 6a45 	vmov.f32	s13, s10
 8010f0e:	ee20 5a05 	vmul.f32	s10, s0, s10
 8010f12:	bb92      	cbnz	r2, 8010f7a <__ieee754_expf+0x11a>
 8010f14:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8010f18:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010f1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010f20:	ee36 0a40 	vsub.f32	s0, s12, s0
 8010f24:	4770      	bx	lr
 8010f26:	4b33      	ldr	r3, [pc, #204]	; (8010ff4 <__ieee754_expf+0x194>)
 8010f28:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010ff8 <__ieee754_expf+0x198>
 8010f2c:	4413      	add	r3, r2
 8010f2e:	edd3 7a00 	vldr	s15, [r3]
 8010f32:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010f36:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010ffc <__ieee754_expf+0x19c>
 8010f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f3e:	ee17 2a90 	vmov	r2, s15
 8010f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f46:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010f4a:	eeb0 7a40 	vmov.f32	s14, s0
 8010f4e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8011000 <__ieee754_expf+0x1a0>
 8010f52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010f56:	e7bc      	b.n	8010ed2 <__ieee754_expf+0x72>
 8010f58:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8010f5c:	d20b      	bcs.n	8010f76 <__ieee754_expf+0x116>
 8010f5e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8010fc8 <__ieee754_expf+0x168>
 8010f62:	ee70 6a26 	vadd.f32	s13, s0, s13
 8010f66:	eef4 6ac6 	vcmpe.f32	s13, s12
 8010f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6e:	dd02      	ble.n	8010f76 <__ieee754_expf+0x116>
 8010f70:	ee30 0a06 	vadd.f32	s0, s0, s12
 8010f74:	4770      	bx	lr
 8010f76:	2200      	movs	r2, #0
 8010f78:	e7ad      	b.n	8010ed6 <__ieee754_expf+0x76>
 8010f7a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010f7e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8010f82:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8010f86:	bfb8      	it	lt
 8010f88:	3264      	addlt	r2, #100	; 0x64
 8010f8a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010f8e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010f92:	ee76 7a40 	vsub.f32	s15, s12, s0
 8010f96:	ee17 3a90 	vmov	r3, s15
 8010f9a:	bfab      	itete	ge
 8010f9c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010fa0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010fa4:	ee00 3a10 	vmovge	s0, r3
 8010fa8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8011004 <__ieee754_expf+0x1a4>
 8010fac:	bfbc      	itt	lt
 8010fae:	ee00 3a10 	vmovlt	s0, r3
 8010fb2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8010fb6:	4770      	bx	lr
 8010fb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010fc0 <__ieee754_expf+0x160>
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	00000000 	.word	0x00000000
 8010fc4:	42b17217 	.word	0x42b17217
 8010fc8:	7149f2ca 	.word	0x7149f2ca
 8010fcc:	42cff1b5 	.word	0x42cff1b5
 8010fd0:	3eb17218 	.word	0x3eb17218
 8010fd4:	3f851591 	.word	0x3f851591
 8010fd8:	0801551c 	.word	0x0801551c
 8010fdc:	08015524 	.word	0x08015524
 8010fe0:	3331bb4c 	.word	0x3331bb4c
 8010fe4:	b5ddea0e 	.word	0xb5ddea0e
 8010fe8:	388ab355 	.word	0x388ab355
 8010fec:	bb360b61 	.word	0xbb360b61
 8010ff0:	3e2aaaab 	.word	0x3e2aaaab
 8010ff4:	08015514 	.word	0x08015514
 8010ff8:	3fb8aa3b 	.word	0x3fb8aa3b
 8010ffc:	3f317180 	.word	0x3f317180
 8011000:	3717f7d1 	.word	0x3717f7d1
 8011004:	0d800000 	.word	0x0d800000

08011008 <__ieee754_fmodf>:
 8011008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801100a:	ee10 6a90 	vmov	r6, s1
 801100e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8011012:	ee10 3a10 	vmov	r3, s0
 8011016:	d009      	beq.n	801102c <__ieee754_fmodf+0x24>
 8011018:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801101c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011020:	ee10 7a10 	vmov	r7, s0
 8011024:	da02      	bge.n	801102c <__ieee754_fmodf+0x24>
 8011026:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801102a:	dd0a      	ble.n	8011042 <__ieee754_fmodf+0x3a>
 801102c:	ee07 3a90 	vmov	s15, r3
 8011030:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8011034:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8011038:	ee17 3a90 	vmov	r3, s15
 801103c:	ee00 3a10 	vmov	s0, r3
 8011040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011042:	42a9      	cmp	r1, r5
 8011044:	dbfa      	blt.n	801103c <__ieee754_fmodf+0x34>
 8011046:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 801104a:	d105      	bne.n	8011058 <__ieee754_fmodf+0x50>
 801104c:	4a30      	ldr	r2, [pc, #192]	; (8011110 <__ieee754_fmodf+0x108>)
 801104e:	0fe3      	lsrs	r3, r4, #31
 8011050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	e7f1      	b.n	801103c <__ieee754_fmodf+0x34>
 8011058:	4b2e      	ldr	r3, [pc, #184]	; (8011114 <__ieee754_fmodf+0x10c>)
 801105a:	4299      	cmp	r1, r3
 801105c:	dc3e      	bgt.n	80110dc <__ieee754_fmodf+0xd4>
 801105e:	020a      	lsls	r2, r1, #8
 8011060:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8011064:	2a00      	cmp	r2, #0
 8011066:	dc36      	bgt.n	80110d6 <__ieee754_fmodf+0xce>
 8011068:	429d      	cmp	r5, r3
 801106a:	dc3a      	bgt.n	80110e2 <__ieee754_fmodf+0xda>
 801106c:	022b      	lsls	r3, r5, #8
 801106e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8011072:	005b      	lsls	r3, r3, #1
 8011074:	f102 32ff 	add.w	r2, r2, #4294967295
 8011078:	d5fb      	bpl.n	8011072 <__ieee754_fmodf+0x6a>
 801107a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 801107e:	bfbb      	ittet	lt
 8011080:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8011084:	1a1b      	sublt	r3, r3, r0
 8011086:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 801108a:	4099      	lsllt	r1, r3
 801108c:	bfa8      	it	ge
 801108e:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8011092:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8011096:	bfb5      	itete	lt
 8011098:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 801109c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80110a0:	1a9b      	sublt	r3, r3, r2
 80110a2:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80110a6:	bfb8      	it	lt
 80110a8:	409d      	lsllt	r5, r3
 80110aa:	1a80      	subs	r0, r0, r2
 80110ac:	1b4b      	subs	r3, r1, r5
 80110ae:	b9d8      	cbnz	r0, 80110e8 <__ieee754_fmodf+0xe0>
 80110b0:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80110b4:	bf28      	it	cs
 80110b6:	460b      	movcs	r3, r1
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d0c7      	beq.n	801104c <__ieee754_fmodf+0x44>
 80110bc:	4915      	ldr	r1, [pc, #84]	; (8011114 <__ieee754_fmodf+0x10c>)
 80110be:	428b      	cmp	r3, r1
 80110c0:	dd1a      	ble.n	80110f8 <__ieee754_fmodf+0xf0>
 80110c2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80110c6:	db1a      	blt.n	80110fe <__ieee754_fmodf+0xf6>
 80110c8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80110cc:	4323      	orrs	r3, r4
 80110ce:	327f      	adds	r2, #127	; 0x7f
 80110d0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80110d4:	e7b2      	b.n	801103c <__ieee754_fmodf+0x34>
 80110d6:	3801      	subs	r0, #1
 80110d8:	0052      	lsls	r2, r2, #1
 80110da:	e7c3      	b.n	8011064 <__ieee754_fmodf+0x5c>
 80110dc:	15c8      	asrs	r0, r1, #23
 80110de:	387f      	subs	r0, #127	; 0x7f
 80110e0:	e7c2      	b.n	8011068 <__ieee754_fmodf+0x60>
 80110e2:	15ea      	asrs	r2, r5, #23
 80110e4:	3a7f      	subs	r2, #127	; 0x7f
 80110e6:	e7c8      	b.n	801107a <__ieee754_fmodf+0x72>
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	da02      	bge.n	80110f2 <__ieee754_fmodf+0xea>
 80110ec:	0049      	lsls	r1, r1, #1
 80110ee:	3801      	subs	r0, #1
 80110f0:	e7dc      	b.n	80110ac <__ieee754_fmodf+0xa4>
 80110f2:	d0ab      	beq.n	801104c <__ieee754_fmodf+0x44>
 80110f4:	0059      	lsls	r1, r3, #1
 80110f6:	e7fa      	b.n	80110ee <__ieee754_fmodf+0xe6>
 80110f8:	005b      	lsls	r3, r3, #1
 80110fa:	3a01      	subs	r2, #1
 80110fc:	e7df      	b.n	80110be <__ieee754_fmodf+0xb6>
 80110fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011102:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011106:	3282      	adds	r2, #130	; 0x82
 8011108:	4113      	asrs	r3, r2
 801110a:	4323      	orrs	r3, r4
 801110c:	e796      	b.n	801103c <__ieee754_fmodf+0x34>
 801110e:	bf00      	nop
 8011110:	0801552c 	.word	0x0801552c
 8011114:	007fffff 	.word	0x007fffff

08011118 <__ieee754_logf>:
 8011118:	ee10 3a10 	vmov	r3, s0
 801111c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8011120:	d106      	bne.n	8011130 <__ieee754_logf+0x18>
 8011122:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80112b8 <__ieee754_logf+0x1a0>
 8011126:	eddf 7a65 	vldr	s15, [pc, #404]	; 80112bc <__ieee754_logf+0x1a4>
 801112a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801112e:	4770      	bx	lr
 8011130:	2b00      	cmp	r3, #0
 8011132:	da02      	bge.n	801113a <__ieee754_logf+0x22>
 8011134:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011138:	e7f5      	b.n	8011126 <__ieee754_logf+0xe>
 801113a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801113e:	db02      	blt.n	8011146 <__ieee754_logf+0x2e>
 8011140:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011144:	4770      	bx	lr
 8011146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801114a:	bfbf      	itttt	lt
 801114c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80112c0 <__ieee754_logf+0x1a8>
 8011150:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011154:	f06f 0118 	mvnlt.w	r1, #24
 8011158:	ee17 3a90 	vmovlt	r3, s15
 801115c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8011160:	bfa8      	it	ge
 8011162:	2100      	movge	r1, #0
 8011164:	3a7f      	subs	r2, #127	; 0x7f
 8011166:	440a      	add	r2, r1
 8011168:	4956      	ldr	r1, [pc, #344]	; (80112c4 <__ieee754_logf+0x1ac>)
 801116a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801116e:	4419      	add	r1, r3
 8011170:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8011174:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8011178:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801117c:	4319      	orrs	r1, r3
 801117e:	ee07 1a90 	vmov	s15, r1
 8011182:	f103 010f 	add.w	r1, r3, #15
 8011186:	f3c1 0116 	ubfx	r1, r1, #0, #23
 801118a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801118e:	290f      	cmp	r1, #15
 8011190:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011194:	dc31      	bgt.n	80111fa <__ieee754_logf+0xe2>
 8011196:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119e:	d10f      	bne.n	80111c0 <__ieee754_logf+0xa8>
 80111a0:	2a00      	cmp	r2, #0
 80111a2:	f000 8085 	beq.w	80112b0 <__ieee754_logf+0x198>
 80111a6:	ee07 2a90 	vmov	s15, r2
 80111aa:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80112c8 <__ieee754_logf+0x1b0>
 80111ae:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80112cc <__ieee754_logf+0x1b4>
 80111b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80111ba:	eea7 0a87 	vfma.f32	s0, s15, s14
 80111be:	4770      	bx	lr
 80111c0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80112d0 <__ieee754_logf+0x1b8>
 80111c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80111c8:	eea0 7a67 	vfms.f32	s14, s0, s15
 80111cc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80111d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111d4:	b912      	cbnz	r2, 80111dc <__ieee754_logf+0xc4>
 80111d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80111da:	4770      	bx	lr
 80111dc:	ee07 2a90 	vmov	s15, r2
 80111e0:	eddf 6a39 	vldr	s13, [pc, #228]	; 80112c8 <__ieee754_logf+0x1b0>
 80111e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111e8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80111ec:	ee37 0a40 	vsub.f32	s0, s14, s0
 80111f0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80112cc <__ieee754_logf+0x1b4>
 80111f4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80111f8:	4770      	bx	lr
 80111fa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80111fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011202:	eddf 5a34 	vldr	s11, [pc, #208]	; 80112d4 <__ieee754_logf+0x1bc>
 8011206:	eddf 4a34 	vldr	s9, [pc, #208]	; 80112d8 <__ieee754_logf+0x1c0>
 801120a:	4934      	ldr	r1, [pc, #208]	; (80112dc <__ieee754_logf+0x1c4>)
 801120c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011210:	4419      	add	r1, r3
 8011212:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8011216:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801121a:	430b      	orrs	r3, r1
 801121c:	2b00      	cmp	r3, #0
 801121e:	ee07 2a90 	vmov	s15, r2
 8011222:	ee26 5a06 	vmul.f32	s10, s12, s12
 8011226:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801122a:	ee25 7a05 	vmul.f32	s14, s10, s10
 801122e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80112e0 <__ieee754_logf+0x1c8>
 8011232:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011236:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80112e4 <__ieee754_logf+0x1cc>
 801123a:	eee7 5a87 	vfma.f32	s11, s15, s14
 801123e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80112e8 <__ieee754_logf+0x1d0>
 8011242:	eee7 7a24 	vfma.f32	s15, s14, s9
 8011246:	eddf 4a29 	vldr	s9, [pc, #164]	; 80112ec <__ieee754_logf+0x1d4>
 801124a:	eee7 4a87 	vfma.f32	s9, s15, s14
 801124e:	eddf 7a28 	vldr	s15, [pc, #160]	; 80112f0 <__ieee754_logf+0x1d8>
 8011252:	eee4 7a87 	vfma.f32	s15, s9, s14
 8011256:	ee67 7a85 	vmul.f32	s15, s15, s10
 801125a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801125e:	dd1c      	ble.n	801129a <__ieee754_logf+0x182>
 8011260:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011264:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011268:	ee27 7a00 	vmul.f32	s14, s14, s0
 801126c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011270:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011274:	b922      	cbnz	r2, 8011280 <__ieee754_logf+0x168>
 8011276:	ee77 7a67 	vsub.f32	s15, s14, s15
 801127a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801127e:	4770      	bx	lr
 8011280:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80112c8 <__ieee754_logf+0x1b0>
 8011284:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011288:	ee77 7a67 	vsub.f32	s15, s14, s15
 801128c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011290:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80112cc <__ieee754_logf+0x1b4>
 8011294:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8011298:	4770      	bx	lr
 801129a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801129e:	ee67 7a86 	vmul.f32	s15, s15, s12
 80112a2:	2a00      	cmp	r2, #0
 80112a4:	d0e9      	beq.n	801127a <__ieee754_logf+0x162>
 80112a6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80112c8 <__ieee754_logf+0x1b0>
 80112aa:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80112ae:	e7ed      	b.n	801128c <__ieee754_logf+0x174>
 80112b0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80112bc <__ieee754_logf+0x1a4>
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop
 80112b8:	cc000000 	.word	0xcc000000
 80112bc:	00000000 	.word	0x00000000
 80112c0:	4c000000 	.word	0x4c000000
 80112c4:	004afb20 	.word	0x004afb20
 80112c8:	3717f7d1 	.word	0x3717f7d1
 80112cc:	3f317180 	.word	0x3f317180
 80112d0:	3eaaaaab 	.word	0x3eaaaaab
 80112d4:	3e1cd04f 	.word	0x3e1cd04f
 80112d8:	3e178897 	.word	0x3e178897
 80112dc:	ffcf5c30 	.word	0xffcf5c30
 80112e0:	3e638e29 	.word	0x3e638e29
 80112e4:	3ecccccd 	.word	0x3ecccccd
 80112e8:	3e3a3325 	.word	0x3e3a3325
 80112ec:	3e924925 	.word	0x3e924925
 80112f0:	3f2aaaab 	.word	0x3f2aaaab

080112f4 <__ieee754_powf>:
 80112f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112f8:	ee10 5a90 	vmov	r5, s1
 80112fc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8011300:	ed2d 8b02 	vpush	{d8}
 8011304:	eeb0 8a40 	vmov.f32	s16, s0
 8011308:	eef0 8a60 	vmov.f32	s17, s1
 801130c:	f000 8293 	beq.w	8011836 <__ieee754_powf+0x542>
 8011310:	ee10 8a10 	vmov	r8, s0
 8011314:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8011318:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801131c:	dc06      	bgt.n	801132c <__ieee754_powf+0x38>
 801131e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8011322:	dd0a      	ble.n	801133a <__ieee754_powf+0x46>
 8011324:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011328:	f000 8285 	beq.w	8011836 <__ieee754_powf+0x542>
 801132c:	ecbd 8b02 	vpop	{d8}
 8011330:	48d9      	ldr	r0, [pc, #868]	; (8011698 <__ieee754_powf+0x3a4>)
 8011332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011336:	f001 b989 	b.w	801264c <nanf>
 801133a:	f1b8 0f00 	cmp.w	r8, #0
 801133e:	da1d      	bge.n	801137c <__ieee754_powf+0x88>
 8011340:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8011344:	da2c      	bge.n	80113a0 <__ieee754_powf+0xac>
 8011346:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801134a:	db30      	blt.n	80113ae <__ieee754_powf+0xba>
 801134c:	15fb      	asrs	r3, r7, #23
 801134e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011352:	fa47 f603 	asr.w	r6, r7, r3
 8011356:	fa06 f303 	lsl.w	r3, r6, r3
 801135a:	42bb      	cmp	r3, r7
 801135c:	d127      	bne.n	80113ae <__ieee754_powf+0xba>
 801135e:	f006 0601 	and.w	r6, r6, #1
 8011362:	f1c6 0602 	rsb	r6, r6, #2
 8011366:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801136a:	d122      	bne.n	80113b2 <__ieee754_powf+0xbe>
 801136c:	2d00      	cmp	r5, #0
 801136e:	f280 8268 	bge.w	8011842 <__ieee754_powf+0x54e>
 8011372:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011376:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801137a:	e00d      	b.n	8011398 <__ieee754_powf+0xa4>
 801137c:	2600      	movs	r6, #0
 801137e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8011382:	d1f0      	bne.n	8011366 <__ieee754_powf+0x72>
 8011384:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011388:	f000 8255 	beq.w	8011836 <__ieee754_powf+0x542>
 801138c:	dd0a      	ble.n	80113a4 <__ieee754_powf+0xb0>
 801138e:	2d00      	cmp	r5, #0
 8011390:	f280 8254 	bge.w	801183c <__ieee754_powf+0x548>
 8011394:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801169c <__ieee754_powf+0x3a8>
 8011398:	ecbd 8b02 	vpop	{d8}
 801139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113a0:	2602      	movs	r6, #2
 80113a2:	e7ec      	b.n	801137e <__ieee754_powf+0x8a>
 80113a4:	2d00      	cmp	r5, #0
 80113a6:	daf5      	bge.n	8011394 <__ieee754_powf+0xa0>
 80113a8:	eeb1 0a68 	vneg.f32	s0, s17
 80113ac:	e7f4      	b.n	8011398 <__ieee754_powf+0xa4>
 80113ae:	2600      	movs	r6, #0
 80113b0:	e7d9      	b.n	8011366 <__ieee754_powf+0x72>
 80113b2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80113b6:	d102      	bne.n	80113be <__ieee754_powf+0xca>
 80113b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80113bc:	e7ec      	b.n	8011398 <__ieee754_powf+0xa4>
 80113be:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80113c2:	eeb0 0a48 	vmov.f32	s0, s16
 80113c6:	d108      	bne.n	80113da <__ieee754_powf+0xe6>
 80113c8:	f1b8 0f00 	cmp.w	r8, #0
 80113cc:	db05      	blt.n	80113da <__ieee754_powf+0xe6>
 80113ce:	ecbd 8b02 	vpop	{d8}
 80113d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113d6:	f000 bbe7 	b.w	8011ba8 <__ieee754_sqrtf>
 80113da:	f7fe fb41 	bl	800fa60 <fabsf>
 80113de:	b124      	cbz	r4, 80113ea <__ieee754_powf+0xf6>
 80113e0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80113e4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80113e8:	d117      	bne.n	801141a <__ieee754_powf+0x126>
 80113ea:	2d00      	cmp	r5, #0
 80113ec:	bfbc      	itt	lt
 80113ee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80113f2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80113f6:	f1b8 0f00 	cmp.w	r8, #0
 80113fa:	dacd      	bge.n	8011398 <__ieee754_powf+0xa4>
 80113fc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8011400:	ea54 0306 	orrs.w	r3, r4, r6
 8011404:	d104      	bne.n	8011410 <__ieee754_powf+0x11c>
 8011406:	ee70 7a40 	vsub.f32	s15, s0, s0
 801140a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801140e:	e7c3      	b.n	8011398 <__ieee754_powf+0xa4>
 8011410:	2e01      	cmp	r6, #1
 8011412:	d1c1      	bne.n	8011398 <__ieee754_powf+0xa4>
 8011414:	eeb1 0a40 	vneg.f32	s0, s0
 8011418:	e7be      	b.n	8011398 <__ieee754_powf+0xa4>
 801141a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801141e:	3801      	subs	r0, #1
 8011420:	ea56 0300 	orrs.w	r3, r6, r0
 8011424:	d104      	bne.n	8011430 <__ieee754_powf+0x13c>
 8011426:	ee38 8a48 	vsub.f32	s16, s16, s16
 801142a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801142e:	e7b3      	b.n	8011398 <__ieee754_powf+0xa4>
 8011430:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8011434:	dd6d      	ble.n	8011512 <__ieee754_powf+0x21e>
 8011436:	4b9a      	ldr	r3, [pc, #616]	; (80116a0 <__ieee754_powf+0x3ac>)
 8011438:	429c      	cmp	r4, r3
 801143a:	dc06      	bgt.n	801144a <__ieee754_powf+0x156>
 801143c:	2d00      	cmp	r5, #0
 801143e:	daa9      	bge.n	8011394 <__ieee754_powf+0xa0>
 8011440:	ed9f 0a98 	vldr	s0, [pc, #608]	; 80116a4 <__ieee754_powf+0x3b0>
 8011444:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011448:	e7a6      	b.n	8011398 <__ieee754_powf+0xa4>
 801144a:	4b97      	ldr	r3, [pc, #604]	; (80116a8 <__ieee754_powf+0x3b4>)
 801144c:	429c      	cmp	r4, r3
 801144e:	dd02      	ble.n	8011456 <__ieee754_powf+0x162>
 8011450:	2d00      	cmp	r5, #0
 8011452:	dcf5      	bgt.n	8011440 <__ieee754_powf+0x14c>
 8011454:	e79e      	b.n	8011394 <__ieee754_powf+0xa0>
 8011456:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801145a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801145e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80116ac <__ieee754_powf+0x3b8>
 8011462:	eef1 6a40 	vneg.f32	s13, s0
 8011466:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801146a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801146e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011472:	eee7 7a40 	vfms.f32	s15, s14, s0
 8011476:	ee60 0a00 	vmul.f32	s1, s0, s0
 801147a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80116b0 <__ieee754_powf+0x3bc>
 801147e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8011482:	eddf 7a8c 	vldr	s15, [pc, #560]	; 80116b4 <__ieee754_powf+0x3c0>
 8011486:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801148a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801148e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80116b8 <__ieee754_powf+0x3c4>
 8011492:	eeb0 6a67 	vmov.f32	s12, s15
 8011496:	eea0 6a07 	vfma.f32	s12, s0, s14
 801149a:	ee16 3a10 	vmov	r3, s12
 801149e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80114a2:	f023 030f 	bic.w	r3, r3, #15
 80114a6:	ee00 3a90 	vmov	s1, r3
 80114aa:	eee6 0a87 	vfma.f32	s1, s13, s14
 80114ae:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80114b2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80114b6:	f025 050f 	bic.w	r5, r5, #15
 80114ba:	ee07 5a10 	vmov	s14, r5
 80114be:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80114c2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80114c6:	ee07 3a90 	vmov	s15, r3
 80114ca:	eee7 0a27 	vfma.f32	s1, s14, s15
 80114ce:	3e01      	subs	r6, #1
 80114d0:	ea56 0200 	orrs.w	r2, r6, r0
 80114d4:	ee07 5a10 	vmov	s14, r5
 80114d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80114dc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80114e0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80114e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80114e8:	ee17 4a10 	vmov	r4, s14
 80114ec:	bf08      	it	eq
 80114ee:	eeb0 8a40 	vmoveq.f32	s16, s0
 80114f2:	2c00      	cmp	r4, #0
 80114f4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80114f8:	f340 8184 	ble.w	8011804 <__ieee754_powf+0x510>
 80114fc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011500:	f340 80fc 	ble.w	80116fc <__ieee754_powf+0x408>
 8011504:	eddf 7a67 	vldr	s15, [pc, #412]	; 80116a4 <__ieee754_powf+0x3b0>
 8011508:	ee28 0a27 	vmul.f32	s0, s16, s15
 801150c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011510:	e742      	b.n	8011398 <__ieee754_powf+0xa4>
 8011512:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8011516:	bfbf      	itttt	lt
 8011518:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 80116bc <__ieee754_powf+0x3c8>
 801151c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011520:	f06f 0217 	mvnlt.w	r2, #23
 8011524:	ee17 4a90 	vmovlt	r4, s15
 8011528:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801152c:	bfa8      	it	ge
 801152e:	2200      	movge	r2, #0
 8011530:	3b7f      	subs	r3, #127	; 0x7f
 8011532:	4413      	add	r3, r2
 8011534:	4a62      	ldr	r2, [pc, #392]	; (80116c0 <__ieee754_powf+0x3cc>)
 8011536:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801153a:	4294      	cmp	r4, r2
 801153c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8011540:	dd06      	ble.n	8011550 <__ieee754_powf+0x25c>
 8011542:	4a60      	ldr	r2, [pc, #384]	; (80116c4 <__ieee754_powf+0x3d0>)
 8011544:	4294      	cmp	r4, r2
 8011546:	f340 80a5 	ble.w	8011694 <__ieee754_powf+0x3a0>
 801154a:	3301      	adds	r3, #1
 801154c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011550:	2400      	movs	r4, #0
 8011552:	4a5d      	ldr	r2, [pc, #372]	; (80116c8 <__ieee754_powf+0x3d4>)
 8011554:	00a7      	lsls	r7, r4, #2
 8011556:	443a      	add	r2, r7
 8011558:	ee07 1a90 	vmov	s15, r1
 801155c:	ed92 7a00 	vldr	s14, [r2]
 8011560:	4a5a      	ldr	r2, [pc, #360]	; (80116cc <__ieee754_powf+0x3d8>)
 8011562:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011566:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801156a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801156e:	1049      	asrs	r1, r1, #1
 8011570:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8011574:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8011578:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801157c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011580:	ee06 1a10 	vmov	s12, r1
 8011584:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8011588:	ee14 ca90 	vmov	ip, s9
 801158c:	ea02 0c0c 	and.w	ip, r2, ip
 8011590:	ee05 ca10 	vmov	s10, ip
 8011594:	eeb1 4a45 	vneg.f32	s8, s10
 8011598:	eee4 5a06 	vfma.f32	s11, s8, s12
 801159c:	ee36 6a47 	vsub.f32	s12, s12, s14
 80115a0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80116d0 <__ieee754_powf+0x3dc>
 80115a4:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80115a8:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80115ac:	eee4 5a06 	vfma.f32	s11, s8, s12
 80115b0:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80115b4:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80115b8:	eddf 5a46 	vldr	s11, [pc, #280]	; 80116d4 <__ieee754_powf+0x3e0>
 80115bc:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80115c0:	eddf 5a45 	vldr	s11, [pc, #276]	; 80116d8 <__ieee754_powf+0x3e4>
 80115c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80115c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80116ac <__ieee754_powf+0x3b8>
 80115cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80115d0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80116dc <__ieee754_powf+0x3e8>
 80115d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80115d8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80116e0 <__ieee754_powf+0x3ec>
 80115dc:	ee75 6a24 	vadd.f32	s13, s10, s9
 80115e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80115e4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80115e8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80115ec:	eef0 7a65 	vmov.f32	s15, s11
 80115f0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80115f4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80115f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115fc:	ee17 1a90 	vmov	r1, s15
 8011600:	4011      	ands	r1, r2
 8011602:	ee07 1a90 	vmov	s15, r1
 8011606:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801160a:	eddf 5a36 	vldr	s11, [pc, #216]	; 80116e4 <__ieee754_powf+0x3f0>
 801160e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8011612:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011616:	ee27 7a24 	vmul.f32	s14, s14, s9
 801161a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801161e:	eeb0 6a47 	vmov.f32	s12, s14
 8011622:	eea5 6a27 	vfma.f32	s12, s10, s15
 8011626:	ee16 1a10 	vmov	r1, s12
 801162a:	4011      	ands	r1, r2
 801162c:	ee06 1a90 	vmov	s13, r1
 8011630:	eee4 6a27 	vfma.f32	s13, s8, s15
 8011634:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80116e8 <__ieee754_powf+0x3f4>
 8011638:	ee37 7a66 	vsub.f32	s14, s14, s13
 801163c:	ee06 1a10 	vmov	s12, r1
 8011640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011644:	eddf 7a29 	vldr	s15, [pc, #164]	; 80116ec <__ieee754_powf+0x3f8>
 8011648:	4929      	ldr	r1, [pc, #164]	; (80116f0 <__ieee754_powf+0x3fc>)
 801164a:	eea6 7a27 	vfma.f32	s14, s12, s15
 801164e:	4439      	add	r1, r7
 8011650:	edd1 7a00 	vldr	s15, [r1]
 8011654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011658:	ee07 3a90 	vmov	s15, r3
 801165c:	eef0 0a47 	vmov.f32	s1, s14
 8011660:	4b24      	ldr	r3, [pc, #144]	; (80116f4 <__ieee754_powf+0x400>)
 8011662:	eee6 0a25 	vfma.f32	s1, s12, s11
 8011666:	443b      	add	r3, r7
 8011668:	ed93 5a00 	vldr	s10, [r3]
 801166c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011670:	ee70 0a85 	vadd.f32	s1, s1, s10
 8011674:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8011678:	ee17 3a90 	vmov	r3, s15
 801167c:	4013      	ands	r3, r2
 801167e:	ee07 3a90 	vmov	s15, r3
 8011682:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011686:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801168a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011692:	e70e      	b.n	80114b2 <__ieee754_powf+0x1be>
 8011694:	2401      	movs	r4, #1
 8011696:	e75c      	b.n	8011552 <__ieee754_powf+0x25e>
 8011698:	08015500 	.word	0x08015500
 801169c:	00000000 	.word	0x00000000
 80116a0:	3f7ffff7 	.word	0x3f7ffff7
 80116a4:	7149f2ca 	.word	0x7149f2ca
 80116a8:	3f800007 	.word	0x3f800007
 80116ac:	3eaaaaab 	.word	0x3eaaaaab
 80116b0:	36eca570 	.word	0x36eca570
 80116b4:	3fb8aa3b 	.word	0x3fb8aa3b
 80116b8:	3fb8aa00 	.word	0x3fb8aa00
 80116bc:	4b800000 	.word	0x4b800000
 80116c0:	001cc471 	.word	0x001cc471
 80116c4:	005db3d6 	.word	0x005db3d6
 80116c8:	08015534 	.word	0x08015534
 80116cc:	fffff000 	.word	0xfffff000
 80116d0:	3e6c3255 	.word	0x3e6c3255
 80116d4:	3e53f142 	.word	0x3e53f142
 80116d8:	3e8ba305 	.word	0x3e8ba305
 80116dc:	3edb6db7 	.word	0x3edb6db7
 80116e0:	3f19999a 	.word	0x3f19999a
 80116e4:	3f763800 	.word	0x3f763800
 80116e8:	3f76384f 	.word	0x3f76384f
 80116ec:	369dc3a0 	.word	0x369dc3a0
 80116f0:	08015544 	.word	0x08015544
 80116f4:	0801553c 	.word	0x0801553c
 80116f8:	3338aa3c 	.word	0x3338aa3c
 80116fc:	f040 8092 	bne.w	8011824 <__ieee754_powf+0x530>
 8011700:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80116f8 <__ieee754_powf+0x404>
 8011704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011708:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801170c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011714:	f73f aef6 	bgt.w	8011504 <__ieee754_powf+0x210>
 8011718:	15db      	asrs	r3, r3, #23
 801171a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801171e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011722:	4103      	asrs	r3, r0
 8011724:	4423      	add	r3, r4
 8011726:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801172a:	4947      	ldr	r1, [pc, #284]	; (8011848 <__ieee754_powf+0x554>)
 801172c:	3a7f      	subs	r2, #127	; 0x7f
 801172e:	4111      	asrs	r1, r2
 8011730:	ea23 0101 	bic.w	r1, r3, r1
 8011734:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8011738:	ee07 1a10 	vmov	s14, r1
 801173c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011740:	f1c2 0217 	rsb	r2, r2, #23
 8011744:	4110      	asrs	r0, r2
 8011746:	2c00      	cmp	r4, #0
 8011748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801174c:	bfb8      	it	lt
 801174e:	4240      	neglt	r0, r0
 8011750:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011754:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801184c <__ieee754_powf+0x558>
 8011758:	ee17 3a10 	vmov	r3, s14
 801175c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011760:	f023 030f 	bic.w	r3, r3, #15
 8011764:	ee07 3a10 	vmov	s14, r3
 8011768:	ee77 7a67 	vsub.f32	s15, s14, s15
 801176c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8011770:	eddf 7a37 	vldr	s15, [pc, #220]	; 8011850 <__ieee754_powf+0x55c>
 8011774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011778:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801177c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8011854 <__ieee754_powf+0x560>
 8011780:	eeb0 0a67 	vmov.f32	s0, s15
 8011784:	eea7 0a26 	vfma.f32	s0, s14, s13
 8011788:	eeb0 6a40 	vmov.f32	s12, s0
 801178c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011790:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011794:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011798:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8011858 <__ieee754_powf+0x564>
 801179c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801185c <__ieee754_powf+0x568>
 80117a0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80117a4:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8011860 <__ieee754_powf+0x56c>
 80117a8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80117ac:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8011864 <__ieee754_powf+0x570>
 80117b0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80117b4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8011868 <__ieee754_powf+0x574>
 80117b8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80117bc:	eeb0 6a40 	vmov.f32	s12, s0
 80117c0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80117c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80117c8:	eeb0 7a46 	vmov.f32	s14, s12
 80117cc:	ee77 6a66 	vsub.f32	s13, s14, s13
 80117d0:	ee20 6a06 	vmul.f32	s12, s0, s12
 80117d4:	eee0 7a27 	vfma.f32	s15, s0, s15
 80117d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80117dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80117e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80117e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80117ec:	ee10 3a10 	vmov	r3, s0
 80117f0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80117f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80117f8:	da1a      	bge.n	8011830 <__ieee754_powf+0x53c>
 80117fa:	f000 ff87 	bl	801270c <scalbnf>
 80117fe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011802:	e5c9      	b.n	8011398 <__ieee754_powf+0xa4>
 8011804:	4a19      	ldr	r2, [pc, #100]	; (801186c <__ieee754_powf+0x578>)
 8011806:	4293      	cmp	r3, r2
 8011808:	dd02      	ble.n	8011810 <__ieee754_powf+0x51c>
 801180a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011870 <__ieee754_powf+0x57c>
 801180e:	e67b      	b.n	8011508 <__ieee754_powf+0x214>
 8011810:	d108      	bne.n	8011824 <__ieee754_powf+0x530>
 8011812:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011816:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181e:	f6ff af7b 	blt.w	8011718 <__ieee754_powf+0x424>
 8011822:	e7f2      	b.n	801180a <__ieee754_powf+0x516>
 8011824:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8011828:	f73f af76 	bgt.w	8011718 <__ieee754_powf+0x424>
 801182c:	2000      	movs	r0, #0
 801182e:	e78f      	b.n	8011750 <__ieee754_powf+0x45c>
 8011830:	ee00 3a10 	vmov	s0, r3
 8011834:	e7e3      	b.n	80117fe <__ieee754_powf+0x50a>
 8011836:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801183a:	e5ad      	b.n	8011398 <__ieee754_powf+0xa4>
 801183c:	eeb0 0a68 	vmov.f32	s0, s17
 8011840:	e5aa      	b.n	8011398 <__ieee754_powf+0xa4>
 8011842:	eeb0 0a48 	vmov.f32	s0, s16
 8011846:	e5a7      	b.n	8011398 <__ieee754_powf+0xa4>
 8011848:	007fffff 	.word	0x007fffff
 801184c:	3f317218 	.word	0x3f317218
 8011850:	35bfbe8c 	.word	0x35bfbe8c
 8011854:	3f317200 	.word	0x3f317200
 8011858:	3331bb4c 	.word	0x3331bb4c
 801185c:	b5ddea0e 	.word	0xb5ddea0e
 8011860:	388ab355 	.word	0x388ab355
 8011864:	bb360b61 	.word	0xbb360b61
 8011868:	3e2aaaab 	.word	0x3e2aaaab
 801186c:	43160000 	.word	0x43160000
 8011870:	0da24260 	.word	0x0da24260

08011874 <__ieee754_rem_pio2f>:
 8011874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011876:	ee10 6a10 	vmov	r6, s0
 801187a:	4b86      	ldr	r3, [pc, #536]	; (8011a94 <__ieee754_rem_pio2f+0x220>)
 801187c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8011880:	429c      	cmp	r4, r3
 8011882:	b087      	sub	sp, #28
 8011884:	4605      	mov	r5, r0
 8011886:	dc05      	bgt.n	8011894 <__ieee754_rem_pio2f+0x20>
 8011888:	2300      	movs	r3, #0
 801188a:	ed85 0a00 	vstr	s0, [r5]
 801188e:	6043      	str	r3, [r0, #4]
 8011890:	2000      	movs	r0, #0
 8011892:	e020      	b.n	80118d6 <__ieee754_rem_pio2f+0x62>
 8011894:	4b80      	ldr	r3, [pc, #512]	; (8011a98 <__ieee754_rem_pio2f+0x224>)
 8011896:	429c      	cmp	r4, r3
 8011898:	dc38      	bgt.n	801190c <__ieee754_rem_pio2f+0x98>
 801189a:	2e00      	cmp	r6, #0
 801189c:	f024 040f 	bic.w	r4, r4, #15
 80118a0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8011a9c <__ieee754_rem_pio2f+0x228>
 80118a4:	4b7e      	ldr	r3, [pc, #504]	; (8011aa0 <__ieee754_rem_pio2f+0x22c>)
 80118a6:	dd18      	ble.n	80118da <__ieee754_rem_pio2f+0x66>
 80118a8:	429c      	cmp	r4, r3
 80118aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 80118ae:	bf09      	itett	eq
 80118b0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8011aa4 <__ieee754_rem_pio2f+0x230>
 80118b4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8011aa8 <__ieee754_rem_pio2f+0x234>
 80118b8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80118bc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8011aac <__ieee754_rem_pio2f+0x238>
 80118c0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80118c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80118c8:	edc0 6a00 	vstr	s13, [r0]
 80118cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80118d0:	edc0 7a01 	vstr	s15, [r0, #4]
 80118d4:	2001      	movs	r0, #1
 80118d6:	b007      	add	sp, #28
 80118d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118da:	429c      	cmp	r4, r3
 80118dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 80118e0:	bf09      	itett	eq
 80118e2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8011aa4 <__ieee754_rem_pio2f+0x230>
 80118e6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8011aa8 <__ieee754_rem_pio2f+0x234>
 80118ea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80118ee:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8011aac <__ieee754_rem_pio2f+0x238>
 80118f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80118f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80118fa:	edc0 6a00 	vstr	s13, [r0]
 80118fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011902:	edc0 7a01 	vstr	s15, [r0, #4]
 8011906:	f04f 30ff 	mov.w	r0, #4294967295
 801190a:	e7e4      	b.n	80118d6 <__ieee754_rem_pio2f+0x62>
 801190c:	4b68      	ldr	r3, [pc, #416]	; (8011ab0 <__ieee754_rem_pio2f+0x23c>)
 801190e:	429c      	cmp	r4, r3
 8011910:	dc71      	bgt.n	80119f6 <__ieee754_rem_pio2f+0x182>
 8011912:	f7fe f8a5 	bl	800fa60 <fabsf>
 8011916:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8011ab4 <__ieee754_rem_pio2f+0x240>
 801191a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801191e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011926:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801192a:	ee17 0a90 	vmov	r0, s15
 801192e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8011a9c <__ieee754_rem_pio2f+0x228>
 8011932:	eeb1 7a46 	vneg.f32	s14, s12
 8011936:	eea7 0a27 	vfma.f32	s0, s14, s15
 801193a:	281f      	cmp	r0, #31
 801193c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8011aa8 <__ieee754_rem_pio2f+0x234>
 8011940:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011944:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011948:	ee16 3a90 	vmov	r3, s13
 801194c:	dc1c      	bgt.n	8011988 <__ieee754_rem_pio2f+0x114>
 801194e:	1e47      	subs	r7, r0, #1
 8011950:	4959      	ldr	r1, [pc, #356]	; (8011ab8 <__ieee754_rem_pio2f+0x244>)
 8011952:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8011956:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801195a:	428a      	cmp	r2, r1
 801195c:	d014      	beq.n	8011988 <__ieee754_rem_pio2f+0x114>
 801195e:	602b      	str	r3, [r5, #0]
 8011960:	ed95 7a00 	vldr	s14, [r5]
 8011964:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011968:	2e00      	cmp	r6, #0
 801196a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801196e:	ed85 0a01 	vstr	s0, [r5, #4]
 8011972:	dab0      	bge.n	80118d6 <__ieee754_rem_pio2f+0x62>
 8011974:	eeb1 7a47 	vneg.f32	s14, s14
 8011978:	eeb1 0a40 	vneg.f32	s0, s0
 801197c:	ed85 7a00 	vstr	s14, [r5]
 8011980:	ed85 0a01 	vstr	s0, [r5, #4]
 8011984:	4240      	negs	r0, r0
 8011986:	e7a6      	b.n	80118d6 <__ieee754_rem_pio2f+0x62>
 8011988:	15e4      	asrs	r4, r4, #23
 801198a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801198e:	1aa2      	subs	r2, r4, r2
 8011990:	2a08      	cmp	r2, #8
 8011992:	dde4      	ble.n	801195e <__ieee754_rem_pio2f+0xea>
 8011994:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011aa4 <__ieee754_rem_pio2f+0x230>
 8011998:	eef0 6a40 	vmov.f32	s13, s0
 801199c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80119a0:	ee30 0a66 	vsub.f32	s0, s0, s13
 80119a4:	eea7 0a27 	vfma.f32	s0, s14, s15
 80119a8:	eddf 7a40 	vldr	s15, [pc, #256]	; 8011aac <__ieee754_rem_pio2f+0x238>
 80119ac:	ee96 0a27 	vfnms.f32	s0, s12, s15
 80119b0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80119b4:	eef0 7a40 	vmov.f32	s15, s0
 80119b8:	ee15 3a90 	vmov	r3, s11
 80119bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80119c0:	1aa4      	subs	r4, r4, r2
 80119c2:	2c19      	cmp	r4, #25
 80119c4:	dc04      	bgt.n	80119d0 <__ieee754_rem_pio2f+0x15c>
 80119c6:	edc5 5a00 	vstr	s11, [r5]
 80119ca:	eeb0 0a66 	vmov.f32	s0, s13
 80119ce:	e7c7      	b.n	8011960 <__ieee754_rem_pio2f+0xec>
 80119d0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8011abc <__ieee754_rem_pio2f+0x248>
 80119d4:	eeb0 0a66 	vmov.f32	s0, s13
 80119d8:	eea7 0a25 	vfma.f32	s0, s14, s11
 80119dc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80119e0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80119e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011ac0 <__ieee754_rem_pio2f+0x24c>
 80119e8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80119ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 80119f0:	ed85 7a00 	vstr	s14, [r5]
 80119f4:	e7b4      	b.n	8011960 <__ieee754_rem_pio2f+0xec>
 80119f6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80119fa:	db06      	blt.n	8011a0a <__ieee754_rem_pio2f+0x196>
 80119fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011a00:	edc0 7a01 	vstr	s15, [r0, #4]
 8011a04:	edc0 7a00 	vstr	s15, [r0]
 8011a08:	e742      	b.n	8011890 <__ieee754_rem_pio2f+0x1c>
 8011a0a:	15e2      	asrs	r2, r4, #23
 8011a0c:	3a86      	subs	r2, #134	; 0x86
 8011a0e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8011a12:	ee07 3a90 	vmov	s15, r3
 8011a16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011a1a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8011ac4 <__ieee754_rem_pio2f+0x250>
 8011a1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a26:	ed8d 7a03 	vstr	s14, [sp, #12]
 8011a2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011a32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011a36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a3a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8011a3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a4a:	edcd 7a05 	vstr	s15, [sp, #20]
 8011a4e:	d11e      	bne.n	8011a8e <__ieee754_rem_pio2f+0x21a>
 8011a50:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8011a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a58:	bf0c      	ite	eq
 8011a5a:	2301      	moveq	r3, #1
 8011a5c:	2302      	movne	r3, #2
 8011a5e:	491a      	ldr	r1, [pc, #104]	; (8011ac8 <__ieee754_rem_pio2f+0x254>)
 8011a60:	9101      	str	r1, [sp, #4]
 8011a62:	2102      	movs	r1, #2
 8011a64:	9100      	str	r1, [sp, #0]
 8011a66:	a803      	add	r0, sp, #12
 8011a68:	4629      	mov	r1, r5
 8011a6a:	f000 f8ff 	bl	8011c6c <__kernel_rem_pio2f>
 8011a6e:	2e00      	cmp	r6, #0
 8011a70:	f6bf af31 	bge.w	80118d6 <__ieee754_rem_pio2f+0x62>
 8011a74:	edd5 7a00 	vldr	s15, [r5]
 8011a78:	eef1 7a67 	vneg.f32	s15, s15
 8011a7c:	edc5 7a00 	vstr	s15, [r5]
 8011a80:	edd5 7a01 	vldr	s15, [r5, #4]
 8011a84:	eef1 7a67 	vneg.f32	s15, s15
 8011a88:	edc5 7a01 	vstr	s15, [r5, #4]
 8011a8c:	e77a      	b.n	8011984 <__ieee754_rem_pio2f+0x110>
 8011a8e:	2303      	movs	r3, #3
 8011a90:	e7e5      	b.n	8011a5e <__ieee754_rem_pio2f+0x1ea>
 8011a92:	bf00      	nop
 8011a94:	3f490fd8 	.word	0x3f490fd8
 8011a98:	4016cbe3 	.word	0x4016cbe3
 8011a9c:	3fc90f80 	.word	0x3fc90f80
 8011aa0:	3fc90fd0 	.word	0x3fc90fd0
 8011aa4:	37354400 	.word	0x37354400
 8011aa8:	37354443 	.word	0x37354443
 8011aac:	2e85a308 	.word	0x2e85a308
 8011ab0:	43490f80 	.word	0x43490f80
 8011ab4:	3f22f984 	.word	0x3f22f984
 8011ab8:	0801554c 	.word	0x0801554c
 8011abc:	2e85a300 	.word	0x2e85a300
 8011ac0:	248d3132 	.word	0x248d3132
 8011ac4:	43800000 	.word	0x43800000
 8011ac8:	080155cc 	.word	0x080155cc

08011acc <__ieee754_sinhf>:
 8011acc:	b510      	push	{r4, lr}
 8011ace:	ee10 3a10 	vmov	r3, s0
 8011ad2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8011ad6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011ada:	ed2d 8b02 	vpush	{d8}
 8011ade:	eef0 7a40 	vmov.f32	s15, s0
 8011ae2:	db06      	blt.n	8011af2 <__ieee754_sinhf+0x26>
 8011ae4:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011ae8:	ecbd 8b02 	vpop	{d8}
 8011aec:	eeb0 0a67 	vmov.f32	s0, s15
 8011af0:	bd10      	pop	{r4, pc}
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	4b28      	ldr	r3, [pc, #160]	; (8011b98 <__ieee754_sinhf+0xcc>)
 8011af6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8011afa:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8011afe:	bfa8      	it	ge
 8011b00:	eeb0 8a68 	vmovge.f32	s16, s17
 8011b04:	429c      	cmp	r4, r3
 8011b06:	dc2a      	bgt.n	8011b5e <__ieee754_sinhf+0x92>
 8011b08:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 8011b0c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011b10:	da08      	bge.n	8011b24 <__ieee754_sinhf+0x58>
 8011b12:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8011b9c <__ieee754_sinhf+0xd0>
 8011b16:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011b1a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8011b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b22:	dce1      	bgt.n	8011ae8 <__ieee754_sinhf+0x1c>
 8011b24:	eeb0 0a67 	vmov.f32	s0, s15
 8011b28:	f7fd ff9a 	bl	800fa60 <fabsf>
 8011b2c:	f000 fc58 	bl	80123e0 <expm1f>
 8011b30:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8011b34:	bfbb      	ittet	lt
 8011b36:	ee20 7a00 	vmullt.f32	s14, s0, s0
 8011b3a:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 8011b3e:	ee70 8a28 	vaddge.f32	s17, s0, s17
 8011b42:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 8011b46:	bfad      	iteet	ge
 8011b48:	eec0 7a28 	vdivge.f32	s15, s0, s17
 8011b4c:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 8011b50:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 8011b54:	ee77 7a80 	vaddge.f32	s15, s15, s0
 8011b58:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011b5c:	e7c4      	b.n	8011ae8 <__ieee754_sinhf+0x1c>
 8011b5e:	4b10      	ldr	r3, [pc, #64]	; (8011ba0 <__ieee754_sinhf+0xd4>)
 8011b60:	429c      	cmp	r4, r3
 8011b62:	dc06      	bgt.n	8011b72 <__ieee754_sinhf+0xa6>
 8011b64:	f7fd ff7c 	bl	800fa60 <fabsf>
 8011b68:	f7ff f97a 	bl	8010e60 <__ieee754_expf>
 8011b6c:	ee60 7a08 	vmul.f32	s15, s0, s16
 8011b70:	e7ba      	b.n	8011ae8 <__ieee754_sinhf+0x1c>
 8011b72:	4b0c      	ldr	r3, [pc, #48]	; (8011ba4 <__ieee754_sinhf+0xd8>)
 8011b74:	429c      	cmp	r4, r3
 8011b76:	dc0a      	bgt.n	8011b8e <__ieee754_sinhf+0xc2>
 8011b78:	f7fd ff72 	bl	800fa60 <fabsf>
 8011b7c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8011b80:	f7ff f96e 	bl	8010e60 <__ieee754_expf>
 8011b84:	ee68 7a00 	vmul.f32	s15, s16, s0
 8011b88:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011b8c:	e7ac      	b.n	8011ae8 <__ieee754_sinhf+0x1c>
 8011b8e:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8011b9c <__ieee754_sinhf+0xd0>
 8011b92:	ee60 7a07 	vmul.f32	s15, s0, s14
 8011b96:	e7a7      	b.n	8011ae8 <__ieee754_sinhf+0x1c>
 8011b98:	41afffff 	.word	0x41afffff
 8011b9c:	7cf0bdc2 	.word	0x7cf0bdc2
 8011ba0:	42b17217 	.word	0x42b17217
 8011ba4:	42b2d4fc 	.word	0x42b2d4fc

08011ba8 <__ieee754_sqrtf>:
 8011ba8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011bac:	4770      	bx	lr
	...

08011bb0 <__kernel_cosf>:
 8011bb0:	ee10 3a10 	vmov	r3, s0
 8011bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011bb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011bc0:	da05      	bge.n	8011bce <__kernel_cosf+0x1e>
 8011bc2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011bc6:	ee17 2a90 	vmov	r2, s15
 8011bca:	2a00      	cmp	r2, #0
 8011bcc:	d03b      	beq.n	8011c46 <__kernel_cosf+0x96>
 8011bce:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011bd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011bd6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8011c4c <__kernel_cosf+0x9c>
 8011bda:	4a1d      	ldr	r2, [pc, #116]	; (8011c50 <__kernel_cosf+0xa0>)
 8011bdc:	ee66 7a07 	vmul.f32	s15, s12, s14
 8011be0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8011c54 <__kernel_cosf+0xa4>
 8011be4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8011be8:	4293      	cmp	r3, r2
 8011bea:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8011c58 <__kernel_cosf+0xa8>
 8011bee:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011bf2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8011c5c <__kernel_cosf+0xac>
 8011bf6:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011bfa:	eddf 5a19 	vldr	s11, [pc, #100]	; 8011c60 <__kernel_cosf+0xb0>
 8011bfe:	eee7 5a06 	vfma.f32	s11, s14, s12
 8011c02:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8011c64 <__kernel_cosf+0xb4>
 8011c06:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011c0a:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8011c0e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011c12:	eee6 0a07 	vfma.f32	s1, s12, s14
 8011c16:	dc04      	bgt.n	8011c22 <__kernel_cosf+0x72>
 8011c18:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8011c1c:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8011c20:	4770      	bx	lr
 8011c22:	4a11      	ldr	r2, [pc, #68]	; (8011c68 <__kernel_cosf+0xb8>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	bfda      	itte	le
 8011c28:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8011c2c:	ee07 3a10 	vmovle	s14, r3
 8011c30:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8011c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c38:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8011c3c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011c40:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011c44:	4770      	bx	lr
 8011c46:	eeb0 0a66 	vmov.f32	s0, s13
 8011c4a:	4770      	bx	lr
 8011c4c:	ad47d74e 	.word	0xad47d74e
 8011c50:	3e999999 	.word	0x3e999999
 8011c54:	310f74f6 	.word	0x310f74f6
 8011c58:	b493f27c 	.word	0xb493f27c
 8011c5c:	37d00d01 	.word	0x37d00d01
 8011c60:	bab60b61 	.word	0xbab60b61
 8011c64:	3d2aaaab 	.word	0x3d2aaaab
 8011c68:	3f480000 	.word	0x3f480000

08011c6c <__kernel_rem_pio2f>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	ed2d 8b04 	vpush	{d8-d9}
 8011c74:	b0d7      	sub	sp, #348	; 0x15c
 8011c76:	469b      	mov	fp, r3
 8011c78:	460e      	mov	r6, r1
 8011c7a:	4bbe      	ldr	r3, [pc, #760]	; (8011f74 <__kernel_rem_pio2f+0x308>)
 8011c7c:	9964      	ldr	r1, [sp, #400]	; 0x190
 8011c7e:	9002      	str	r0, [sp, #8]
 8011c80:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8011c84:	9865      	ldr	r0, [sp, #404]	; 0x194
 8011c86:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8011f84 <__kernel_rem_pio2f+0x318>
 8011c8a:	1ed1      	subs	r1, r2, #3
 8011c8c:	2308      	movs	r3, #8
 8011c8e:	fb91 f1f3 	sdiv	r1, r1, r3
 8011c92:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8011c96:	f10b 3aff 	add.w	sl, fp, #4294967295
 8011c9a:	1c4c      	adds	r4, r1, #1
 8011c9c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8011ca0:	eba1 050a 	sub.w	r5, r1, sl
 8011ca4:	aa1a      	add	r2, sp, #104	; 0x68
 8011ca6:	eb09 070a 	add.w	r7, r9, sl
 8011caa:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8011cae:	4696      	mov	lr, r2
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	42bb      	cmp	r3, r7
 8011cb4:	dd0f      	ble.n	8011cd6 <__kernel_rem_pio2f+0x6a>
 8011cb6:	af42      	add	r7, sp, #264	; 0x108
 8011cb8:	2200      	movs	r2, #0
 8011cba:	454a      	cmp	r2, r9
 8011cbc:	dc27      	bgt.n	8011d0e <__kernel_rem_pio2f+0xa2>
 8011cbe:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8011cc2:	eb0b 0302 	add.w	r3, fp, r2
 8011cc6:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8011cca:	9d02      	ldr	r5, [sp, #8]
 8011ccc:	eddf 7aad 	vldr	s15, [pc, #692]	; 8011f84 <__kernel_rem_pio2f+0x318>
 8011cd0:	f04f 0c00 	mov.w	ip, #0
 8011cd4:	e015      	b.n	8011d02 <__kernel_rem_pio2f+0x96>
 8011cd6:	42dd      	cmn	r5, r3
 8011cd8:	bf5d      	ittte	pl
 8011cda:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8011cde:	ee07 2a90 	vmovpl	s15, r2
 8011ce2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011ce6:	eef0 7a47 	vmovmi.f32	s15, s14
 8011cea:	ecee 7a01 	vstmia	lr!, {s15}
 8011cee:	3301      	adds	r3, #1
 8011cf0:	e7df      	b.n	8011cb2 <__kernel_rem_pio2f+0x46>
 8011cf2:	ecf5 6a01 	vldmia	r5!, {s13}
 8011cf6:	ed33 7a01 	vldmdb	r3!, {s14}
 8011cfa:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011cfe:	f10c 0c01 	add.w	ip, ip, #1
 8011d02:	45d4      	cmp	ip, sl
 8011d04:	ddf5      	ble.n	8011cf2 <__kernel_rem_pio2f+0x86>
 8011d06:	ece7 7a01 	vstmia	r7!, {s15}
 8011d0a:	3201      	adds	r2, #1
 8011d0c:	e7d5      	b.n	8011cba <__kernel_rem_pio2f+0x4e>
 8011d0e:	ab06      	add	r3, sp, #24
 8011d10:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011d14:	9304      	str	r3, [sp, #16]
 8011d16:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8011f80 <__kernel_rem_pio2f+0x314>
 8011d1a:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8011f7c <__kernel_rem_pio2f+0x310>
 8011d1e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8011d22:	9303      	str	r3, [sp, #12]
 8011d24:	464d      	mov	r5, r9
 8011d26:	ab56      	add	r3, sp, #344	; 0x158
 8011d28:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8011d2c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8011d30:	3f01      	subs	r7, #1
 8011d32:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8011d36:	00bf      	lsls	r7, r7, #2
 8011d38:	ab56      	add	r3, sp, #344	; 0x158
 8011d3a:	19da      	adds	r2, r3, r7
 8011d3c:	3a4c      	subs	r2, #76	; 0x4c
 8011d3e:	2300      	movs	r3, #0
 8011d40:	1ae9      	subs	r1, r5, r3
 8011d42:	2900      	cmp	r1, #0
 8011d44:	dc4c      	bgt.n	8011de0 <__kernel_rem_pio2f+0x174>
 8011d46:	4620      	mov	r0, r4
 8011d48:	f000 fce0 	bl	801270c <scalbnf>
 8011d4c:	eeb0 8a40 	vmov.f32	s16, s0
 8011d50:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8011d54:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011d58:	f7fd fe8a 	bl	800fa70 <floorf>
 8011d5c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8011d60:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011d64:	2c00      	cmp	r4, #0
 8011d66:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011d6a:	edcd 7a01 	vstr	s15, [sp, #4]
 8011d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d72:	ee38 8a67 	vsub.f32	s16, s16, s15
 8011d76:	dd48      	ble.n	8011e0a <__kernel_rem_pio2f+0x19e>
 8011d78:	1e69      	subs	r1, r5, #1
 8011d7a:	ab06      	add	r3, sp, #24
 8011d7c:	f1c4 0008 	rsb	r0, r4, #8
 8011d80:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8011d84:	9a01      	ldr	r2, [sp, #4]
 8011d86:	fa4c f300 	asr.w	r3, ip, r0
 8011d8a:	441a      	add	r2, r3
 8011d8c:	4083      	lsls	r3, r0
 8011d8e:	9201      	str	r2, [sp, #4]
 8011d90:	ebac 0203 	sub.w	r2, ip, r3
 8011d94:	ab06      	add	r3, sp, #24
 8011d96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8011d9a:	f1c4 0307 	rsb	r3, r4, #7
 8011d9e:	fa42 f803 	asr.w	r8, r2, r3
 8011da2:	f1b8 0f00 	cmp.w	r8, #0
 8011da6:	dd41      	ble.n	8011e2c <__kernel_rem_pio2f+0x1c0>
 8011da8:	9b01      	ldr	r3, [sp, #4]
 8011daa:	2000      	movs	r0, #0
 8011dac:	3301      	adds	r3, #1
 8011dae:	9301      	str	r3, [sp, #4]
 8011db0:	4601      	mov	r1, r0
 8011db2:	4285      	cmp	r5, r0
 8011db4:	dc6d      	bgt.n	8011e92 <__kernel_rem_pio2f+0x226>
 8011db6:	2c00      	cmp	r4, #0
 8011db8:	dd04      	ble.n	8011dc4 <__kernel_rem_pio2f+0x158>
 8011dba:	2c01      	cmp	r4, #1
 8011dbc:	d07e      	beq.n	8011ebc <__kernel_rem_pio2f+0x250>
 8011dbe:	2c02      	cmp	r4, #2
 8011dc0:	f000 8086 	beq.w	8011ed0 <__kernel_rem_pio2f+0x264>
 8011dc4:	f1b8 0f02 	cmp.w	r8, #2
 8011dc8:	d130      	bne.n	8011e2c <__kernel_rem_pio2f+0x1c0>
 8011dca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011dce:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011dd2:	b359      	cbz	r1, 8011e2c <__kernel_rem_pio2f+0x1c0>
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f000 fc99 	bl	801270c <scalbnf>
 8011dda:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011dde:	e025      	b.n	8011e2c <__kernel_rem_pio2f+0x1c0>
 8011de0:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011de4:	a806      	add	r0, sp, #24
 8011de6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011df2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011df6:	ee10 1a10 	vmov	r1, s0
 8011dfa:	ed32 0a01 	vldmdb	r2!, {s0}
 8011dfe:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8011e02:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011e06:	3301      	adds	r3, #1
 8011e08:	e79a      	b.n	8011d40 <__kernel_rem_pio2f+0xd4>
 8011e0a:	d106      	bne.n	8011e1a <__kernel_rem_pio2f+0x1ae>
 8011e0c:	1e6b      	subs	r3, r5, #1
 8011e0e:	aa06      	add	r2, sp, #24
 8011e10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011e14:	ea4f 2822 	mov.w	r8, r2, asr #8
 8011e18:	e7c3      	b.n	8011da2 <__kernel_rem_pio2f+0x136>
 8011e1a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011e1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e26:	da31      	bge.n	8011e8c <__kernel_rem_pio2f+0x220>
 8011e28:	f04f 0800 	mov.w	r8, #0
 8011e2c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e34:	f040 80a8 	bne.w	8011f88 <__kernel_rem_pio2f+0x31c>
 8011e38:	1e6b      	subs	r3, r5, #1
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	4548      	cmp	r0, r9
 8011e40:	da4d      	bge.n	8011ede <__kernel_rem_pio2f+0x272>
 8011e42:	2a00      	cmp	r2, #0
 8011e44:	f000 8087 	beq.w	8011f56 <__kernel_rem_pio2f+0x2ea>
 8011e48:	aa06      	add	r2, sp, #24
 8011e4a:	3c08      	subs	r4, #8
 8011e4c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011e50:	2900      	cmp	r1, #0
 8011e52:	f000 808d 	beq.w	8011f70 <__kernel_rem_pio2f+0x304>
 8011e56:	4620      	mov	r0, r4
 8011e58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011e5c:	9302      	str	r3, [sp, #8]
 8011e5e:	f000 fc55 	bl	801270c <scalbnf>
 8011e62:	9b02      	ldr	r3, [sp, #8]
 8011e64:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8011f80 <__kernel_rem_pio2f+0x314>
 8011e68:	0099      	lsls	r1, r3, #2
 8011e6a:	aa42      	add	r2, sp, #264	; 0x108
 8011e6c:	1850      	adds	r0, r2, r1
 8011e6e:	1d05      	adds	r5, r0, #4
 8011e70:	461c      	mov	r4, r3
 8011e72:	2c00      	cmp	r4, #0
 8011e74:	f280 80b8 	bge.w	8011fe8 <__kernel_rem_pio2f+0x37c>
 8011e78:	2500      	movs	r5, #0
 8011e7a:	1b5c      	subs	r4, r3, r5
 8011e7c:	2c00      	cmp	r4, #0
 8011e7e:	f2c0 80d8 	blt.w	8012032 <__kernel_rem_pio2f+0x3c6>
 8011e82:	4f3d      	ldr	r7, [pc, #244]	; (8011f78 <__kernel_rem_pio2f+0x30c>)
 8011e84:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8011f84 <__kernel_rem_pio2f+0x318>
 8011e88:	2400      	movs	r4, #0
 8011e8a:	e0c6      	b.n	801201a <__kernel_rem_pio2f+0x3ae>
 8011e8c:	f04f 0802 	mov.w	r8, #2
 8011e90:	e78a      	b.n	8011da8 <__kernel_rem_pio2f+0x13c>
 8011e92:	ab06      	add	r3, sp, #24
 8011e94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011e98:	b949      	cbnz	r1, 8011eae <__kernel_rem_pio2f+0x242>
 8011e9a:	b12b      	cbz	r3, 8011ea8 <__kernel_rem_pio2f+0x23c>
 8011e9c:	aa06      	add	r2, sp, #24
 8011e9e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8011ea2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	4619      	mov	r1, r3
 8011eac:	e781      	b.n	8011db2 <__kernel_rem_pio2f+0x146>
 8011eae:	aa06      	add	r2, sp, #24
 8011eb0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8011eb4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	e7f5      	b.n	8011ea8 <__kernel_rem_pio2f+0x23c>
 8011ebc:	1e68      	subs	r0, r5, #1
 8011ebe:	ab06      	add	r3, sp, #24
 8011ec0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ec8:	aa06      	add	r2, sp, #24
 8011eca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8011ece:	e779      	b.n	8011dc4 <__kernel_rem_pio2f+0x158>
 8011ed0:	1e68      	subs	r0, r5, #1
 8011ed2:	ab06      	add	r3, sp, #24
 8011ed4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011edc:	e7f4      	b.n	8011ec8 <__kernel_rem_pio2f+0x25c>
 8011ede:	a906      	add	r1, sp, #24
 8011ee0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011ee4:	3801      	subs	r0, #1
 8011ee6:	430a      	orrs	r2, r1
 8011ee8:	e7a9      	b.n	8011e3e <__kernel_rem_pio2f+0x1d2>
 8011eea:	f10c 0c01 	add.w	ip, ip, #1
 8011eee:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011ef2:	2a00      	cmp	r2, #0
 8011ef4:	d0f9      	beq.n	8011eea <__kernel_rem_pio2f+0x27e>
 8011ef6:	eb0b 0305 	add.w	r3, fp, r5
 8011efa:	aa1a      	add	r2, sp, #104	; 0x68
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	1898      	adds	r0, r3, r2
 8011f00:	3004      	adds	r0, #4
 8011f02:	1c69      	adds	r1, r5, #1
 8011f04:	3704      	adds	r7, #4
 8011f06:	2200      	movs	r2, #0
 8011f08:	4465      	add	r5, ip
 8011f0a:	9005      	str	r0, [sp, #20]
 8011f0c:	428d      	cmp	r5, r1
 8011f0e:	f6ff af0a 	blt.w	8011d26 <__kernel_rem_pio2f+0xba>
 8011f12:	a81a      	add	r0, sp, #104	; 0x68
 8011f14:	eb02 0c03 	add.w	ip, r2, r3
 8011f18:	4484      	add	ip, r0
 8011f1a:	9803      	ldr	r0, [sp, #12]
 8011f1c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011f20:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8011f24:	9001      	str	r0, [sp, #4]
 8011f26:	ee07 0a90 	vmov	s15, r0
 8011f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f2e:	9805      	ldr	r0, [sp, #20]
 8011f30:	edcc 7a00 	vstr	s15, [ip]
 8011f34:	eddf 7a13 	vldr	s15, [pc, #76]	; 8011f84 <__kernel_rem_pio2f+0x318>
 8011f38:	eb00 0802 	add.w	r8, r0, r2
 8011f3c:	f04f 0c00 	mov.w	ip, #0
 8011f40:	45d4      	cmp	ip, sl
 8011f42:	dd0c      	ble.n	8011f5e <__kernel_rem_pio2f+0x2f2>
 8011f44:	eb02 0c07 	add.w	ip, r2, r7
 8011f48:	a842      	add	r0, sp, #264	; 0x108
 8011f4a:	4484      	add	ip, r0
 8011f4c:	edcc 7a01 	vstr	s15, [ip, #4]
 8011f50:	3101      	adds	r1, #1
 8011f52:	3204      	adds	r2, #4
 8011f54:	e7da      	b.n	8011f0c <__kernel_rem_pio2f+0x2a0>
 8011f56:	9b04      	ldr	r3, [sp, #16]
 8011f58:	f04f 0c01 	mov.w	ip, #1
 8011f5c:	e7c7      	b.n	8011eee <__kernel_rem_pio2f+0x282>
 8011f5e:	ecfe 6a01 	vldmia	lr!, {s13}
 8011f62:	ed38 7a01 	vldmdb	r8!, {s14}
 8011f66:	f10c 0c01 	add.w	ip, ip, #1
 8011f6a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011f6e:	e7e7      	b.n	8011f40 <__kernel_rem_pio2f+0x2d4>
 8011f70:	3b01      	subs	r3, #1
 8011f72:	e769      	b.n	8011e48 <__kernel_rem_pio2f+0x1dc>
 8011f74:	08015910 	.word	0x08015910
 8011f78:	080158e4 	.word	0x080158e4
 8011f7c:	43800000 	.word	0x43800000
 8011f80:	3b800000 	.word	0x3b800000
 8011f84:	00000000 	.word	0x00000000
 8011f88:	4260      	negs	r0, r4
 8011f8a:	eeb0 0a48 	vmov.f32	s0, s16
 8011f8e:	f000 fbbd 	bl	801270c <scalbnf>
 8011f92:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8011f7c <__kernel_rem_pio2f+0x310>
 8011f96:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f9e:	db1a      	blt.n	8011fd6 <__kernel_rem_pio2f+0x36a>
 8011fa0:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8011f80 <__kernel_rem_pio2f+0x314>
 8011fa4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011fa8:	aa06      	add	r2, sp, #24
 8011faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fae:	a906      	add	r1, sp, #24
 8011fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fb4:	3408      	adds	r4, #8
 8011fb6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011fbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011fc2:	ee10 3a10 	vmov	r3, s0
 8011fc6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011fca:	1c6b      	adds	r3, r5, #1
 8011fcc:	ee17 2a90 	vmov	r2, s15
 8011fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011fd4:	e73f      	b.n	8011e56 <__kernel_rem_pio2f+0x1ea>
 8011fd6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011fda:	aa06      	add	r2, sp, #24
 8011fdc:	ee10 3a10 	vmov	r3, s0
 8011fe0:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011fe4:	462b      	mov	r3, r5
 8011fe6:	e736      	b.n	8011e56 <__kernel_rem_pio2f+0x1ea>
 8011fe8:	aa06      	add	r2, sp, #24
 8011fea:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8011fee:	9202      	str	r2, [sp, #8]
 8011ff0:	ee07 2a90 	vmov	s15, r2
 8011ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ff8:	3c01      	subs	r4, #1
 8011ffa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011ffe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012002:	ed65 7a01 	vstmdb	r5!, {s15}
 8012006:	e734      	b.n	8011e72 <__kernel_rem_pio2f+0x206>
 8012008:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 801200c:	ecf7 6a01 	vldmia	r7!, {s13}
 8012010:	ed9c 7a00 	vldr	s14, [ip]
 8012014:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012018:	3401      	adds	r4, #1
 801201a:	454c      	cmp	r4, r9
 801201c:	dc01      	bgt.n	8012022 <__kernel_rem_pio2f+0x3b6>
 801201e:	42a5      	cmp	r5, r4
 8012020:	daf2      	bge.n	8012008 <__kernel_rem_pio2f+0x39c>
 8012022:	aa56      	add	r2, sp, #344	; 0x158
 8012024:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8012028:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 801202c:	3501      	adds	r5, #1
 801202e:	3804      	subs	r0, #4
 8012030:	e723      	b.n	8011e7a <__kernel_rem_pio2f+0x20e>
 8012032:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012034:	2a03      	cmp	r2, #3
 8012036:	d84d      	bhi.n	80120d4 <__kernel_rem_pio2f+0x468>
 8012038:	e8df f002 	tbb	[pc, r2]
 801203c:	021f1f3e 	.word	0x021f1f3e
 8012040:	aa56      	add	r2, sp, #344	; 0x158
 8012042:	4411      	add	r1, r2
 8012044:	399c      	subs	r1, #156	; 0x9c
 8012046:	4608      	mov	r0, r1
 8012048:	461c      	mov	r4, r3
 801204a:	2c00      	cmp	r4, #0
 801204c:	dc5f      	bgt.n	801210e <__kernel_rem_pio2f+0x4a2>
 801204e:	4608      	mov	r0, r1
 8012050:	461c      	mov	r4, r3
 8012052:	2c01      	cmp	r4, #1
 8012054:	dc6b      	bgt.n	801212e <__kernel_rem_pio2f+0x4c2>
 8012056:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8011f84 <__kernel_rem_pio2f+0x318>
 801205a:	2b01      	cmp	r3, #1
 801205c:	dc77      	bgt.n	801214e <__kernel_rem_pio2f+0x4e2>
 801205e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8012062:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8012066:	f1b8 0f00 	cmp.w	r8, #0
 801206a:	d176      	bne.n	801215a <__kernel_rem_pio2f+0x4ee>
 801206c:	edc6 6a00 	vstr	s13, [r6]
 8012070:	ed86 7a01 	vstr	s14, [r6, #4]
 8012074:	edc6 7a02 	vstr	s15, [r6, #8]
 8012078:	e02c      	b.n	80120d4 <__kernel_rem_pio2f+0x468>
 801207a:	aa56      	add	r2, sp, #344	; 0x158
 801207c:	4411      	add	r1, r2
 801207e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8011f84 <__kernel_rem_pio2f+0x318>
 8012082:	399c      	subs	r1, #156	; 0x9c
 8012084:	4618      	mov	r0, r3
 8012086:	2800      	cmp	r0, #0
 8012088:	da32      	bge.n	80120f0 <__kernel_rem_pio2f+0x484>
 801208a:	f1b8 0f00 	cmp.w	r8, #0
 801208e:	d035      	beq.n	80120fc <__kernel_rem_pio2f+0x490>
 8012090:	eef1 7a47 	vneg.f32	s15, s14
 8012094:	edc6 7a00 	vstr	s15, [r6]
 8012098:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801209c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80120a0:	a82f      	add	r0, sp, #188	; 0xbc
 80120a2:	2101      	movs	r1, #1
 80120a4:	428b      	cmp	r3, r1
 80120a6:	da2c      	bge.n	8012102 <__kernel_rem_pio2f+0x496>
 80120a8:	f1b8 0f00 	cmp.w	r8, #0
 80120ac:	d001      	beq.n	80120b2 <__kernel_rem_pio2f+0x446>
 80120ae:	eef1 7a67 	vneg.f32	s15, s15
 80120b2:	edc6 7a01 	vstr	s15, [r6, #4]
 80120b6:	e00d      	b.n	80120d4 <__kernel_rem_pio2f+0x468>
 80120b8:	aa56      	add	r2, sp, #344	; 0x158
 80120ba:	4411      	add	r1, r2
 80120bc:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8011f84 <__kernel_rem_pio2f+0x318>
 80120c0:	399c      	subs	r1, #156	; 0x9c
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	da0e      	bge.n	80120e4 <__kernel_rem_pio2f+0x478>
 80120c6:	f1b8 0f00 	cmp.w	r8, #0
 80120ca:	d001      	beq.n	80120d0 <__kernel_rem_pio2f+0x464>
 80120cc:	eef1 7a67 	vneg.f32	s15, s15
 80120d0:	edc6 7a00 	vstr	s15, [r6]
 80120d4:	9b01      	ldr	r3, [sp, #4]
 80120d6:	f003 0007 	and.w	r0, r3, #7
 80120da:	b057      	add	sp, #348	; 0x15c
 80120dc:	ecbd 8b04 	vpop	{d8-d9}
 80120e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e4:	ed31 7a01 	vldmdb	r1!, {s14}
 80120e8:	3b01      	subs	r3, #1
 80120ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80120ee:	e7e8      	b.n	80120c2 <__kernel_rem_pio2f+0x456>
 80120f0:	ed71 7a01 	vldmdb	r1!, {s15}
 80120f4:	3801      	subs	r0, #1
 80120f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80120fa:	e7c4      	b.n	8012086 <__kernel_rem_pio2f+0x41a>
 80120fc:	eef0 7a47 	vmov.f32	s15, s14
 8012100:	e7c8      	b.n	8012094 <__kernel_rem_pio2f+0x428>
 8012102:	ecb0 7a01 	vldmia	r0!, {s14}
 8012106:	3101      	adds	r1, #1
 8012108:	ee77 7a87 	vadd.f32	s15, s15, s14
 801210c:	e7ca      	b.n	80120a4 <__kernel_rem_pio2f+0x438>
 801210e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8012112:	ed70 6a01 	vldmdb	r0!, {s13}
 8012116:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801211a:	3c01      	subs	r4, #1
 801211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012120:	ed00 7a01 	vstr	s14, [r0, #-4]
 8012124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012128:	edc0 7a00 	vstr	s15, [r0]
 801212c:	e78d      	b.n	801204a <__kernel_rem_pio2f+0x3de>
 801212e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8012132:	ed70 6a01 	vldmdb	r0!, {s13}
 8012136:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801213a:	3c01      	subs	r4, #1
 801213c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012140:	ed00 7a01 	vstr	s14, [r0, #-4]
 8012144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012148:	edc0 7a00 	vstr	s15, [r0]
 801214c:	e781      	b.n	8012052 <__kernel_rem_pio2f+0x3e6>
 801214e:	ed31 7a01 	vldmdb	r1!, {s14}
 8012152:	3b01      	subs	r3, #1
 8012154:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012158:	e77f      	b.n	801205a <__kernel_rem_pio2f+0x3ee>
 801215a:	eef1 6a66 	vneg.f32	s13, s13
 801215e:	eeb1 7a47 	vneg.f32	s14, s14
 8012162:	edc6 6a00 	vstr	s13, [r6]
 8012166:	ed86 7a01 	vstr	s14, [r6, #4]
 801216a:	eef1 7a67 	vneg.f32	s15, s15
 801216e:	e781      	b.n	8012074 <__kernel_rem_pio2f+0x408>

08012170 <__kernel_sinf>:
 8012170:	ee10 3a10 	vmov	r3, s0
 8012174:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012178:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801217c:	da04      	bge.n	8012188 <__kernel_sinf+0x18>
 801217e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012182:	ee17 3a90 	vmov	r3, s15
 8012186:	b35b      	cbz	r3, 80121e0 <__kernel_sinf+0x70>
 8012188:	ee20 7a00 	vmul.f32	s14, s0, s0
 801218c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80121e4 <__kernel_sinf+0x74>
 8012190:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80121e8 <__kernel_sinf+0x78>
 8012194:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012198:	eddf 7a14 	vldr	s15, [pc, #80]	; 80121ec <__kernel_sinf+0x7c>
 801219c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80121a0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80121f0 <__kernel_sinf+0x80>
 80121a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80121a8:	eddf 7a12 	vldr	s15, [pc, #72]	; 80121f4 <__kernel_sinf+0x84>
 80121ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 80121b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80121b4:	b930      	cbnz	r0, 80121c4 <__kernel_sinf+0x54>
 80121b6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80121f8 <__kernel_sinf+0x88>
 80121ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80121be:	eea6 0a26 	vfma.f32	s0, s12, s13
 80121c2:	4770      	bx	lr
 80121c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80121c8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80121cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80121d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80121d4:	eddf 7a09 	vldr	s15, [pc, #36]	; 80121fc <__kernel_sinf+0x8c>
 80121d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80121dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80121e8:	b2d72f34 	.word	0xb2d72f34
 80121ec:	3638ef1b 	.word	0x3638ef1b
 80121f0:	b9500d01 	.word	0xb9500d01
 80121f4:	3c088889 	.word	0x3c088889
 80121f8:	be2aaaab 	.word	0xbe2aaaab
 80121fc:	3e2aaaab 	.word	0x3e2aaaab

08012200 <__kernel_tanf>:
 8012200:	b508      	push	{r3, lr}
 8012202:	ee10 3a10 	vmov	r3, s0
 8012206:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801220a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801220e:	eef0 7a40 	vmov.f32	s15, s0
 8012212:	da17      	bge.n	8012244 <__kernel_tanf+0x44>
 8012214:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8012218:	ee17 1a10 	vmov	r1, s14
 801221c:	bb41      	cbnz	r1, 8012270 <__kernel_tanf+0x70>
 801221e:	1c43      	adds	r3, r0, #1
 8012220:	4313      	orrs	r3, r2
 8012222:	d108      	bne.n	8012236 <__kernel_tanf+0x36>
 8012224:	f7fd fc1c 	bl	800fa60 <fabsf>
 8012228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801222c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012230:	eeb0 0a67 	vmov.f32	s0, s15
 8012234:	bd08      	pop	{r3, pc}
 8012236:	2801      	cmp	r0, #1
 8012238:	d0fa      	beq.n	8012230 <__kernel_tanf+0x30>
 801223a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801223e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012242:	e7f5      	b.n	8012230 <__kernel_tanf+0x30>
 8012244:	494e      	ldr	r1, [pc, #312]	; (8012380 <__kernel_tanf+0x180>)
 8012246:	428a      	cmp	r2, r1
 8012248:	dd12      	ble.n	8012270 <__kernel_tanf+0x70>
 801224a:	2b00      	cmp	r3, #0
 801224c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8012384 <__kernel_tanf+0x184>
 8012250:	bfb8      	it	lt
 8012252:	eef1 7a40 	vneglt.f32	s15, s0
 8012256:	ee77 7a67 	vsub.f32	s15, s14, s15
 801225a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8012388 <__kernel_tanf+0x188>
 801225e:	bfb8      	it	lt
 8012260:	eef1 0a60 	vneglt.f32	s1, s1
 8012264:	ee77 0a60 	vsub.f32	s1, s14, s1
 8012268:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801226c:	eddf 0a47 	vldr	s1, [pc, #284]	; 801238c <__kernel_tanf+0x18c>
 8012270:	ed9f 6a47 	vldr	s12, [pc, #284]	; 8012390 <__kernel_tanf+0x190>
 8012274:	eddf 5a47 	vldr	s11, [pc, #284]	; 8012394 <__kernel_tanf+0x194>
 8012278:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8012398 <__kernel_tanf+0x198>
 801227c:	4940      	ldr	r1, [pc, #256]	; (8012380 <__kernel_tanf+0x180>)
 801227e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012282:	428a      	cmp	r2, r1
 8012284:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012288:	ee67 4aa6 	vmul.f32	s9, s15, s13
 801228c:	eee7 5a06 	vfma.f32	s11, s14, s12
 8012290:	ed9f 6a42 	vldr	s12, [pc, #264]	; 801239c <__kernel_tanf+0x19c>
 8012294:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012298:	eddf 5a41 	vldr	s11, [pc, #260]	; 80123a0 <__kernel_tanf+0x1a0>
 801229c:	eee6 5a07 	vfma.f32	s11, s12, s14
 80122a0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80123a4 <__kernel_tanf+0x1a4>
 80122a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80122a8:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80123a8 <__kernel_tanf+0x1a8>
 80122ac:	eee6 5a07 	vfma.f32	s11, s12, s14
 80122b0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80123ac <__kernel_tanf+0x1ac>
 80122b4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80122b8:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80123b0 <__kernel_tanf+0x1b0>
 80122bc:	eea6 5a07 	vfma.f32	s10, s12, s14
 80122c0:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 80123b4 <__kernel_tanf+0x1b4>
 80122c4:	eea5 6a07 	vfma.f32	s12, s10, s14
 80122c8:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 80123b8 <__kernel_tanf+0x1b8>
 80122cc:	eea6 5a07 	vfma.f32	s10, s12, s14
 80122d0:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80123bc <__kernel_tanf+0x1bc>
 80122d4:	eea5 6a07 	vfma.f32	s12, s10, s14
 80122d8:	eeb0 7a46 	vmov.f32	s14, s12
 80122dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80122e0:	eeb0 6a60 	vmov.f32	s12, s1
 80122e4:	eea7 6a24 	vfma.f32	s12, s14, s9
 80122e8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80123c0 <__kernel_tanf+0x1c0>
 80122ec:	eee6 0a26 	vfma.f32	s1, s12, s13
 80122f0:	eee4 0a87 	vfma.f32	s1, s9, s14
 80122f4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80122f8:	dd1d      	ble.n	8012336 <__kernel_tanf+0x136>
 80122fa:	ee07 0a10 	vmov	s14, r0
 80122fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012302:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8012306:	ee76 6a87 	vadd.f32	s13, s13, s14
 801230a:	179b      	asrs	r3, r3, #30
 801230c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8012310:	f003 0302 	and.w	r3, r3, #2
 8012314:	f1c3 0301 	rsb	r3, r3, #1
 8012318:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801231c:	ee76 0a60 	vsub.f32	s1, s12, s1
 8012320:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012324:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012328:	ee07 3a90 	vmov	s15, r3
 801232c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012334:	e77c      	b.n	8012230 <__kernel_tanf+0x30>
 8012336:	2801      	cmp	r0, #1
 8012338:	d01f      	beq.n	801237a <__kernel_tanf+0x17a>
 801233a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801233e:	eec7 5a26 	vdiv.f32	s11, s14, s13
 8012342:	4b20      	ldr	r3, [pc, #128]	; (80123c4 <__kernel_tanf+0x1c4>)
 8012344:	ee16 2a90 	vmov	r2, s13
 8012348:	401a      	ands	r2, r3
 801234a:	ee06 2a10 	vmov	s12, r2
 801234e:	ee15 2a90 	vmov	r2, s11
 8012352:	4013      	ands	r3, r2
 8012354:	ee07 3a10 	vmov	s14, r3
 8012358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801235c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012360:	ee76 7a67 	vsub.f32	s15, s12, s15
 8012364:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8012368:	eef0 7a66 	vmov.f32	s15, s13
 801236c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8012370:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8012374:	eef0 7a47 	vmov.f32	s15, s14
 8012378:	e75a      	b.n	8012230 <__kernel_tanf+0x30>
 801237a:	eef0 7a66 	vmov.f32	s15, s13
 801237e:	e757      	b.n	8012230 <__kernel_tanf+0x30>
 8012380:	3f2ca13f 	.word	0x3f2ca13f
 8012384:	3f490fda 	.word	0x3f490fda
 8012388:	33222168 	.word	0x33222168
 801238c:	00000000 	.word	0x00000000
 8012390:	37d95384 	.word	0x37d95384
 8012394:	3895c07a 	.word	0x3895c07a
 8012398:	b79bae5f 	.word	0xb79bae5f
 801239c:	398137b9 	.word	0x398137b9
 80123a0:	3abede48 	.word	0x3abede48
 80123a4:	3c11371f 	.word	0x3c11371f
 80123a8:	3d5d0dd1 	.word	0x3d5d0dd1
 80123ac:	38a3f445 	.word	0x38a3f445
 80123b0:	3a1a26c8 	.word	0x3a1a26c8
 80123b4:	3b6b6916 	.word	0x3b6b6916
 80123b8:	3cb327a4 	.word	0x3cb327a4
 80123bc:	3e088889 	.word	0x3e088889
 80123c0:	3eaaaaab 	.word	0x3eaaaaab
 80123c4:	fffff000 	.word	0xfffff000

080123c8 <matherr>:
 80123c8:	2000      	movs	r0, #0
 80123ca:	4770      	bx	lr
 80123cc:	0000      	movs	r0, r0
	...

080123d0 <nan>:
 80123d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80123d8 <nan+0x8>
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop
 80123d8:	00000000 	.word	0x00000000
 80123dc:	7ff80000 	.word	0x7ff80000

080123e0 <expm1f>:
 80123e0:	ee10 2a10 	vmov	r2, s0
 80123e4:	4985      	ldr	r1, [pc, #532]	; (80125fc <expm1f+0x21c>)
 80123e6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80123ea:	428b      	cmp	r3, r1
 80123ec:	d924      	bls.n	8012438 <expm1f+0x58>
 80123ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80123f2:	d902      	bls.n	80123fa <expm1f+0x1a>
 80123f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80123f8:	4770      	bx	lr
 80123fa:	d106      	bne.n	801240a <expm1f+0x2a>
 80123fc:	2a00      	cmp	r2, #0
 80123fe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012402:	bfb8      	it	lt
 8012404:	eeb0 0a67 	vmovlt.f32	s0, s15
 8012408:	4770      	bx	lr
 801240a:	2a00      	cmp	r2, #0
 801240c:	db08      	blt.n	8012420 <expm1f+0x40>
 801240e:	4a7c      	ldr	r2, [pc, #496]	; (8012600 <expm1f+0x220>)
 8012410:	4293      	cmp	r3, r2
 8012412:	f240 80eb 	bls.w	80125ec <expm1f+0x20c>
 8012416:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8012604 <expm1f+0x224>
 801241a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801241e:	4770      	bx	lr
 8012420:	eddf 7a79 	vldr	s15, [pc, #484]	; 8012608 <expm1f+0x228>
 8012424:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012430:	d554      	bpl.n	80124dc <expm1f+0xfc>
 8012432:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012436:	4770      	bx	lr
 8012438:	4974      	ldr	r1, [pc, #464]	; (801260c <expm1f+0x22c>)
 801243a:	428b      	cmp	r3, r1
 801243c:	d96d      	bls.n	801251a <expm1f+0x13a>
 801243e:	4974      	ldr	r1, [pc, #464]	; (8012610 <expm1f+0x230>)
 8012440:	428b      	cmp	r3, r1
 8012442:	d84b      	bhi.n	80124dc <expm1f+0xfc>
 8012444:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8012614 <expm1f+0x234>
 8012448:	2a00      	cmp	r2, #0
 801244a:	bfa7      	ittee	ge
 801244c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8012450:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8012618 <expm1f+0x238>
 8012454:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 801261c <expm1f+0x23c>
 8012458:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801245c:	bfac      	ite	ge
 801245e:	2301      	movge	r3, #1
 8012460:	f04f 33ff 	movlt.w	r3, #4294967295
 8012464:	ee37 0a67 	vsub.f32	s0, s14, s15
 8012468:	ee37 7a40 	vsub.f32	s14, s14, s0
 801246c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012470:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012474:	ee20 5a25 	vmul.f32	s10, s0, s11
 8012478:	eddf 6a69 	vldr	s13, [pc, #420]	; 8012620 <expm1f+0x240>
 801247c:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8012624 <expm1f+0x244>
 8012480:	ee20 7a05 	vmul.f32	s14, s0, s10
 8012484:	eea7 6a26 	vfma.f32	s12, s14, s13
 8012488:	eddf 6a67 	vldr	s13, [pc, #412]	; 8012628 <expm1f+0x248>
 801248c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8012490:	ed9f 6a66 	vldr	s12, [pc, #408]	; 801262c <expm1f+0x24c>
 8012494:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012498:	eddf 6a65 	vldr	s13, [pc, #404]	; 8012630 <expm1f+0x250>
 801249c:	eee6 6a07 	vfma.f32	s13, s12, s14
 80124a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80124a4:	eef0 4a46 	vmov.f32	s9, s12
 80124a8:	eee6 4a87 	vfma.f32	s9, s13, s14
 80124ac:	eef0 6a64 	vmov.f32	s13, s9
 80124b0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 80124b4:	eee5 4a66 	vfms.f32	s9, s10, s13
 80124b8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80124bc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80124c0:	eee0 6a64 	vfms.f32	s13, s0, s9
 80124c4:	eef0 4a66 	vmov.f32	s9, s13
 80124c8:	eec5 6a24 	vdiv.f32	s13, s10, s9
 80124cc:	ee66 6a87 	vmul.f32	s13, s13, s14
 80124d0:	bb8b      	cbnz	r3, 8012536 <expm1f+0x156>
 80124d2:	eef0 7a47 	vmov.f32	s15, s14
 80124d6:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80124da:	e027      	b.n	801252c <expm1f+0x14c>
 80124dc:	eddf 7a55 	vldr	s15, [pc, #340]	; 8012634 <expm1f+0x254>
 80124e0:	2a00      	cmp	r2, #0
 80124e2:	ee20 7a27 	vmul.f32	s14, s0, s15
 80124e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80124ea:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80124ee:	bfa8      	it	ge
 80124f0:	eef0 7a66 	vmovge.f32	s15, s13
 80124f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124f8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012614 <expm1f+0x234>
 80124fc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8012618 <expm1f+0x238>
 8012500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012504:	ee17 3a90 	vmov	r3, s15
 8012508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801250c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012510:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012514:	eeb0 7a40 	vmov.f32	s14, s0
 8012518:	e7a4      	b.n	8012464 <expm1f+0x84>
 801251a:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801251e:	d208      	bcs.n	8012532 <expm1f+0x152>
 8012520:	eddf 7a38 	vldr	s15, [pc, #224]	; 8012604 <expm1f+0x224>
 8012524:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012528:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801252c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012530:	4770      	bx	lr
 8012532:	2300      	movs	r3, #0
 8012534:	e79c      	b.n	8012470 <expm1f+0x90>
 8012536:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801253a:	1c5a      	adds	r2, r3, #1
 801253c:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8012540:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012544:	d106      	bne.n	8012554 <expm1f+0x174>
 8012546:	ee70 7a67 	vsub.f32	s15, s0, s15
 801254a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801254e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8012552:	4770      	bx	lr
 8012554:	2b01      	cmp	r3, #1
 8012556:	d118      	bne.n	801258a <expm1f+0x1aa>
 8012558:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801255c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012564:	bf41      	itttt	mi
 8012566:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801256a:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 801256e:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 8012572:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 8012576:	bf5f      	itttt	pl
 8012578:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 801257c:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 8012580:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 8012584:	eeb0 0a46 	vmovpl.f32	s0, s12
 8012588:	4770      	bx	lr
 801258a:	1c5a      	adds	r2, r3, #1
 801258c:	2a39      	cmp	r2, #57	; 0x39
 801258e:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8012592:	d90b      	bls.n	80125ac <expm1f+0x1cc>
 8012594:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012598:	ee36 0a40 	vsub.f32	s0, s12, s0
 801259c:	ee10 3a10 	vmov	r3, s0
 80125a0:	440b      	add	r3, r1
 80125a2:	ee00 3a10 	vmov	s0, r3
 80125a6:	ee30 0a46 	vsub.f32	s0, s0, s12
 80125aa:	4770      	bx	lr
 80125ac:	2b16      	cmp	r3, #22
 80125ae:	dc11      	bgt.n	80125d4 <expm1f+0x1f4>
 80125b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80125b4:	fa42 f303 	asr.w	r3, r2, r3
 80125b8:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80125bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80125c0:	ee07 3a90 	vmov	s15, r3
 80125c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80125c8:	ee10 3a10 	vmov	r3, s0
 80125cc:	440b      	add	r3, r1
 80125ce:	ee00 3a10 	vmov	s0, r3
 80125d2:	4770      	bx	lr
 80125d4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80125d8:	05db      	lsls	r3, r3, #23
 80125da:	ee07 3a10 	vmov	s14, r3
 80125de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80125e6:	ee30 0a06 	vadd.f32	s0, s0, s12
 80125ea:	e7ed      	b.n	80125c8 <expm1f+0x1e8>
 80125ec:	eddf 7a11 	vldr	s15, [pc, #68]	; 8012634 <expm1f+0x254>
 80125f0:	ee20 7a27 	vmul.f32	s14, s0, s15
 80125f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80125f8:	e77c      	b.n	80124f4 <expm1f+0x114>
 80125fa:	bf00      	nop
 80125fc:	4195b843 	.word	0x4195b843
 8012600:	42b17217 	.word	0x42b17217
 8012604:	7149f2ca 	.word	0x7149f2ca
 8012608:	0da24260 	.word	0x0da24260
 801260c:	3eb17218 	.word	0x3eb17218
 8012610:	3f851591 	.word	0x3f851591
 8012614:	3f317180 	.word	0x3f317180
 8012618:	3717f7d1 	.word	0x3717f7d1
 801261c:	b717f7d1 	.word	0xb717f7d1
 8012620:	b457edbb 	.word	0xb457edbb
 8012624:	36867e54 	.word	0x36867e54
 8012628:	b8a670cd 	.word	0xb8a670cd
 801262c:	3ad00d01 	.word	0x3ad00d01
 8012630:	bd088889 	.word	0xbd088889
 8012634:	3fb8aa3b 	.word	0x3fb8aa3b

08012638 <finitef>:
 8012638:	ee10 3a10 	vmov	r3, s0
 801263c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8012640:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8012644:	bfac      	ite	ge
 8012646:	2000      	movge	r0, #0
 8012648:	2001      	movlt	r0, #1
 801264a:	4770      	bx	lr

0801264c <nanf>:
 801264c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012654 <nanf+0x8>
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop
 8012654:	7fc00000 	.word	0x7fc00000

08012658 <rintf>:
 8012658:	b513      	push	{r0, r1, r4, lr}
 801265a:	ee10 1a10 	vmov	r1, s0
 801265e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012662:	0ddc      	lsrs	r4, r3, #23
 8012664:	3c7f      	subs	r4, #127	; 0x7f
 8012666:	2c16      	cmp	r4, #22
 8012668:	dc46      	bgt.n	80126f8 <rintf+0xa0>
 801266a:	b32b      	cbz	r3, 80126b8 <rintf+0x60>
 801266c:	2c00      	cmp	r4, #0
 801266e:	ee10 2a10 	vmov	r2, s0
 8012672:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8012676:	da21      	bge.n	80126bc <rintf+0x64>
 8012678:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801267c:	425b      	negs	r3, r3
 801267e:	4a21      	ldr	r2, [pc, #132]	; (8012704 <rintf+0xac>)
 8012680:	0a5b      	lsrs	r3, r3, #9
 8012682:	0d09      	lsrs	r1, r1, #20
 8012684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012688:	0509      	lsls	r1, r1, #20
 801268a:	430b      	orrs	r3, r1
 801268c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8012690:	ee07 3a90 	vmov	s15, r3
 8012694:	edd2 6a00 	vldr	s13, [r2]
 8012698:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801269c:	ed8d 7a01 	vstr	s14, [sp, #4]
 80126a0:	eddd 7a01 	vldr	s15, [sp, #4]
 80126a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80126a8:	ee17 3a90 	vmov	r3, s15
 80126ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80126b0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80126b4:	ee00 3a10 	vmov	s0, r3
 80126b8:	b002      	add	sp, #8
 80126ba:	bd10      	pop	{r4, pc}
 80126bc:	4b12      	ldr	r3, [pc, #72]	; (8012708 <rintf+0xb0>)
 80126be:	4123      	asrs	r3, r4
 80126c0:	4219      	tst	r1, r3
 80126c2:	d0f9      	beq.n	80126b8 <rintf+0x60>
 80126c4:	085b      	lsrs	r3, r3, #1
 80126c6:	4219      	tst	r1, r3
 80126c8:	d006      	beq.n	80126d8 <rintf+0x80>
 80126ca:	ea21 0203 	bic.w	r2, r1, r3
 80126ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80126d2:	fa43 f404 	asr.w	r4, r3, r4
 80126d6:	4322      	orrs	r2, r4
 80126d8:	4b0a      	ldr	r3, [pc, #40]	; (8012704 <rintf+0xac>)
 80126da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80126de:	ed90 7a00 	vldr	s14, [r0]
 80126e2:	ee07 2a90 	vmov	s15, r2
 80126e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80126ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80126f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80126f6:	e7df      	b.n	80126b8 <rintf+0x60>
 80126f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80126fc:	d3dc      	bcc.n	80126b8 <rintf+0x60>
 80126fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012702:	e7d9      	b.n	80126b8 <rintf+0x60>
 8012704:	0801591c 	.word	0x0801591c
 8012708:	007fffff 	.word	0x007fffff

0801270c <scalbnf>:
 801270c:	b508      	push	{r3, lr}
 801270e:	ee10 2a10 	vmov	r2, s0
 8012712:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8012716:	ed2d 8b02 	vpush	{d8}
 801271a:	eef0 0a40 	vmov.f32	s1, s0
 801271e:	d004      	beq.n	801272a <scalbnf+0x1e>
 8012720:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012724:	d306      	bcc.n	8012734 <scalbnf+0x28>
 8012726:	ee70 0a00 	vadd.f32	s1, s0, s0
 801272a:	ecbd 8b02 	vpop	{d8}
 801272e:	eeb0 0a60 	vmov.f32	s0, s1
 8012732:	bd08      	pop	{r3, pc}
 8012734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012738:	d21c      	bcs.n	8012774 <scalbnf+0x68>
 801273a:	4b1f      	ldr	r3, [pc, #124]	; (80127b8 <scalbnf+0xac>)
 801273c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80127bc <scalbnf+0xb0>
 8012740:	4298      	cmp	r0, r3
 8012742:	ee60 0a27 	vmul.f32	s1, s0, s15
 8012746:	db10      	blt.n	801276a <scalbnf+0x5e>
 8012748:	ee10 2a90 	vmov	r2, s1
 801274c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8012750:	3b19      	subs	r3, #25
 8012752:	4403      	add	r3, r0
 8012754:	2bfe      	cmp	r3, #254	; 0xfe
 8012756:	dd0f      	ble.n	8012778 <scalbnf+0x6c>
 8012758:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80127c0 <scalbnf+0xb4>
 801275c:	eeb0 0a48 	vmov.f32	s0, s16
 8012760:	f000 f834 	bl	80127cc <copysignf>
 8012764:	ee60 0a08 	vmul.f32	s1, s0, s16
 8012768:	e7df      	b.n	801272a <scalbnf+0x1e>
 801276a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80127c4 <scalbnf+0xb8>
 801276e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8012772:	e7da      	b.n	801272a <scalbnf+0x1e>
 8012774:	0ddb      	lsrs	r3, r3, #23
 8012776:	e7ec      	b.n	8012752 <scalbnf+0x46>
 8012778:	2b00      	cmp	r3, #0
 801277a:	dd06      	ble.n	801278a <scalbnf+0x7e>
 801277c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8012780:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012784:	ee00 3a90 	vmov	s1, r3
 8012788:	e7cf      	b.n	801272a <scalbnf+0x1e>
 801278a:	f113 0f16 	cmn.w	r3, #22
 801278e:	da06      	bge.n	801279e <scalbnf+0x92>
 8012790:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012794:	4298      	cmp	r0, r3
 8012796:	dcdf      	bgt.n	8012758 <scalbnf+0x4c>
 8012798:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80127c4 <scalbnf+0xb8>
 801279c:	e7de      	b.n	801275c <scalbnf+0x50>
 801279e:	3319      	adds	r3, #25
 80127a0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80127a4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80127a8:	eddf 7a07 	vldr	s15, [pc, #28]	; 80127c8 <scalbnf+0xbc>
 80127ac:	ee07 3a10 	vmov	s14, r3
 80127b0:	ee67 0a27 	vmul.f32	s1, s14, s15
 80127b4:	e7b9      	b.n	801272a <scalbnf+0x1e>
 80127b6:	bf00      	nop
 80127b8:	ffff3cb0 	.word	0xffff3cb0
 80127bc:	4c000000 	.word	0x4c000000
 80127c0:	7149f2ca 	.word	0x7149f2ca
 80127c4:	0da24260 	.word	0x0da24260
 80127c8:	33000000 	.word	0x33000000

080127cc <copysignf>:
 80127cc:	ee10 3a10 	vmov	r3, s0
 80127d0:	ee10 2a90 	vmov	r2, s1
 80127d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80127dc:	4313      	orrs	r3, r2
 80127de:	ee00 3a10 	vmov	s0, r3
 80127e2:	4770      	bx	lr

080127e4 <_init>:
 80127e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e6:	bf00      	nop
 80127e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127ea:	bc08      	pop	{r3}
 80127ec:	469e      	mov	lr, r3
 80127ee:	4770      	bx	lr

080127f0 <_fini>:
 80127f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127f2:	bf00      	nop
 80127f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127f6:	bc08      	pop	{r3}
 80127f8:	469e      	mov	lr, r3
 80127fa:	4770      	bx	lr
